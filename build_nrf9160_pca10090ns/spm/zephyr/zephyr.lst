
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000568 	.word	0x20000568

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout)

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex)

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout)
   4:	000015f1 	.word	0x000015f1
   8:	00002d81 	.word	0x00002d81
   c:	00000fcd 	.word	0x00000fcd
		if (fdtable[fd].obj == NULL) {
  10:	00000fcd 	.word	0x00000fcd
  14:	00000fcd 	.word	0x00000fcd
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00000fcd 	.word	0x00000fcd

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE0(K_SYSCALL_Z_ERRNO, z_errno, int *)
  1c:	00000fcd 	.word	0x00000fcd
	errno = ENFILE;
  20:	00000fcd 	.word	0x00000fcd
	return -1;
  24:	00000fcd 	.word	0x00000fcd

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex)
  28:	00000fcd 	.word	0x00000fcd
  2c:	00000f91 	.word	0x00000f91
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00000fcd 	.word	0x00000fcd
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00000fcd 	.word	0x00000fcd
  38:	00000f39 	.word	0x00000f39
  3c:	00002d17 	.word	0x00002d17

00000040 <_irq_vector_table>:
  40:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  50:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  60:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  70:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  80:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  90:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  a0:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  b0:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  c0:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  d0:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  e0:	00000ff1 00000ff1 00000ff1 00000ff1     ................
  f0:	00000ff1 00000ff1 00000ff1 00000ff1     ................
 100:	00000ff1 00000ff1 00000ff1 00000ff1     ................
 110:	00000ff1 00000ff1 00000ff1 00000ff1     ................
 120:	00000ff1 00000ff1 00000ff1 00000ff1     ................
 130:	00000ff1 00000ff1 00000ff1 00000ff1     ................
 140:	00000ff1                                ....

Disassembly of section _TEXT_SECTION_NAME_2:

00000144 <__aeabi_ldivmod>:
     144:	b97b      	cbnz	r3, 166 <CONFIG_MODEM_INFO_SOCKET_BUF_SIZE+0x1e>
     146:	b972      	cbnz	r2, 166 <CONFIG_MODEM_INFO_SOCKET_BUF_SIZE+0x1e>
     148:	2900      	cmp	r1, #0
     14a:	bfbe      	ittt	lt
     14c:	2000      	movlt	r0, #0
     14e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     152:	e006      	blt.n	162 <CONFIG_MODEM_INFO_SOCKET_BUF_SIZE+0x1a>
     154:	bf08      	it	eq
     156:	2800      	cmpeq	r0, #0
     158:	bf1c      	itt	ne
     15a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     15e:	f04f 30ff 	movne.w	r0, #4294967295
     162:	f000 b9af 	b.w	4c4 <__aeabi_idiv0>
     166:	f1ad 0c08 	sub.w	ip, sp, #8
     16a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     16e:	2900      	cmp	r1, #0
     170:	db09      	blt.n	186 <CONFIG_MODEM_INFO_SOCKET_BUF_SIZE+0x3e>
     172:	2b00      	cmp	r3, #0
     174:	db1a      	blt.n	1ac <CONFIG_MODEM_INFO_SOCKET_BUF_SIZE+0x64>
     176:	f000 f835 	bl	1e4 <__udivmoddi4>
     17a:	f8dd e004 	ldr.w	lr, [sp, #4]
     17e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     182:	b004      	add	sp, #16
     184:	4770      	bx	lr
     186:	4240      	negs	r0, r0
     188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     18c:	2b00      	cmp	r3, #0
     18e:	db1b      	blt.n	1c8 <CONFIG_MODEM_INFO_SOCKET_BUF_SIZE+0x80>
     190:	f000 f828 	bl	1e4 <__udivmoddi4>
     194:	f8dd e004 	ldr.w	lr, [sp, #4]
     198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     19c:	b004      	add	sp, #16
     19e:	4240      	negs	r0, r0
     1a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1a4:	4252      	negs	r2, r2
     1a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1aa:	4770      	bx	lr
     1ac:	4252      	negs	r2, r2
     1ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1b2:	f000 f817 	bl	1e4 <__udivmoddi4>
     1b6:	f8dd e004 	ldr.w	lr, [sp, #4]
     1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1be:	b004      	add	sp, #16
     1c0:	4240      	negs	r0, r0
     1c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1c6:	4770      	bx	lr
     1c8:	4252      	negs	r2, r2
     1ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1ce:	f000 f809 	bl	1e4 <__udivmoddi4>
     1d2:	f8dd e004 	ldr.w	lr, [sp, #4]
     1d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1da:	b004      	add	sp, #16
     1dc:	4252      	negs	r2, r2
     1de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e2:	4770      	bx	lr

000001e4 <__udivmoddi4>:
     1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1e8:	468c      	mov	ip, r1
     1ea:	9d08      	ldr	r5, [sp, #32]
     1ec:	4604      	mov	r4, r0
     1ee:	468a      	mov	sl, r1
     1f0:	2b00      	cmp	r3, #0
     1f2:	d14a      	bne.n	28a <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x8a>
     1f4:	428a      	cmp	r2, r1
     1f6:	4617      	mov	r7, r2
     1f8:	d962      	bls.n	2c0 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xc0>
     1fa:	fab2 f682 	clz	r6, r2
     1fe:	b14e      	cbz	r6, 214 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x14>
     200:	f1c6 0e20 	rsb	lr, r6, #32
     204:	fa01 f306 	lsl.w	r3, r1, r6
     208:	40b7      	lsls	r7, r6
     20a:	40b4      	lsls	r4, r6
     20c:	fa20 fe0e 	lsr.w	lr, r0, lr
     210:	ea4e 0a03 	orr.w	sl, lr, r3
     214:	ea4f 4817 	mov.w	r8, r7, lsr #16
     218:	0c23      	lsrs	r3, r4, #16
     21a:	fa1f f987 	uxth.w	r9, r7
     21e:	fbba fef8 	udiv	lr, sl, r8
     222:	fb08 aa1e 	mls	sl, r8, lr, sl
     226:	fb0e f209 	mul.w	r2, lr, r9
     22a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
     22e:	429a      	cmp	r2, r3
     230:	d90b      	bls.n	24a <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x4a>
     232:	18fb      	adds	r3, r7, r3
     234:	f10e 31ff 	add.w	r1, lr, #4294967295
     238:	bf2c      	ite	cs
     23a:	2001      	movcs	r0, #1
     23c:	2000      	movcc	r0, #0
     23e:	429a      	cmp	r2, r3
     240:	d902      	bls.n	248 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x48>
     242:	2800      	cmp	r0, #0
     244:	f000 812a 	beq.w	49c <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x9c>
     248:	468e      	mov	lr, r1
     24a:	1a9a      	subs	r2, r3, r2
     24c:	b2a3      	uxth	r3, r4
     24e:	fbb2 f0f8 	udiv	r0, r2, r8
     252:	fb08 2210 	mls	r2, r8, r0, r2
     256:	fb00 f909 	mul.w	r9, r0, r9
     25a:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
     25e:	45a1      	cmp	r9, r4
     260:	d907      	bls.n	272 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x72>
     262:	193c      	adds	r4, r7, r4
     264:	f100 33ff 	add.w	r3, r0, #4294967295
     268:	d202      	bcs.n	270 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x70>
     26a:	45a1      	cmp	r9, r4
     26c:	f200 8110 	bhi.w	490 <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x90>
     270:	4618      	mov	r0, r3
     272:	eba4 0409 	sub.w	r4, r4, r9
     276:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     27a:	2100      	movs	r1, #0
     27c:	b11d      	cbz	r5, 286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     27e:	40f4      	lsrs	r4, r6
     280:	2300      	movs	r3, #0
     282:	e9c5 4300 	strd	r4, r3, [r5]
     286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     28a:	428b      	cmp	r3, r1
     28c:	d908      	bls.n	2a0 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xa0>
     28e:	2d00      	cmp	r5, #0
     290:	f000 80f2 	beq.w	478 <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x78>
     294:	2100      	movs	r1, #0
     296:	e9c5 0c00 	strd	r0, ip, [r5]
     29a:	4608      	mov	r0, r1
     29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2a0:	fab3 f183 	clz	r1, r3
     2a4:	2900      	cmp	r1, #0
     2a6:	d14e      	bne.n	346 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x146>
     2a8:	4563      	cmp	r3, ip
     2aa:	f0c0 80e8 	bcc.w	47e <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x7e>
     2ae:	4282      	cmp	r2, r0
     2b0:	f240 80e5 	bls.w	47e <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x7e>
     2b4:	4608      	mov	r0, r1
     2b6:	2d00      	cmp	r5, #0
     2b8:	d0e5      	beq.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     2ba:	e9c5 4a00 	strd	r4, sl, [r5]
     2be:	e7e2      	b.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     2c0:	b902      	cbnz	r2, 2c4 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xc4>
     2c2:	deff      	udf	#255	; 0xff
     2c4:	fab2 f682 	clz	r6, r2
     2c8:	2e00      	cmp	r6, #0
     2ca:	f040 8099 	bne.w	400 <CONFIG_AT_HOST_SOCKET_BUF_SIZE>
     2ce:	1a8b      	subs	r3, r1, r2
     2d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     2d4:	fa1f f882 	uxth.w	r8, r2
     2d8:	2101      	movs	r1, #1
     2da:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2de:	fbb3 f2fe 	udiv	r2, r3, lr
     2e2:	fb0e 3012 	mls	r0, lr, r2, r3
     2e6:	fb08 f902 	mul.w	r9, r8, r2
     2ea:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
     2ee:	45e1      	cmp	r9, ip
     2f0:	d908      	bls.n	304 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x104>
     2f2:	eb17 0c0c 	adds.w	ip, r7, ip
     2f6:	f102 33ff 	add.w	r3, r2, #4294967295
     2fa:	d202      	bcs.n	302 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x102>
     2fc:	45e1      	cmp	r9, ip
     2fe:	f200 80ca 	bhi.w	496 <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x96>
     302:	461a      	mov	r2, r3
     304:	ebac 0c09 	sub.w	ip, ip, r9
     308:	b2a3      	uxth	r3, r4
     30a:	fbbc f0fe 	udiv	r0, ip, lr
     30e:	fb0e cc10 	mls	ip, lr, r0, ip
     312:	fb08 f800 	mul.w	r8, r8, r0
     316:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
     31a:	45a0      	cmp	r8, r4
     31c:	d90e      	bls.n	33c <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x13c>
     31e:	193c      	adds	r4, r7, r4
     320:	f100 33ff 	add.w	r3, r0, #4294967295
     324:	bf2c      	ite	cs
     326:	f04f 0c01 	movcs.w	ip, #1
     32a:	f04f 0c00 	movcc.w	ip, #0
     32e:	45a0      	cmp	r8, r4
     330:	d903      	bls.n	33a <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x13a>
     332:	f1bc 0f00 	cmp.w	ip, #0
     336:	f000 80a8 	beq.w	48a <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x8a>
     33a:	4618      	mov	r0, r3
     33c:	eba4 0408 	sub.w	r4, r4, r8
     340:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
     344:	e79a      	b.n	27c <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x7c>
     346:	f1c1 0420 	rsb	r4, r1, #32
     34a:	408b      	lsls	r3, r1
     34c:	fa02 fe01 	lsl.w	lr, r2, r1
     350:	fa0c f601 	lsl.w	r6, ip, r1
     354:	40e2      	lsrs	r2, r4
     356:	fa20 f704 	lsr.w	r7, r0, r4
     35a:	fa2c fc04 	lsr.w	ip, ip, r4
     35e:	fa00 f801 	lsl.w	r8, r0, r1
     362:	4313      	orrs	r3, r2
     364:	433e      	orrs	r6, r7
     366:	0c1f      	lsrs	r7, r3, #16
     368:	0c32      	lsrs	r2, r6, #16
     36a:	fa1f f983 	uxth.w	r9, r3
     36e:	fbbc f0f7 	udiv	r0, ip, r7
     372:	fb07 cc10 	mls	ip, r7, r0, ip
     376:	fb00 fa09 	mul.w	sl, r0, r9
     37a:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     37e:	45e2      	cmp	sl, ip
     380:	d908      	bls.n	394 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x194>
     382:	eb13 0c0c 	adds.w	ip, r3, ip
     386:	f100 32ff 	add.w	r2, r0, #4294967295
     38a:	d202      	bcs.n	392 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x192>
     38c:	45e2      	cmp	sl, ip
     38e:	f200 8089 	bhi.w	4a4 <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0xa4>
     392:	4610      	mov	r0, r2
     394:	ebac 0c0a 	sub.w	ip, ip, sl
     398:	b2b6      	uxth	r6, r6
     39a:	fbbc faf7 	udiv	sl, ip, r7
     39e:	fb07 cc1a 	mls	ip, r7, sl, ip
     3a2:	fb0a f909 	mul.w	r9, sl, r9
     3a6:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
     3aa:	4591      	cmp	r9, r2
     3ac:	d906      	bls.n	3bc <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1bc>
     3ae:	189a      	adds	r2, r3, r2
     3b0:	f10a 36ff 	add.w	r6, sl, #4294967295
     3b4:	d201      	bcs.n	3ba <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1ba>
     3b6:	4591      	cmp	r9, r2
     3b8:	d87a      	bhi.n	4b0 <CONFIG_NET_TX_STACK_SIZE>
     3ba:	46b2      	mov	sl, r6
     3bc:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
     3c0:	eba2 0209 	sub.w	r2, r2, r9
     3c4:	fba0 670e 	umull	r6, r7, r0, lr
     3c8:	42ba      	cmp	r2, r7
     3ca:	46b4      	mov	ip, r6
     3cc:	46b9      	mov	r9, r7
     3ce:	d302      	bcc.n	3d6 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1d6>
     3d0:	d107      	bne.n	3e2 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1e2>
     3d2:	45b0      	cmp	r8, r6
     3d4:	d205      	bcs.n	3e2 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1e2>
     3d6:	ebb6 0c0e 	subs.w	ip, r6, lr
     3da:	eb67 0303 	sbc.w	r3, r7, r3
     3de:	3801      	subs	r0, #1
     3e0:	4699      	mov	r9, r3
     3e2:	2d00      	cmp	r5, #0
     3e4:	d06b      	beq.n	4be <CONFIG_NET_TX_STACK_SIZE+0xe>
     3e6:	ebb8 030c 	subs.w	r3, r8, ip
     3ea:	eb62 0209 	sbc.w	r2, r2, r9
     3ee:	fa02 f404 	lsl.w	r4, r2, r4
     3f2:	40cb      	lsrs	r3, r1
     3f4:	40ca      	lsrs	r2, r1
     3f6:	2100      	movs	r1, #0
     3f8:	431c      	orrs	r4, r3
     3fa:	e9c5 4200 	strd	r4, r2, [r5]
     3fe:	e742      	b.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     400:	40b7      	lsls	r7, r6
     402:	f1c6 0220 	rsb	r2, r6, #32
     406:	fa01 f306 	lsl.w	r3, r1, r6
     40a:	40b4      	lsls	r4, r6
     40c:	fa21 fc02 	lsr.w	ip, r1, r2
     410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     414:	fa20 f202 	lsr.w	r2, r0, r2
     418:	fa1f f887 	uxth.w	r8, r7
     41c:	fbbc f1fe 	udiv	r1, ip, lr
     420:	431a      	orrs	r2, r3
     422:	fb0e cc11 	mls	ip, lr, r1, ip
     426:	fb01 f008 	mul.w	r0, r1, r8
     42a:	0c13      	lsrs	r3, r2, #16
     42c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
     430:	4560      	cmp	r0, ip
     432:	d907      	bls.n	444 <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x44>
     434:	eb17 0c0c 	adds.w	ip, r7, ip
     438:	f101 33ff 	add.w	r3, r1, #4294967295
     43c:	d201      	bcs.n	442 <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x42>
     43e:	4560      	cmp	r0, ip
     440:	d833      	bhi.n	4aa <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0xaa>
     442:	4619      	mov	r1, r3
     444:	ebac 0c00 	sub.w	ip, ip, r0
     448:	b292      	uxth	r2, r2
     44a:	fbbc f0fe 	udiv	r0, ip, lr
     44e:	fb0e cc10 	mls	ip, lr, r0, ip
     452:	fb00 f308 	mul.w	r3, r0, r8
     456:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     45a:	4563      	cmp	r3, ip
     45c:	d907      	bls.n	46e <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x6e>
     45e:	eb17 0c0c 	adds.w	ip, r7, ip
     462:	f100 32ff 	add.w	r2, r0, #4294967295
     466:	d201      	bcs.n	46c <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x6c>
     468:	4563      	cmp	r3, ip
     46a:	d825      	bhi.n	4b8 <CONFIG_NET_TX_STACK_SIZE+0x8>
     46c:	4610      	mov	r0, r2
     46e:	ebac 0303 	sub.w	r3, ip, r3
     472:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     476:	e730      	b.n	2da <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xda>
     478:	4629      	mov	r1, r5
     47a:	4628      	mov	r0, r5
     47c:	e703      	b.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     47e:	1a84      	subs	r4, r0, r2
     480:	eb6c 0303 	sbc.w	r3, ip, r3
     484:	2001      	movs	r0, #1
     486:	469a      	mov	sl, r3
     488:	e715      	b.n	2b6 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0xb6>
     48a:	3802      	subs	r0, #2
     48c:	443c      	add	r4, r7
     48e:	e755      	b.n	33c <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x13c>
     490:	3802      	subs	r0, #2
     492:	443c      	add	r4, r7
     494:	e6ed      	b.n	272 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x72>
     496:	3a02      	subs	r2, #2
     498:	44bc      	add	ip, r7
     49a:	e733      	b.n	304 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x104>
     49c:	f1ae 0e02 	sub.w	lr, lr, #2
     4a0:	443b      	add	r3, r7
     4a2:	e6d2      	b.n	24a <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x4a>
     4a4:	3802      	subs	r0, #2
     4a6:	449c      	add	ip, r3
     4a8:	e774      	b.n	394 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x194>
     4aa:	3902      	subs	r1, #2
     4ac:	44bc      	add	ip, r7
     4ae:	e7c9      	b.n	444 <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x44>
     4b0:	f1aa 0a02 	sub.w	sl, sl, #2
     4b4:	441a      	add	r2, r3
     4b6:	e781      	b.n	3bc <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x1bc>
     4b8:	3802      	subs	r0, #2
     4ba:	44bc      	add	ip, r7
     4bc:	e7d7      	b.n	46e <CONFIG_AT_HOST_SOCKET_BUF_SIZE+0x6e>
     4be:	4629      	mov	r1, r5
     4c0:	e6e1      	b.n	286 <CONFIG_SENSOR_SIM_THREAD_STACK_SIZE+0x86>
     4c2:	bf00      	nop

000004c4 <__aeabi_idiv0>:
     4c4:	4770      	bx	lr
     4c6:	bf00      	nop

000004c8 <__gnu_cmse_nonsecure_call>:
     4c8:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     4cc:	4627      	mov	r7, r4
     4ce:	46a0      	mov	r8, r4
     4d0:	46a1      	mov	r9, r4
     4d2:	46a2      	mov	sl, r4
     4d4:	46a3      	mov	fp, r4
     4d6:	46a4      	mov	ip, r4
     4d8:	ed2d 8b10 	vpush	{d8-d15}
     4dc:	f04f 0500 	mov.w	r5, #0
     4e0:	ec45 5b18 	vmov	d8, r5, r5
     4e4:	ec45 5a19 	vmov	s18, s19, r5, r5
     4e8:	ec45 5a1a 	vmov	s20, s21, r5, r5
     4ec:	ec45 5a1b 	vmov	s22, s23, r5, r5
     4f0:	ec45 5a1c 	vmov	s24, s25, r5, r5
     4f4:	ec45 5a1d 	vmov	s26, s27, r5, r5
     4f8:	ec45 5a1e 	vmov	s28, s29, r5, r5
     4fc:	ec45 5a1f 	vmov	s30, s31, r5, r5
     500:	eef1 5a10 	vmrs	r5, fpscr
     504:	f64f 7660 	movw	r6, #65376	; 0xff60
     508:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     50c:	4035      	ands	r5, r6
     50e:	eee1 5a10 	vmsr	fpscr, r5
     512:	f384 8800 	msr	CPSR_f, r4
     516:	4625      	mov	r5, r4
     518:	4626      	mov	r6, r4
     51a:	47a4      	blxns	r4
     51c:	ecbd 8b10 	vpop	{d8-d15}
     520:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000524 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
     524:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
     526:	4b0c      	ldr	r3, [pc, #48]	; (558 <tz_nonsecure_state_setup+0x34>)
     528:	609a      	str	r2, [r3, #8]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
     52a:	6803      	ldr	r3, [r0, #0]
     52c:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
     530:	6843      	ldr	r3, [r0, #4]
     532:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
     536:	7b02      	ldrb	r2, [r0, #12]
     538:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
     53c:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
     540:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
     544:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
     546:	bf48      	it	mi
     548:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
     54c:	b109      	cbz	r1, 552 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
     54e:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
     552:	f383 8894 	msr	CONTROL_NS, r3
}
     556:	4770      	bx	lr
     558:	e002ed00 	.word	0xe002ed00

0000055c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     55c:	4a08      	ldr	r2, [pc, #32]	; (580 <tz_nbanked_exception_target_state_set+0x24>)
     55e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
     560:	b148      	cbz	r0, 576 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
     562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     566:	041b      	lsls	r3, r3, #16
     568:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     56a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     56e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     572:	60d3      	str	r3, [r2, #12]
}
     574:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     576:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
     578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     57c:	e7f5      	b.n	56a <tz_nbanked_exception_target_state_set+0xe>
     57e:	bf00      	nop
     580:	e000ed00 	.word	0xe000ed00

00000584 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     584:	4a08      	ldr	r2, [pc, #32]	; (5a8 <tz_nonsecure_exception_prio_config+0x24>)
     586:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
     588:	b140      	cbz	r0, 59c <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     58a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
     58c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
     598:	60d3      	str	r3, [r2, #12]
}
     59a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
     59c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     5a0:	041b      	lsls	r3, r3, #16
     5a2:	0c1b      	lsrs	r3, r3, #16
     5a4:	e7f4      	b.n	590 <tz_nonsecure_exception_prio_config+0xc>
     5a6:	bf00      	nop
     5a8:	e000ed00 	.word	0xe000ed00

000005ac <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     5ac:	4a08      	ldr	r2, [pc, #32]	; (5d0 <tz_nonsecure_system_reset_req_block+0x24>)
     5ae:	68d3      	ldr	r3, [r2, #12]
	if (block) {
     5b0:	b140      	cbz	r0, 5c4 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
     5b2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
     5b4:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
     5b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
     5bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
     5c0:	60d3      	str	r3, [r2, #12]
}
     5c2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
     5c4:	f023 0308 	bic.w	r3, r3, #8
     5c8:	041b      	lsls	r3, r3, #16
     5ca:	0c1b      	lsrs	r3, r3, #16
     5cc:	e7f4      	b.n	5b8 <tz_nonsecure_system_reset_req_block+0xc>
     5ce:	bf00      	nop
     5d0:	e000ed00 	.word	0xe000ed00

000005d4 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
     5d4:	4a03      	ldr	r2, [pc, #12]	; (5e4 <CONFIG_NET_RX_STACK_SIZE+0x8>)
     5d6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
     5da:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
     5de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
     5e2:	4770      	bx	lr
     5e4:	e000ed00 	.word	0xe000ed00

000005e8 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
     5e8:	4b08      	ldr	r3, [pc, #32]	; (60c <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
     5ea:	681a      	ldr	r2, [r3, #0]
	if (enable) {
     5ec:	b118      	cbz	r0, 5f6 <tz_sau_configure+0xe>
     5ee:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     5f2:	601a      	str	r2, [r3, #0]
		}
	}
}
     5f4:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
     5f6:	f022 0201 	bic.w	r2, r2, #1
     5fa:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     5fc:	681a      	ldr	r2, [r3, #0]
		if (allns) {
     5fe:	b111      	cbz	r1, 606 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
     600:	f042 0202 	orr.w	r2, r2, #2
     604:	e7f5      	b.n	5f2 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
     606:	f022 0202 	bic.w	r2, r2, #2
     60a:	e7f2      	b.n	5f2 <tz_sau_configure+0xa>
     60c:	e000edd0 	.word	0xe000edd0

00000610 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     610:	680b      	ldr	r3, [r1, #0]
     612:	3301      	adds	r3, #1
     614:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     616:	4b01      	ldr	r3, [pc, #4]	; (61c <char_out+0xc>)
     618:	681b      	ldr	r3, [r3, #0]
     61a:	4718      	bx	r3
     61c:	20000ea8 	.word	0x20000ea8

00000620 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     624:	b085      	sub	sp, #20
     626:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     628:	469b      	mov	fp, r3
     62a:	2c01      	cmp	r4, #1
     62c:	bfb8      	it	lt
     62e:	2401      	movlt	r4, #1
     630:	2b01      	cmp	r3, #1
     632:	bf0c      	ite	eq
     634:	2330      	moveq	r3, #48	; 0x30
     636:	2320      	movne	r3, #32
     638:	4615      	mov	r5, r2
     63a:	4680      	mov	r8, r0
     63c:	4689      	mov	r9, r1
     63e:	2601      	movs	r6, #1
     640:	270a      	movs	r7, #10
     642:	2200      	movs	r2, #0
     644:	f8df a070 	ldr.w	sl, [pc, #112]	; 6b8 <_printk_dec_ulong+0x98>
     648:	9401      	str	r4, [sp, #4]
     64a:	9302      	str	r3, [sp, #8]
     64c:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit != 0 || remainder > pos) {
     650:	b90a      	cbnz	r2, 656 <_printk_dec_ulong+0x36>
     652:	45aa      	cmp	sl, r5
     654:	d21e      	bcs.n	694 <_printk_dec_ulong+0x74>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     656:	fbb5 f0f4 	udiv	r0, r5, r4
     65a:	4649      	mov	r1, r9
     65c:	3030      	adds	r0, #48	; 0x30
     65e:	47c0      	blx	r8
			found_largest_digit = 1;
     660:	2201      	movs	r2, #1
			digits++;
     662:	3601      	adds	r6, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
     664:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     668:	230a      	movs	r3, #10
		remaining--;
     66a:	3f01      	subs	r7, #1
	while (pos >= 9) {
     66c:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     66e:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     672:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     676:	d1e9      	bne.n	64c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     678:	4649      	mov	r1, r9
     67a:	f105 0030 	add.w	r0, r5, #48	; 0x30
     67e:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     680:	f1bb 0f03 	cmp.w	fp, #3
     684:	d103      	bne.n	68e <_printk_dec_ulong+0x6e>
		remaining = min_width - digits;
     686:	9b01      	ldr	r3, [sp, #4]
     688:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     68a:	2c00      	cmp	r4, #0
     68c:	dc0f      	bgt.n	6ae <_printk_dec_ulong+0x8e>
			out(' ', ctx);
		}
	}
}
     68e:	b005      	add	sp, #20
     690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     694:	9b01      	ldr	r3, [sp, #4]
     696:	42bb      	cmp	r3, r7
     698:	dbe4      	blt.n	664 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     69a:	f1bb 0f02 	cmp.w	fp, #2
     69e:	d8e1      	bhi.n	664 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     6a0:	4649      	mov	r1, r9
     6a2:	9802      	ldr	r0, [sp, #8]
     6a4:	9203      	str	r2, [sp, #12]
			digits++;
     6a6:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     6a8:	47c0      	blx	r8
			digits++;
     6aa:	9a03      	ldr	r2, [sp, #12]
     6ac:	e7da      	b.n	664 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     6ae:	4649      	mov	r1, r9
     6b0:	2020      	movs	r0, #32
     6b2:	47c0      	blx	r8
     6b4:	3c01      	subs	r4, #1
     6b6:	e7e8      	b.n	68a <_printk_dec_ulong+0x6a>
     6b8:	3b9ac9ff 	.word	0x3b9ac9ff

000006bc <__printk_hook_install>:
	_char_out = fn;
     6bc:	4b01      	ldr	r3, [pc, #4]	; (6c4 <__printk_hook_install+0x8>)
     6be:	6018      	str	r0, [r3, #0]
}
     6c0:	4770      	bx	lr
     6c2:	bf00      	nop
     6c4:	20000ea8 	.word	0x20000ea8

000006c8 <vprintk>:
	struct out_context ctx = { 0 };
     6c8:	2300      	movs	r3, #0
{
     6ca:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
     6cc:	ac02      	add	r4, sp, #8
     6ce:	f844 3d04 	str.w	r3, [r4, #-4]!
	z_vprintk(char_out, &ctx, fmt, ap);
     6d2:	4602      	mov	r2, r0
     6d4:	460b      	mov	r3, r1
     6d6:	4803      	ldr	r0, [pc, #12]	; (6e4 <vprintk+0x1c>)
     6d8:	4621      	mov	r1, r4
     6da:	f002 f970 	bl	29be <z_vprintk>
}
     6de:	b002      	add	sp, #8
     6e0:	bd10      	pop	{r4, pc}
     6e2:	bf00      	nop
     6e4:	00000611 	.word	0x00000611

000006e8 <nordicsemi_nrf91_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf91_init(struct device *arg)
{
     6e8:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     6ea:	f04f 0320 	mov.w	r3, #32
     6ee:	f3ef 8411 	mrs	r4, BASEPRI
     6f2:	f383 8811 	msr	BASEPRI, r3
     6f6:	f3bf 8f6f 	isb	sy

	ARG_UNUSED(arg);

	key = irq_lock();

	SystemInit();
     6fa:	f000 f813 	bl	724 <SystemInit>

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     6fe:	2201      	movs	r2, #1
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <nordicsemi_nrf91_init+0x34>)
     702:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
static ALWAYS_INLINE void z_clearfaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     706:	f04f 32ff 	mov.w	r2, #4294967295
     70a:	4b05      	ldr	r3, [pc, #20]	; (720 <nordicsemi_nrf91_init+0x38>)
     70c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     70e:	62da      	str	r2, [r3, #44]	; 0x2c
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     710:	f384 8811 	msr	BASEPRI, r4
     714:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     718:	2000      	movs	r0, #0
     71a:	bd10      	pop	{r4, pc}
     71c:	50039000 	.word	0x50039000
     720:	e000ed00 	.word	0xe000ed00

00000724 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
     724:	4a52      	ldr	r2, [pc, #328]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     726:	6813      	ldr	r3, [r2, #0]
     728:	f043 0302 	orr.w	r3, r3, #2
     72c:	6013      	str	r3, [r2, #0]
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim 
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
     72e:	2200      	movs	r2, #0
     730:	00d3      	lsls	r3, r2, #3
     732:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
     736:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
     73a:	3101      	adds	r1, #1
     73c:	d008      	beq.n	750 <SystemInit+0x2c>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
     73e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
     742:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
     744:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
     748:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
     74c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
     74e:	d1ef      	bne.n	730 <SystemInit+0xc>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
     750:	4a48      	ldr	r2, [pc, #288]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     752:	69d3      	ldr	r3, [r2, #28]
     754:	f013 0301 	ands.w	r3, r3, #1
     758:	d03b      	beq.n	7d2 <CONFIG_GPS_SIM_FIX_TIME+0x2>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     75a:	4b47      	ldr	r3, [pc, #284]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     75c:	4619      	mov	r1, r3
     75e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     762:	2a01      	cmp	r2, #1
     764:	d1fb      	bne.n	75e <SystemInit+0x3a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
     766:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     76a:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
     76e:	2b01      	cmp	r3, #1
     770:	d1fb      	bne.n	76a <SystemInit+0x46>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
     772:	4b40      	ldr	r3, [pc, #256]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     774:	69da      	ldr	r2, [r3, #28]
     776:	07d2      	lsls	r2, r2, #31
     778:	d508      	bpl.n	78c <SystemInit+0x68>
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
     77a:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     77c:	493e      	ldr	r1, [pc, #248]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
            NRF_UICR_S->HFXOSRC = (NRF_UICR_S->HFXOSRC & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
     77e:	f022 0201 	bic.w	r2, r2, #1
     782:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     784:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
     788:	2a01      	cmp	r2, #1
     78a:	d1fb      	bne.n	784 <SystemInit+0x60>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
     78c:	6a1a      	ldr	r2, [r3, #32]
     78e:	3201      	adds	r2, #1
     790:	d10a      	bne.n	7a8 <SystemInit+0x84>
            NRF_UICR_S->HFXOCNT = (NRF_UICR_S->HFXOCNT & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
     792:	6a1a      	ldr	r2, [r3, #32]
     794:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
     798:	f042 0220 	orr.w	r2, r2, #32
     79c:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     79e:	4a36      	ldr	r2, [pc, #216]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7a0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     7a4:	2b01      	cmp	r3, #1
     7a6:	d1fb      	bne.n	7a0 <SystemInit+0x7c>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
     7a8:	2200      	movs	r2, #0
     7aa:	4b33      	ldr	r3, [pc, #204]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
     7b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7b4:	2a01      	cmp	r2, #1
     7b6:	d1fb      	bne.n	7b0 <SystemInit+0x8c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     7b8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     7bc:	492f      	ldr	r1, [pc, #188]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7be:	4b30      	ldr	r3, [pc, #192]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7c0:	68ca      	ldr	r2, [r1, #12]
     7c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     7c6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     7c8:	60cb      	str	r3, [r1, #12]
     7ca:	f3bf 8f4f 	dsb	sy
    __NOP();
     7ce:	bf00      	nop
     7d0:	e7fd      	b.n	7ce <SystemInit+0xaa>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
     7d2:	6a12      	ldr	r2, [r2, #32]
     7d4:	3201      	adds	r2, #1
     7d6:	d0c0      	beq.n	75a <SystemInit+0x36>
    }
    

    bool errata_6()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
     7d8:	4a2a      	ldr	r2, [pc, #168]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7da:	6811      	ldr	r1, [r2, #0]
     7dc:	2909      	cmp	r1, #9
     7de:	d10a      	bne.n	7f6 <CONFIG_GPS_SIM_FIX_TIME+0x26>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
     7e0:	4929      	ldr	r1, [pc, #164]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     7e2:	6809      	ldr	r1, [r1, #0]
     7e4:	3901      	subs	r1, #1
     7e6:	2901      	cmp	r1, #1
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
     7e8:	bf9e      	ittt	ls
     7ea:	f04f 2150 	movls.w	r1, #1342197760	; 0x50005000
     7ee:	f8c1 3114 	strls.w	r3, [r1, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
     7f2:	f8c1 3118 	strls.w	r3, [r1, #280]	; 0x118
    }

    
    bool errata_14()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
     7f6:	6813      	ldr	r3, [r2, #0]
     7f8:	2b09      	cmp	r3, #9
     7fa:	d109      	bne.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
            if (*(uint32_t *)0x00FF0134 == 0x01ul){
     7fc:	4b22      	ldr	r3, [pc, #136]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     7fe:	681b      	ldr	r3, [r3, #0]
     800:	2b01      	cmp	r3, #1
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
     802:	bf01      	itttt	eq
     804:	4a21      	ldreq	r2, [pc, #132]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     806:	6013      	streq	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
     808:	f6a2 2238 	subweq	r2, r2, #2616	; 0xa38
     80c:	f8c2 3578 	streq.w	r3, [r2, #1400]	; 0x578
    }


    bool errata_15()
    {
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
     810:	4b1c      	ldr	r3, [pc, #112]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     812:	681a      	ldr	r2, [r3, #0]
     814:	2a09      	cmp	r2, #9
     816:	d10b      	bne.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
     818:	4a1b      	ldr	r2, [pc, #108]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     81a:	6812      	ldr	r2, [r2, #0]
     81c:	2a02      	cmp	r2, #2
     81e:	d107      	bne.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
            *((volatile uint32_t *)0x50004A38) = 0x00ul;
     820:	2100      	movs	r1, #0
     822:	4a1a      	ldr	r2, [pc, #104]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     824:	6011      	str	r1, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
     826:	2101      	movs	r1, #1
     828:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
     82c:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
        if (*(uint32_t *)0x00FF0130 == 0x9ul){
     830:	681b      	ldr	r3, [r3, #0]
     832:	2b09      	cmp	r3, #9
     834:	d106      	bne.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
            if (*(uint32_t *)0x00FF0134 == 0x02ul){
     836:	4b14      	ldr	r3, [pc, #80]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     838:	681b      	ldr	r3, [r3, #0]
     83a:	2b02      	cmp	r3, #2
            *((volatile uint32_t *)0x5003AEE4) = 0xC;
     83c:	bf02      	ittt	eq
     83e:	220c      	moveq	r2, #12
     840:	4b13      	ldreq	r3, [pc, #76]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     842:	601a      	streq	r2, [r3, #0]
        SCB->NSACR |= (3UL << 10);
     844:	4b0d      	ldr	r3, [pc, #52]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     846:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
     84a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
     84e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
     852:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     856:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     85e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     862:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
     866:	4b0b      	ldr	r3, [pc, #44]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     868:	4a0b      	ldr	r2, [pc, #44]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
     86a:	601a      	str	r2, [r3, #0]
}
     86c:	4770      	bx	lr
     86e:	bf00      	nop
     870:	e000edd0 	.word	0xe000edd0
     874:	00ff8000 	.word	0x00ff8000
     878:	50039000 	.word	0x50039000
     87c:	e000ed00 	.word	0xe000ed00
     880:	05fa0004 	.word	0x05fa0004
     884:	00ff0130 	.word	0x00ff0130
     888:	00ff0134 	.word	0x00ff0134
     88c:	50004a38 	.word	0x50004a38
     890:	5003aee4 	.word	0x5003aee4
     894:	20000eac 	.word	0x20000eac
     898:	03d09000 	.word	0x03d09000

0000089c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     89c:	280a      	cmp	r0, #10
{
     89e:	b538      	push	{r3, r4, r5, lr}
     8a0:	4604      	mov	r4, r0
     8a2:	4d07      	ldr	r5, [pc, #28]	; (8c0 <console_out+0x24>)
	if ('\n' == c) {
     8a4:	d104      	bne.n	8b0 <console_out+0x14>
     8a6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     8a8:	210d      	movs	r1, #13
     8aa:	6843      	ldr	r3, [r0, #4]
     8ac:	685b      	ldr	r3, [r3, #4]
     8ae:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
     8b0:	6828      	ldr	r0, [r5, #0]
     8b2:	b2e1      	uxtb	r1, r4
     8b4:	6843      	ldr	r3, [r0, #4]
     8b6:	685b      	ldr	r3, [r3, #4]
     8b8:	4798      	blx	r3

	return c;
}
     8ba:	4620      	mov	r0, r4
     8bc:	bd38      	pop	{r3, r4, r5, pc}
     8be:	bf00      	nop
     8c0:	20000008 	.word	0x20000008

000008c4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     8c4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
     8c6:	4c04      	ldr	r4, [pc, #16]	; (8d8 <uart_console_hook_install+0x14>)
     8c8:	4620      	mov	r0, r4
     8ca:	f001 f893 	bl	19f4 <__stdout_hook_install>
	__printk_hook_install(console_out);
     8ce:	4620      	mov	r0, r4
}
     8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
     8d4:	f7ff bef2 	b.w	6bc <__printk_hook_install>
     8d8:	0000089d 	.word	0x0000089d

000008dc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     8dc:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

K_SYSCALL_DECLARE1(K_SYSCALL_DEVICE_GET_BINDING, device_get_binding, struct device *, const char *, name)
     8de:	4804      	ldr	r0, [pc, #16]	; (8f0 <uart_console_init+0x14>)
     8e0:	f001 fb78 	bl	1fd4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     8e4:	4b03      	ldr	r3, [pc, #12]	; (8f4 <uart_console_init+0x18>)
     8e6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     8e8:	f7ff ffec 	bl	8c4 <uart_console_hook_install>

	return 0;
}
     8ec:	2000      	movs	r0, #0
     8ee:	bd08      	pop	{r3, pc}
     8f0:	000036af 	.word	0x000036af
     8f4:	20000008 	.word	0x20000008

000008f8 <m16src_stop>:
		return -EINPROGRESS;
	}
}

static int m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
     8f8:	b510      	push	{r4, lr}
	__asm__ volatile(
     8fa:	f04f 0320 	mov.w	r3, #32
     8fe:	f3ef 8211 	mrs	r2, BASEPRI
     902:	f383 8811 	msr	BASEPRI, r3
     906:	f3bf 8f6f 	isb	sy
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
     90a:	4c15      	ldr	r4, [pc, #84]	; (960 <m16src_stop+0x68>)
     90c:	7823      	ldrb	r3, [r4, #0]
     90e:	b933      	cbnz	r3, 91e <m16src_stop+0x26>
	__asm__ volatile(
     910:	f382 8811 	msr	BASEPRI, r2
     914:	f3bf 8f6f 	isb	sy
		irq_unlock(imask);
		return -EALREADY;
     918:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0U;

	return 0;
}
     91c:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
     91e:	3b01      	subs	r3, #1
     920:	b2db      	uxtb	r3, r3
     922:	7023      	strb	r3, [r4, #0]
     924:	b133      	cbz	r3, 934 <m16src_stop+0x3c>
     926:	f382 8811 	msr	BASEPRI, r2
     92a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
     92e:	f06f 000f 	mvn.w	r0, #15
     932:	e7f3      	b.n	91c <m16src_stop+0x24>
	if (m16src_grd) {
     934:	4b0b      	ldr	r3, [pc, #44]	; (964 <m16src_stop+0x6c>)
     936:	2101      	movs	r1, #1
     938:	7818      	ldrb	r0, [r3, #0]
     93a:	b138      	cbz	r0, 94c <m16src_stop+0x54>
		m16src_ref++;
     93c:	7021      	strb	r1, [r4, #0]
     93e:	f382 8811 	msr	BASEPRI, r2
     942:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
     946:	f06f 000a 	mvn.w	r0, #10
     94a:	e7e7      	b.n	91c <m16src_stop+0x24>
	m16src_grd = 1U;
     94c:	7019      	strb	r1, [r3, #0]
     94e:	f382 8811 	msr	BASEPRI, r2
     952:	f3bf 8f6f 	isb	sy
    return ((uint32_t )NRF_CLOCK + task);
}

__STATIC_INLINE void nrf_clock_task_trigger(nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
     956:	4a04      	ldr	r2, [pc, #16]	; (968 <m16src_stop+0x70>)
     958:	6011      	str	r1, [r2, #0]
	m16src_grd = 0U;
     95a:	7018      	strb	r0, [r3, #0]
	return 0;
     95c:	e7de      	b.n	91c <m16src_stop+0x24>
     95e:	bf00      	nop
     960:	2000015e 	.word	0x2000015e
     964:	2000015d 	.word	0x2000015d
     968:	50005004 	.word	0x50005004

0000096c <k32src_start>:

static int k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     96c:	b510      	push	{r4, lr}
	__asm__ volatile(
     96e:	f04f 0220 	mov.w	r2, #32
     972:	f3ef 8311 	mrs	r3, BASEPRI
     976:	f382 8811 	msr	BASEPRI, r2
     97a:	f3bf 8f6f 	isb	sy
	 * initialized flag.
	 */

	imask = irq_lock();

	if (k32src_initialized) {
     97e:	4c14      	ldr	r4, [pc, #80]	; (9d0 <k32src_start+0x64>)
     980:	7820      	ldrb	r0, [r4, #0]
     982:	b198      	cbz	r0, 9ac <k32src_start+0x40>
	__asm__ volatile(
     984:	f383 8811 	msr	BASEPRI, r3
     988:	f3bf 8f6f 	isb	sy
		}
	}
#endif /* NRF_CLOCK_HAS_CALIBRATION */

lf_already_started:
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
     98c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     990:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
	       CLOCK_LFCLKSTAT_STATE_Msk;
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
     994:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
	stat = (NRF_CLOCK->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk) |
     998:	f003 0303 	and.w	r3, r3, #3
     99c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	if ((NRF_CLOCK->LFCLKSTAT & stat) == stat) {
     9a0:	4393      	bics	r3, r2
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
     9a2:	bf14      	ite	ne
     9a4:	f06f 0043 	mvnne.w	r0, #67	; 0x43
     9a8:	2000      	moveq	r0, #0
     9aa:	bd10      	pop	{r4, pc}
	k32src_initialized = 1U;
     9ac:	2201      	movs	r2, #1
     9ae:	7022      	strb	r2, [r4, #0]
     9b0:	f383 8811 	msr	BASEPRI, r3
     9b4:	f3bf 8f6f 	isb	sy
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     9b8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     9bc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
     9c0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
     9c4:	2102      	movs	r1, #2
     9c6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
     9ca:	609a      	str	r2, [r3, #8]
     9cc:	e7de      	b.n	98c <k32src_start+0x20>
     9ce:	bf00      	nop
     9d0:	2000015c 	.word	0x2000015c

000009d4 <m16src_start>:
{
     9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
     9d6:	f04f 0220 	mov.w	r2, #32
     9da:	f3ef 8311 	mrs	r3, BASEPRI
     9de:	f382 8811 	msr	BASEPRI, r2
     9e2:	f3bf 8f6f 	isb	sy
	if (m16src_ref++) {
     9e6:	4a29      	ldr	r2, [pc, #164]	; (a8c <m16src_start+0xb8>)
     9e8:	7810      	ldrb	r0, [r2, #0]
     9ea:	1c44      	adds	r4, r0, #1
     9ec:	7014      	strb	r4, [r2, #0]
     9ee:	b180      	cbz	r0, a12 <m16src_start+0x3e>
	__asm__ volatile(
     9f0:	f383 8811 	msr	BASEPRI, r3
     9f4:	f3bf 8f6f 	isb	sy
	if ((NRF_CLOCK->HFCLKSTAT & stat) == stat) {
     9f8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     9fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
     a00:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
		return -EINPROGRESS;
     a04:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     a08:	bf0c      	ite	eq
     a0a:	2000      	moveq	r0, #0
     a0c:	f06f 0043 	mvnne.w	r0, #67	; 0x43
     a10:	e009      	b.n	a26 <m16src_start+0x52>
	if (m16src_grd) {
     a12:	4d1f      	ldr	r5, [pc, #124]	; (a90 <m16src_start+0xbc>)
     a14:	782f      	ldrb	r7, [r5, #0]
     a16:	b13f      	cbz	r7, a28 <m16src_start+0x54>
		m16src_ref--;
     a18:	7010      	strb	r0, [r2, #0]
     a1a:	f383 8811 	msr	BASEPRI, r3
     a1e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
     a22:	f06f 000a 	mvn.w	r0, #10
}
     a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1U;
     a28:	2601      	movs	r6, #1
     a2a:	702e      	strb	r6, [r5, #0]
     a2c:	f383 8811 	msr	BASEPRI, r3
     a30:	f3bf 8f6f 	isb	sy
     a34:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
	if (blocking) {
     a38:	b321      	cbz	r1, a84 <m16src_start+0xb0>
		irq_disable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
     a3a:	2005      	movs	r0, #5
     a3c:	f000 fcfe 	bl	143c <z_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     a40:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
     a44:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    NRF_CLOCK->INTENSET = int_mask;
     a48:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
     a4c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
     a4e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
     a52:	b19a      	cbz	r2, a7c <m16src_start+0xa8>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     a54:	2200      	movs	r2, #0
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
     a56:	07db      	lsls	r3, r3, #31
    NRF_CLOCK->INTENCLR = int_mask;
     a58:	bf58      	it	pl
     a5a:	2301      	movpl	r3, #1
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     a5c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a60:	f04f 0220 	mov.w	r2, #32
     a64:	bf58      	it	pl
     a66:	f8c4 3308 	strpl.w	r3, [r4, #776]	; 0x308
     a6a:	4b0a      	ldr	r3, [pc, #40]	; (a94 <m16src_start+0xc0>)
		irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
     a6c:	2005      	movs	r0, #5
     a6e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     a72:	f000 fcd3 	bl	141c <z_arch_irq_enable>
	m16src_grd = 0U;
     a76:	2300      	movs	r3, #0
     a78:	702b      	strb	r3, [r5, #0]
     a7a:	e7bd      	b.n	9f8 <m16src_start+0x24>
			__WFE();
     a7c:	bf20      	wfe
			__SEV();
     a7e:	bf40      	sev
			__WFE();
     a80:	bf20      	wfe
     a82:	e7e4      	b.n	a4e <m16src_start+0x7a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     a84:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
     a88:	6026      	str	r6, [r4, #0]
     a8a:	e7f4      	b.n	a76 <m16src_start+0xa2>
     a8c:	2000015e 	.word	0x2000015e
     a90:	2000015d 	.word	0x2000015d
     a94:	e000e100 	.word	0xe000e100

00000a98 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
     a98:	2200      	movs	r2, #0
     a9a:	4b11      	ldr	r3, [pc, #68]	; (ae0 <rtc1_nrf_isr+0x48>)
{
     a9c:	b410      	push	{r4}
	RTC->EVENTS_COMPARE[0] = 0;
     a9e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
     aa2:	f04f 0220 	mov.w	r2, #32
     aa6:	f3ef 8411 	mrs	r4, BASEPRI
     aaa:	f382 8811 	msr	BASEPRI, r2
     aae:	f3bf 8f6f 	isb	sy
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
     ab2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     ab6:	f240 1347 	movw	r3, #327	; 0x147
     aba:	4a0a      	ldr	r2, [pc, #40]	; (ae4 <rtc1_nrf_isr+0x4c>)
     abc:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
     abe:	1a40      	subs	r0, r0, r1
     ac0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     ac4:	fbb0 f0f3 	udiv	r0, r0, r3

	last_count += dticks * CYC_PER_TICK;
     ac8:	fb03 1300 	mla	r3, r3, r0, r1
     acc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
     ace:	f384 8811 	msr	BASEPRI, r4
     ad2:	f3bf 8f6f 	isb	sy
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
     ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     ada:	f001 be6d 	b.w	27b8 <z_clock_announce>
     ade:	bf00      	nop
     ae0:	50015000 	.word	0x50015000
     ae4:	2000000c 	.word	0x2000000c

00000ae8 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
     ae8:	b538      	push	{r3, r4, r5, lr}
     aea:	481b      	ldr	r0, [pc, #108]	; (b58 <z_clock_driver_init+0x70>)
     aec:	f001 fa72 	bl	1fd4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_NORDIC_NRF_CLOCK_0_LABEL "_32K");
	if (!clock) {
     af0:	b370      	cbz	r0, b50 <z_clock_driver_init+0x68>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
     af2:	6843      	ldr	r3, [r0, #4]
     af4:	2102      	movs	r1, #2
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	4798      	blx	r3
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     afa:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
     afc:	f240 1347 	movw	r3, #327	; 0x147
    p_reg->PRESCALER = val;
     b00:	4d16      	ldr	r5, [pc, #88]	; (b5c <z_clock_driver_init+0x74>)
     b02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     b06:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
     b0a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

__STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     b0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     b12:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
    p_reg->INTENSET = mask;
     b16:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     b1a:	4b11      	ldr	r3, [pc, #68]	; (b60 <z_clock_driver_init+0x78>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     b1c:	2101      	movs	r1, #1
     b1e:	601c      	str	r4, [r3, #0]
     b20:	4b10      	ldr	r3, [pc, #64]	; (b64 <z_clock_driver_init+0x7c>)
     b22:	2015      	movs	r0, #21
     b24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     b28:	4622      	mov	r2, r4
     b2a:	f000 fc9b 	bl	1464 <z_irq_priority_set>
	irq_enable(RTC1_IRQn);
     b2e:	2015      	movs	r0, #21
     b30:	f000 fc74 	bl	141c <z_arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     b34:	2301      	movs	r3, #1

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     b36:	4620      	mov	r0, r4
     b38:	4a0b      	ldr	r2, [pc, #44]	; (b68 <z_clock_driver_init+0x80>)
     b3a:	6013      	str	r3, [r2, #0]
     b3c:	602b      	str	r3, [r5, #0]
     return p_reg->COUNTER;
     b3e:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
     b42:	f203 1347 	addw	r3, r3, #327	; 0x147
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     b46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     b4a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
     b4e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
     b50:	f04f 30ff 	mov.w	r0, #4294967295
     b54:	e7fb      	b.n	b4e <z_clock_driver_init+0x66>
     b56:	bf00      	nop
     b58:	000036b6 	.word	0x000036b6
     b5c:	50015000 	.word	0x50015000
     b60:	50015140 	.word	0x50015140
     b64:	e000e100 	.word	0xe000e100
     b68:	50015008 	.word	0x50015008

00000b6c <z_clock_set_timeout>:
void z_clock_set_timeout(s32_t ticks, bool idle)
{
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     b6c:	f64c 0269 	movw	r2, #51305	; 0xc869
{
     b70:	b570      	push	{r4, r5, r6, lr}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
     b72:	f1b0 3fff 	cmp.w	r0, #4294967295
     b76:	bf08      	it	eq
     b78:	4610      	moveq	r0, r2
	__asm__ volatile(
     b7a:	f04f 0320 	mov.w	r3, #32
     b7e:	f3ef 8411 	mrs	r4, BASEPRI
     b82:	f383 8811 	msr	BASEPRI, r3
     b86:	f3bf 8f6f 	isb	sy
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     b8a:	3801      	subs	r0, #1
     b8c:	4290      	cmp	r0, r2

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, t = counter();

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
     b8e:	4d12      	ldr	r5, [pc, #72]	; (bd8 <z_clock_set_timeout+0x6c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     b90:	bfa8      	it	ge
     b92:	4610      	movge	r0, r2
	cyc = ticks * CYC_PER_TICK + counter_sub(t, last_count);
     b94:	682e      	ldr	r6, [r5, #0]
     b96:	f240 1547 	movw	r5, #327	; 0x147
     return p_reg->COUNTER;
     b9a:	4910      	ldr	r1, [pc, #64]	; (bdc <z_clock_set_timeout+0x70>)
     b9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     ba0:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     ba4:	1b9a      	subs	r2, r3, r6
     ba6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
     baa:	f502 72a3 	add.w	r2, r2, #326	; 0x146
     bae:	fb05 2000 	mla	r0, r5, r0, r2
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
     bb2:	fbb0 f0f5 	udiv	r0, r0, r5
	cyc += last_count;
     bb6:	fb05 6000 	mla	r0, r5, r0, r6
	return (a - b) & COUNTER_MAX;
     bba:	1ac3      	subs	r3, r0, r3
     bbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	if (counter_sub(cyc, t) < MIN_DELAY) {
     bc0:	2b1f      	cmp	r3, #31
		cyc += CYC_PER_TICK;
     bc2:	bf98      	it	ls
     bc4:	1940      	addls	r0, r0, r5
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     bc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     bca:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
	__asm__ volatile(
     bce:	f384 8811 	msr	BASEPRI, r4
     bd2:	f3bf 8f6f 	isb	sy
	}

	set_comparator(cyc);
	k_spin_unlock(&lock, key);
#endif
}
     bd6:	bd70      	pop	{r4, r5, r6, pc}
     bd8:	2000000c 	.word	0x2000000c
     bdc:	50015000 	.word	0x50015000

00000be0 <z_clock_elapsed>:
	__asm__ volatile(
     be0:	f04f 0220 	mov.w	r2, #32
     be4:	f3ef 8311 	mrs	r3, BASEPRI
     be8:	f382 8811 	msr	BASEPRI, r2
     bec:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     bf0:	4a08      	ldr	r2, [pc, #32]	; (c14 <z_clock_elapsed+0x34>)
     bf2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     bf6:	4a08      	ldr	r2, [pc, #32]	; (c18 <z_clock_elapsed+0x38>)
	return (a - b) & COUNTER_MAX;
     bf8:	6812      	ldr	r2, [r2, #0]
     bfa:	1a80      	subs	r0, r0, r2
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     bfc:	f240 1247 	movw	r2, #327	; 0x147
	return (a - b) & COUNTER_MAX;
     c00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     c04:	fbb0 f0f2 	udiv	r0, r0, r2
	__asm__ volatile(
     c08:	f383 8811 	msr	BASEPRI, r3
     c0c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     c10:	4770      	bx	lr
     c12:	bf00      	nop
     c14:	50015000 	.word	0x50015000
     c18:	2000000c 	.word	0x2000000c

00000c1c <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     c1c:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     c1e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c20:	2b00      	cmp	r3, #0
     c22:	db0c      	blt.n	c3e <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c24:	2201      	movs	r2, #1
     c26:	f000 011f 	and.w	r1, r0, #31
     c2a:	408a      	lsls	r2, r1
     c2c:	095b      	lsrs	r3, r3, #5
     c2e:	4910      	ldr	r1, [pc, #64]	; (c70 <spm_config_peripheral.constprop.1+0x54>)
     c30:	3320      	adds	r3, #32
     c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
     c36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c3a:	f3bf 8f6f 	isb	sy
     c3e:	0083      	lsls	r3, r0, #2
     c40:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     c44:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     c48:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     c4a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     c4e:	d006      	beq.n	c5e <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
     c50:	2a00      	cmp	r2, #0
     c52:	da07      	bge.n	c64 <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     c54:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     c58:	3a02      	subs	r2, #2

	if (usel_or_split(id)) {
     c5a:	2a01      	cmp	r2, #1
     c5c:	d802      	bhi.n	c64 <spm_config_peripheral.constprop.1+0x48>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     c5e:	4a05      	ldr	r2, [pc, #20]	; (c74 <spm_config_peripheral.constprop.1+0x58>)
     c60:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     c64:	2100      	movs	r1, #0
     c66:	f002 f85a 	bl	2d1e <irq_target_state_set>
	return 0;
}
     c6a:	2000      	movs	r0, #0
     c6c:	bd08      	pop	{r3, pc}
     c6e:	bf00      	nop
     c70:	e000e100 	.word	0xe000e100
     c74:	80000100 	.word	0x80000100

00000c78 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     c78:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     c7a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     c7e:	f248 0504 	movw	r5, #32772	; 0x8004
{
     c82:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     c88:	482c      	ldr	r0, [pc, #176]	; (d3c <spm_jump+0xc4>)
     c8a:	f001 fff4 	bl	2c76 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     c8e:	6821      	ldr	r1, [r4, #0]
     c90:	482b      	ldr	r0, [pc, #172]	; (d40 <spm_jump+0xc8>)
     c92:	f001 fff0 	bl	2c76 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     c96:	6829      	ldr	r1, [r5, #0]
     c98:	482a      	ldr	r0, [pc, #168]	; (d44 <spm_jump+0xcc>)
     c9a:	f001 ffec 	bl	2c76 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     c9e:	2210      	movs	r2, #16
     ca0:	2100      	movs	r1, #0
     ca2:	4668      	mov	r0, sp
     ca4:	f002 f8b5 	bl	2e12 <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     ca8:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     caa:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     cac:	9300      	str	r3, [sp, #0]
     cae:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     cb0:	f7ff fc38 	bl	524 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     cb4:	2001      	movs	r0, #1
     cb6:	f7ff fc65 	bl	584 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     cba:	2000      	movs	r0, #0
     cbc:	f7ff fc4e 	bl	55c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(0);
     cc0:	2000      	movs	r0, #0
     cc2:	f7ff fc73 	bl	5ac <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     cc6:	2101      	movs	r1, #1
     cc8:	2000      	movs	r0, #0
     cca:	f7ff fc8d 	bl	5e8 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     cce:	f7ff fc81 	bl	5d4 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     cd2:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     cd4:	481c      	ldr	r0, [pc, #112]	; (d48 <spm_jump+0xd0>)
     cd6:	f001 ffce 	bl	2c76 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     cda:	2008      	movs	r0, #8
     cdc:	f7ff ff9e 	bl	c1c <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     ce0:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     ce4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ce8:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     cec:	0864      	lsrs	r4, r4, #1
     cee:	0064      	lsls	r4, r4, #1
     cf0:	4620      	mov	r0, r4
     cf2:	4621      	mov	r1, r4
     cf4:	4622      	mov	r2, r4
     cf6:	4623      	mov	r3, r4
     cf8:	ed9f 0a14 	vldr	s0, [pc, #80]	; d4c <spm_jump+0xd4>
     cfc:	eddf 0a13 	vldr	s1, [pc, #76]	; d4c <spm_jump+0xd4>
     d00:	ed9f 1a12 	vldr	s2, [pc, #72]	; d4c <spm_jump+0xd4>
     d04:	eddf 1a11 	vldr	s3, [pc, #68]	; d4c <spm_jump+0xd4>
     d08:	ed9f 2a10 	vldr	s4, [pc, #64]	; d4c <spm_jump+0xd4>
     d0c:	eddf 2a0f 	vldr	s5, [pc, #60]	; d4c <spm_jump+0xd4>
     d10:	ed9f 3a0e 	vldr	s6, [pc, #56]	; d4c <spm_jump+0xd4>
     d14:	eddf 3a0d 	vldr	s7, [pc, #52]	; d4c <spm_jump+0xd4>
     d18:	ed9f 4a0c 	vldr	s8, [pc, #48]	; d4c <spm_jump+0xd4>
     d1c:	eddf 4a0b 	vldr	s9, [pc, #44]	; d4c <spm_jump+0xd4>
     d20:	ed9f 5a0a 	vldr	s10, [pc, #40]	; d4c <spm_jump+0xd4>
     d24:	eddf 5a09 	vldr	s11, [pc, #36]	; d4c <spm_jump+0xd4>
     d28:	ed9f 6a08 	vldr	s12, [pc, #32]	; d4c <spm_jump+0xd4>
     d2c:	eddf 6a07 	vldr	s13, [pc, #28]	; d4c <spm_jump+0xd4>
     d30:	ed9f 7a06 	vldr	s14, [pc, #24]	; d4c <spm_jump+0xd4>
     d34:	eddf 7a05 	vldr	s15, [pc, #20]	; d4c <spm_jump+0xd4>
     d38:	f7ff fbc6 	bl	4c8 <__gnu_cmse_nonsecure_call>
     d3c:	000037a1 	.word	0x000037a1
     d40:	000037b8 	.word	0x000037b8
     d44:	000037cd 	.word	0x000037cd
     d48:	000037eb 	.word	0x000037eb
     d4c:	00000000 	.word	0x00000000

00000d50 <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash region\t\tDomain\t\tPermissions\n");
     d54:	485d      	ldr	r0, [pc, #372]	; (ecc <spm_config+0x17c>)
     d56:	f001 ff8e 	bl	2c76 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     d5a:	2100      	movs	r1, #0
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     d5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; f0c <spm_config+0x1bc>
     d60:	4f5b      	ldr	r7, [pc, #364]	; (ed0 <spm_config+0x180>)
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     d62:	4d5c      	ldr	r5, [pc, #368]	; (ed4 <spm_config+0x184>)
		NRF_SPU->FLASHREGION[i].PERM = flash_perm[i];
     d64:	f858 4021 	ldr.w	r4, [r8, r1, lsl #2]
     d68:	03ca      	lsls	r2, r1, #15
     d6a:	f501 73c0 	add.w	r3, r1, #384	; 0x180
     d6e:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x \t", i, 32 * KB(i), 32 * KB(i + 1));
     d72:	4859      	ldr	r0, [pc, #356]	; (ed8 <spm_config+0x188>)
     d74:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
     d78:	1c4e      	adds	r6, r1, #1
     d7a:	f001 ff7c 	bl	2c76 <printk>
		PRINT("%s", flash_perm[i] & FLASH_SECURE ? "Secure\t\t" :
     d7e:	4b57      	ldr	r3, [pc, #348]	; (edc <spm_config+0x18c>)
     d80:	f014 0f10 	tst.w	r4, #16
     d84:	4956      	ldr	r1, [pc, #344]	; (ee0 <spm_config+0x190>)
     d86:	4857      	ldr	r0, [pc, #348]	; (ee4 <spm_config+0x194>)
     d88:	bf08      	it	eq
     d8a:	4619      	moveq	r1, r3
     d8c:	f001 ff73 	bl	2c76 <printk>
		PRINT("%c", flash_perm[i] & FLASH_READ  ? 'r' : '-');
     d90:	f014 0f04 	tst.w	r4, #4
     d94:	bf14      	ite	ne
     d96:	2172      	movne	r1, #114	; 0x72
     d98:	212d      	moveq	r1, #45	; 0x2d
     d9a:	4628      	mov	r0, r5
     d9c:	f001 ff6b 	bl	2c76 <printk>
		PRINT("%c", flash_perm[i] & FLASH_WRITE ? 'w' : '-');
     da0:	f014 0f02 	tst.w	r4, #2
     da4:	bf14      	ite	ne
     da6:	2177      	movne	r1, #119	; 0x77
     da8:	212d      	moveq	r1, #45	; 0x2d
     daa:	4628      	mov	r0, r5
     dac:	f001 ff63 	bl	2c76 <printk>
		PRINT("%c", flash_perm[i] & FLASH_EXEC  ? 'x' : '-');
     db0:	f014 0f01 	tst.w	r4, #1
     db4:	bf14      	ite	ne
     db6:	2178      	movne	r1, #120	; 0x78
     db8:	212d      	moveq	r1, #45	; 0x2d
     dba:	4628      	mov	r0, r5
     dbc:	f001 ff5b 	bl	2c76 <printk>
		PRINT("%c", flash_perm[i] & FLASH_LOCK  ? 'l' : '-');
     dc0:	f414 7f80 	tst.w	r4, #256	; 0x100
     dc4:	bf14      	ite	ne
     dc6:	216c      	movne	r1, #108	; 0x6c
     dc8:	212d      	moveq	r1, #45	; 0x2d
     dca:	4628      	mov	r0, r5
     dcc:	f001 ff53 	bl	2c76 <printk>
		PRINT("\n");
     dd0:	4845      	ldr	r0, [pc, #276]	; (ee8 <spm_config+0x198>)
     dd2:	f001 ff50 	bl	2c76 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(flash_perm); i++) {
     dd6:	2e20      	cmp	r6, #32
     dd8:	4631      	mov	r1, r6
     dda:	d1c3      	bne.n	d64 <spm_config+0x14>
	PRINT("\n");
     ddc:	4842      	ldr	r0, [pc, #264]	; (ee8 <spm_config+0x198>)
     dde:	f001 ff4a 	bl	2c76 <printk>
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     de2:	4842      	ldr	r0, [pc, #264]	; (eec <spm_config+0x19c>)
     de4:	f001 ff47 	bl	2c76 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     de8:	2100      	movs	r1, #0
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     dea:	f8df 8124 	ldr.w	r8, [pc, #292]	; f10 <spm_config+0x1c0>
     dee:	4f38      	ldr	r7, [pc, #224]	; (ed0 <spm_config+0x180>)
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     df0:	4d38      	ldr	r5, [pc, #224]	; (ed4 <spm_config+0x184>)
		NRF_SPU->RAMREGION[i].PERM = sram_perm[i];
     df2:	f858 4021 	ldr.w	r4, [r8, r1, lsl #2]
     df6:	034a      	lsls	r2, r1, #13
     df8:	f501 73e0 	add.w	r3, r1, #448	; 0x1c0
     dfc:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		PRINT("%02u 0x%05x 0x%05x\t", i, 8 * KB(i), 8 * KB(i + 1));
     e00:	483b      	ldr	r0, [pc, #236]	; (ef0 <spm_config+0x1a0>)
     e02:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
     e06:	1c4e      	adds	r6, r1, #1
     e08:	f001 ff35 	bl	2c76 <printk>
		PRINT("%s", sram_perm[i] & SRAM_SECURE ? "Secure\t\t" :
     e0c:	4b33      	ldr	r3, [pc, #204]	; (edc <spm_config+0x18c>)
     e0e:	f014 0f10 	tst.w	r4, #16
     e12:	4933      	ldr	r1, [pc, #204]	; (ee0 <spm_config+0x190>)
     e14:	4833      	ldr	r0, [pc, #204]	; (ee4 <spm_config+0x194>)
     e16:	bf08      	it	eq
     e18:	4619      	moveq	r1, r3
     e1a:	f001 ff2c 	bl	2c76 <printk>
		PRINT("%c", sram_perm[i] & SRAM_READ  ? 'r' : '-');
     e1e:	f014 0f04 	tst.w	r4, #4
     e22:	bf14      	ite	ne
     e24:	2172      	movne	r1, #114	; 0x72
     e26:	212d      	moveq	r1, #45	; 0x2d
     e28:	4628      	mov	r0, r5
     e2a:	f001 ff24 	bl	2c76 <printk>
		PRINT("%c", sram_perm[i] & SRAM_WRITE ? 'w' : '-');
     e2e:	f014 0f02 	tst.w	r4, #2
     e32:	bf14      	ite	ne
     e34:	2177      	movne	r1, #119	; 0x77
     e36:	212d      	moveq	r1, #45	; 0x2d
     e38:	4628      	mov	r0, r5
     e3a:	f001 ff1c 	bl	2c76 <printk>
		PRINT("%c", sram_perm[i] & SRAM_EXEC  ? 'x' : '-');
     e3e:	f014 0f01 	tst.w	r4, #1
     e42:	bf14      	ite	ne
     e44:	2178      	movne	r1, #120	; 0x78
     e46:	212d      	moveq	r1, #45	; 0x2d
     e48:	4628      	mov	r0, r5
     e4a:	f001 ff14 	bl	2c76 <printk>
		PRINT("%c", sram_perm[i] & SRAM_LOCK  ? 'l' : '-');
     e4e:	f414 7f80 	tst.w	r4, #256	; 0x100
     e52:	bf14      	ite	ne
     e54:	216c      	movne	r1, #108	; 0x6c
     e56:	212d      	moveq	r1, #45	; 0x2d
     e58:	4628      	mov	r0, r5
     e5a:	f001 ff0c 	bl	2c76 <printk>
		PRINT("\n");
     e5e:	4822      	ldr	r0, [pc, #136]	; (ee8 <spm_config+0x198>)
     e60:	f001 ff09 	bl	2c76 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(sram_perm); i++) {
     e64:	2e20      	cmp	r6, #32
     e66:	4631      	mov	r1, r6
     e68:	d1c3      	bne.n	df2 <spm_config+0xa2>
		NRF_SPU->GPIOPORT[0].PERM = 0;
     e6a:	2400      	movs	r4, #0
	PRINT("\n");
     e6c:	481e      	ldr	r0, [pc, #120]	; (ee8 <spm_config+0x198>)
     e6e:	f001 ff02 	bl	2c76 <printk>
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     e72:	4820      	ldr	r0, [pc, #128]	; (ef4 <spm_config+0x1a4>)
     e74:	f001 feff 	bl	2c76 <printk>
		NRF_SPU->GPIOPORT[0].PERM = 0;
     e78:	4b15      	ldr	r3, [pc, #84]	; (ed0 <spm_config+0x180>)
		PRINT("%02u %s\t\t%s", i, periph[i].name,
     e7a:	4d1f      	ldr	r5, [pc, #124]	; (ef8 <spm_config+0x1a8>)
     e7c:	f8df 8094 	ldr.w	r8, [pc, #148]	; f14 <spm_config+0x1c4>
     e80:	f8df 9094 	ldr.w	r9, [pc, #148]	; f18 <spm_config+0x1c8>
		NRF_SPU->GPIOPORT[0].PERM = 0;
     e84:	f8c3 44c0 	str.w	r4, [r3, #1216]	; 0x4c0
     e88:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
		PRINT("%02u %s\t\t%s", i, periph[i].name,
     e8c:	7977      	ldrb	r7, [r6, #5]
     e8e:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
     e92:	2f00      	cmp	r7, #0
     e94:	bf14      	ite	ne
     e96:	4643      	movne	r3, r8
     e98:	464b      	moveq	r3, r9
     e9a:	4621      	mov	r1, r4
     e9c:	4817      	ldr	r0, [pc, #92]	; (efc <spm_config+0x1ac>)
     e9e:	f001 feea 	bl	2c76 <printk>
		if (!periph[i].nonsecure) {
     ea2:	b957      	cbnz	r7, eba <spm_config+0x16a>
			PRINT("\tSKIP\n");
     ea4:	4816      	ldr	r0, [pc, #88]	; (f00 <spm_config+0x1b0>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     ea6:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     ea8:	f001 fee5 	bl	2c76 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     eac:	2c12      	cmp	r4, #18
     eae:	d1eb      	bne.n	e88 <spm_config+0x138>
	PRINT("\n");
     eb0:	480d      	ldr	r0, [pc, #52]	; (ee8 <spm_config+0x198>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     eb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     eb6:	f001 bede 	b.w	2c76 <printk>
		err = spm_config_peripheral(periph[i].id, false);
     eba:	7930      	ldrb	r0, [r6, #4]
     ebc:	f7ff feae 	bl	c1c <spm_config_peripheral.constprop.1>
		if (err) {
     ec0:	b108      	cbz	r0, ec6 <spm_config+0x176>
			PRINT("\tERROR\n");
     ec2:	4810      	ldr	r0, [pc, #64]	; (f04 <spm_config+0x1b4>)
     ec4:	e7ef      	b.n	ea6 <spm_config+0x156>
			PRINT("\tOK\n");
     ec6:	4810      	ldr	r0, [pc, #64]	; (f08 <spm_config+0x1b8>)
     ec8:	e7ed      	b.n	ea6 <spm_config+0x156>
     eca:	bf00      	nop
     ecc:	000036f4 	.word	0x000036f4
     ed0:	50003000 	.word	0x50003000
     ed4:	0000372c 	.word	0x0000372c
     ed8:	00003717 	.word	0x00003717
     edc:	000036dd 	.word	0x000036dd
     ee0:	000036d4 	.word	0x000036d4
     ee4:	0000378a 	.word	0x0000378a
     ee8:	00003b82 	.word	0x00003b82
     eec:	0000372f 	.word	0x0000372f
     ef0:	00003751 	.word	0x00003751
     ef4:	00003765 	.word	0x00003765
     ef8:	00003534 	.word	0x00003534
     efc:	00003781 	.word	0x00003781
     f00:	0000378d 	.word	0x0000378d
     f04:	00003794 	.word	0x00003794
     f08:	0000379c 	.word	0x0000379c
     f0c:	000034b4 	.word	0x000034b4
     f10:	000035c4 	.word	0x000035c4
     f14:	000036e9 	.word	0x000036e9
     f18:	000036e1 	.word	0x000036e1

00000f1c <_IntExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     f1c:	4804      	ldr	r0, [pc, #16]	; (f30 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     f1e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
     f20:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
     f22:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     f24:	d003      	beq.n	f2e <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     f26:	4903      	ldr	r1, [pc, #12]	; (f34 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     f2c:	600a      	str	r2, [r1, #0]

00000f2e <_EXIT_EXC>:
    mov lr, r1
#else
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */
    bx lr
     f2e:	4770      	bx	lr
    ldr r0, =_kernel
     f30:	2000011c 	.word	0x2000011c
    ldr r1, =_SCS_ICSR
     f34:	e000ed04 	.word	0xe000ed04

00000f38 <__pendsv>:

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     f38:	2020      	movs	r0, #32
    msr BASEPRI, r0
     f3a:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     f3e:	f3bf 8f6f 	isb	sy
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     f42:	4911      	ldr	r1, [pc, #68]	; (f88 <__pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
     f44:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     f46:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     f4a:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     f4c:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     f50:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     f54:	4f0d      	ldr	r7, [pc, #52]	; (f8c <__pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     f56:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     f5a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
     f5c:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     f5e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     f60:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs.n r3, #0
     f62:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     f64:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     f66:	f380 8811 	msr	BASEPRI, r0
    vldmia r0, {s16-s31}
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
     f6a:	b504      	push	{r2, lr}
    ldr r0, =_kernel
     f6c:	4806      	ldr	r0, [pc, #24]	; (f88 <__pendsv+0x50>)
    ldr r0, [r0, #_kernel_offset_to_current]
     f6e:	6880      	ldr	r0, [r0, #8]
    bl z_arch_configure_dynamic_mpu_regions
     f70:	f001 ff0d 	bl	2d8e <z_arch_configure_dynamic_mpu_regions>
    pop {r2,lr}
     f74:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     f78:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     f7c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

    msr PSP, ip
     f80:	f38c 8809 	msr	PSP, ip
    pop {r0, lr}
#endif
#endif /* CONFIG_TRACING */

    /* exc return */
    bx lr
     f84:	4770      	bx	lr
     f86:	0000      	.short	0x0000
    ldr r1, =_kernel
     f88:	2000011c 	.word	0x2000011c
    ldr v4, =_SCS_ICSR
     f8c:	e000ed04 	.word	0xe000ed04

00000f90 <__svc>:
 * - System Calls (User mode)
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     f90:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     f94:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     f96:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     f9a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     f9e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read encoding */
    ldrh r1, [r1, #-2]
     fa0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call (if user mode supported)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     fa4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

#endif

    cmp r1, #2
     fa8:	2902      	cmp	r1, #2
    beq _oops
     faa:	d0ff      	beq.n	fac <_oops>

00000fac <_oops>:
    /* exception return is done in _IntExit() */
    b _IntExit
#endif

_oops:
    push {r0, lr}
     fac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
     fae:	f001 fedf 	bl	2d70 <z_do_kernel_oops>
    pop {r0, pc}
     fb2:	bd01      	pop	{r0, pc}

00000fb4 <z_CpuIdleInit>:
 *
 * void z_CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, z_CpuIdleInit)
	ldr r1, =_SCB_SCR
     fb4:	4901      	ldr	r1, [pc, #4]	; (fbc <z_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     fb6:	2210      	movs	r2, #16
	str r2, [r1]
     fb8:	600a      	str	r2, [r1, #0]
	bx lr
     fba:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     fbc:	e000ed10 	.word	0xe000ed10

00000fc0 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     fc0:	4040      	eors	r0, r0
	msr BASEPRI, r0
     fc2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     fc6:	bf30      	wfi

	bx lr
     fc8:	4770      	bx	lr
     fca:	bf00      	nop

00000fcc <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     fcc:	4040      	eors	r0, r0
	msr BASEPRI, r0
     fce:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
     fd2:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
     fd6:	4671      	mov	r1, lr
	tst r1, r0
     fd8:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
     fda:	d002      	beq.n	fe2 <_s_stack_frame_msp>
	mrs r0, PSP
     fdc:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
     fe0:	d101      	bne.n	fe6 <_s_stack_frame_endif>

00000fe2 <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
     fe2:	f3ef 8008 	mrs	r0, MSP

00000fe6 <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
     fe6:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
     fe8:	b501      	push	{r0, lr}
	bl _Fault
     fea:	f000 f975 	bl	12d8 <_Fault>

	pop {r0, pc}
     fee:	bd01      	pop	{r0, pc}

00000ff0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {r0,lr}		/* r0, lr are now the first items on the stack */
     ff0:	b501      	push	{r0, lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, z_sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     ff2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     ff4:	4a0b      	ldr	r2, [pc, #44]	; (1024 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     ff6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
     ff8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     ffa:	bf1e      	ittt	ne
	movne	r1, #0
     ffc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     ffe:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1000:	f002 f806 	blne	3010 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1004:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1006:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    100a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    100e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1012:	4905      	ldr	r1, [pc, #20]	; (1028 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1014:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1016:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1018:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    101a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * _IntExit() */
	ldr r0, =_IntExit
    101e:	4803      	ldr	r0, [pc, #12]	; (102c <_isr_wrapper+0x3c>)
	bx r0
    1020:	4700      	bx	r0
    1022:	0000      	.short	0x0000
	ldr r2, =_kernel
    1024:	2000011c 	.word	0x2000011c
	ldr r1, =_sw_isr_table
    1028:	00003200 	.word	0x00003200
	ldr r0, =_IntExit
    102c:	00000f1d 	.word	0x00000f1d

00001030 <z_IntLibInit>:
 * @return N/A
 */

void z_IntLibInit(void)
{
	int irq = 0;
    1030:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1032:	2120      	movs	r1, #32
    1034:	4803      	ldr	r0, [pc, #12]	; (1044 <z_IntLibInit+0x14>)
    1036:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1038:	3301      	adds	r3, #1
    103a:	2b41      	cmp	r3, #65	; 0x41
    103c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1040:	d1f9      	bne.n	1036 <z_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1042:	4770      	bx	lr
    1044:	e000e100 	.word	0xe000e100

00001048 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1048:	4a09      	ldr	r2, [pc, #36]	; (1070 <__swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    104a:	490a      	ldr	r1, [pc, #40]	; (1074 <__swap+0x2c>)
	_current->arch.basepri = key;
    104c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    104e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1050:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
    1052:	6699      	str	r1, [r3, #104]	; 0x68

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1054:	4908      	ldr	r1, [pc, #32]	; (1078 <__swap+0x30>)
    1056:	684b      	ldr	r3, [r1, #4]
    1058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    105c:	604b      	str	r3, [r1, #4]
    105e:	2300      	movs	r3, #0
    1060:	f383 8811 	msr	BASEPRI, r3
    1064:	f3bf 8f6f 	isb	sy
	irq_unlock(0);

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1068:	6893      	ldr	r3, [r2, #8]
}
    106a:	6e98      	ldr	r0, [r3, #104]	; 0x68
    106c:	4770      	bx	lr
    106e:	bf00      	nop
    1070:	2000011c 	.word	0x2000011c
    1074:	00003698 	.word	0x00003698
    1078:	e000ed00 	.word	0xe000ed00

0000107c <MpuFault.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
    107c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****\n");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    107e:	4c1b      	ldr	r4, [pc, #108]	; (10ec <MpuFault.isra.2+0x70>)
static u32_t MpuFault(NANO_ESF *esf, int fromHardFault)
    1080:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** MPU FAULT *****\n");
    1082:	481b      	ldr	r0, [pc, #108]	; (10f0 <MpuFault.isra.2+0x74>)
    1084:	f001 fdf7 	bl	2c76 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    108a:	06d9      	lsls	r1, r3, #27
    108c:	d502      	bpl.n	1094 <MpuFault.isra.2+0x18>
		PR_FAULT_INFO("  Stacking error (context area might be"
    108e:	4819      	ldr	r0, [pc, #100]	; (10f4 <MpuFault.isra.2+0x78>)
    1090:	f001 fdf1 	bl	2c76 <printk>
			" not valid)\n");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1096:	071a      	lsls	r2, r3, #28
    1098:	d502      	bpl.n	10a0 <MpuFault.isra.2+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    109a:	4817      	ldr	r0, [pc, #92]	; (10f8 <MpuFault.isra.2+0x7c>)
    109c:	f001 fdeb 	bl	2c76 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    10a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10a2:	079b      	lsls	r3, r3, #30
    10a4:	d50e      	bpl.n	10c4 <MpuFault.isra.2+0x48>
		PR_FAULT_INFO("  Data Access Violation\n");
    10a6:	4815      	ldr	r0, [pc, #84]	; (10fc <MpuFault.isra.2+0x80>)
    10a8:	f001 fde5 	bl	2c76 <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    10ac:	6b61      	ldr	r1, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    10ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10b0:	0618      	lsls	r0, r3, #24
    10b2:	d507      	bpl.n	10c4 <MpuFault.isra.2+0x48>
			PR_EXC("  MMFAR Address: 0x%x\n", mmfar);
    10b4:	4812      	ldr	r0, [pc, #72]	; (1100 <MpuFault.isra.2+0x84>)
    10b6:	f001 fdde 	bl	2c76 <printk>
			if (fromHardFault) {
    10ba:	b11d      	cbz	r5, 10c4 <MpuFault.isra.2+0x48>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    10bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    10c2:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    10c4:	4c09      	ldr	r4, [pc, #36]	; (10ec <MpuFault.isra.2+0x70>)
    10c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10c8:	07da      	lsls	r2, r3, #31
    10ca:	d502      	bpl.n	10d2 <MpuFault.isra.2+0x56>
		PR_FAULT_INFO("  Instruction Access Violation\n");
    10cc:	480d      	ldr	r0, [pc, #52]	; (1104 <MpuFault.isra.2+0x88>)
    10ce:	f001 fdd2 	bl	2c76 <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    10d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10d4:	069b      	lsls	r3, r3, #26
    10d6:	d502      	bpl.n	10de <MpuFault.isra.2+0x62>
		PR_FAULT_INFO(
    10d8:	480b      	ldr	r0, [pc, #44]	; (1108 <MpuFault.isra.2+0x8c>)
    10da:	f001 fdcc 	bl	2c76 <printk>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    10de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    10e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    10e2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    10e4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    10e8:	62a3      	str	r3, [r4, #40]	; 0x28
}
    10ea:	bd38      	pop	{r3, r4, r5, pc}
    10ec:	e000ed00 	.word	0xe000ed00
    10f0:	00003952 	.word	0x00003952
    10f4:	00003969 	.word	0x00003969
    10f8:	0000399d 	.word	0x0000399d
    10fc:	000039b1 	.word	0x000039b1
    1100:	000039ca 	.word	0x000039ca
    1104:	000039e1 	.word	0x000039e1
    1108:	00003a01 	.word	0x00003a01

0000110c <BusFault.isra.3>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static int BusFault(NANO_ESF *esf, int fromHardFault)
    110c:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****\n");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    110e:	4c1e      	ldr	r4, [pc, #120]	; (1188 <BusFault.isra.3+0x7c>)
static int BusFault(NANO_ESF *esf, int fromHardFault)
    1110:	4605      	mov	r5, r0
	PR_FAULT_INFO("***** BUS FAULT *****\n");
    1112:	481e      	ldr	r0, [pc, #120]	; (118c <BusFault.isra.3+0x80>)
    1114:	f001 fdaf 	bl	2c76 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1118:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    111a:	04d9      	lsls	r1, r3, #19
    111c:	d502      	bpl.n	1124 <BusFault.isra.3+0x18>
		PR_FAULT_INFO("  Stacking error\n");
    111e:	481c      	ldr	r0, [pc, #112]	; (1190 <BusFault.isra.3+0x84>)
    1120:	f001 fda9 	bl	2c76 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1124:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1126:	051a      	lsls	r2, r3, #20
    1128:	d502      	bpl.n	1130 <BusFault.isra.3+0x24>
		PR_FAULT_INFO("  Unstacking error\n");
    112a:	481a      	ldr	r0, [pc, #104]	; (1194 <BusFault.isra.3+0x88>)
    112c:	f001 fda3 	bl	2c76 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1132:	059b      	lsls	r3, r3, #22
    1134:	d50e      	bpl.n	1154 <BusFault.isra.3+0x48>
		PR_FAULT_INFO("  Precise data bus error\n");
    1136:	4818      	ldr	r0, [pc, #96]	; (1198 <BusFault.isra.3+0x8c>)
    1138:	f001 fd9d 	bl	2c76 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    113c:	6ba1      	ldr	r1, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    113e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1140:	0418      	lsls	r0, r3, #16
    1142:	d507      	bpl.n	1154 <BusFault.isra.3+0x48>
			PR_EXC("  BFAR Address: 0x%x\n", bfar);
    1144:	4815      	ldr	r0, [pc, #84]	; (119c <BusFault.isra.3+0x90>)
    1146:	f001 fd96 	bl	2c76 <printk>
			if (fromHardFault) {
    114a:	b11d      	cbz	r5, 1154 <BusFault.isra.3+0x48>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    114c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    114e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1152:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1154:	4c0c      	ldr	r4, [pc, #48]	; (1188 <BusFault.isra.3+0x7c>)
    1156:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1158:	0559      	lsls	r1, r3, #21
    115a:	d502      	bpl.n	1162 <BusFault.isra.3+0x56>
		PR_FAULT_INFO("  Imprecise data bus error\n");
    115c:	4810      	ldr	r0, [pc, #64]	; (11a0 <BusFault.isra.3+0x94>)
    115e:	f001 fd8a 	bl	2c76 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1164:	05da      	lsls	r2, r3, #23
    1166:	d509      	bpl.n	117c <BusFault.isra.3+0x70>
		PR_FAULT_INFO("  Instruction bus error\n");
    1168:	480e      	ldr	r0, [pc, #56]	; (11a4 <BusFault.isra.3+0x98>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    116a:	f001 fd84 	bl	2c76 <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    116e:	4a06      	ldr	r2, [pc, #24]	; (1188 <BusFault.isra.3+0x7c>)
	if (MemoryFaultIsRecoverable(esf)) {
		reason = _NANO_ERR_RECOVERABLE;
	}

	return reason;
}
    1170:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1172:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1174:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1178:	6293      	str	r3, [r2, #40]	; 0x28
}
    117a:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    117c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    117e:	049b      	lsls	r3, r3, #18
    1180:	d5f5      	bpl.n	116e <BusFault.isra.3+0x62>
		PR_FAULT_INFO("  Floating-point lazy state preservation error\n");
    1182:	4809      	ldr	r0, [pc, #36]	; (11a8 <BusFault.isra.3+0x9c>)
    1184:	e7f1      	b.n	116a <BusFault.isra.3+0x5e>
    1186:	bf00      	nop
    1188:	e000ed00 	.word	0xe000ed00
    118c:	000038c4 	.word	0x000038c4
    1190:	000038db 	.word	0x000038db
    1194:	0000399d 	.word	0x0000399d
    1198:	000038ed 	.word	0x000038ed
    119c:	00003907 	.word	0x00003907
    11a0:	0000391d 	.word	0x0000391d
    11a4:	00003939 	.word	0x00003939
    11a8:	00003a01 	.word	0x00003a01

000011ac <UsageFault.isra.4>:
 *
 * See _FaultDump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t UsageFault(const NANO_ESF *esf)
    11ac:	b510      	push	{r4, lr}
	u32_t reason = _NANO_ERR_HW_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****\n");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    11ae:	4c1c      	ldr	r4, [pc, #112]	; (1220 <UsageFault.isra.4+0x74>)
	PR_FAULT_INFO("***** USAGE FAULT *****\n");
    11b0:	481c      	ldr	r0, [pc, #112]	; (1224 <UsageFault.isra.4+0x78>)
    11b2:	f001 fd60 	bl	2c76 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    11b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11b8:	019a      	lsls	r2, r3, #6
    11ba:	d502      	bpl.n	11c2 <UsageFault.isra.4+0x16>
		PR_FAULT_INFO("  Division by zero\n");
    11bc:	481a      	ldr	r0, [pc, #104]	; (1228 <UsageFault.isra.4+0x7c>)
    11be:	f001 fd5a 	bl	2c76 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    11c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11c4:	01db      	lsls	r3, r3, #7
    11c6:	d502      	bpl.n	11ce <UsageFault.isra.4+0x22>
		PR_FAULT_INFO("  Unaligned memory access\n");
    11c8:	4818      	ldr	r0, [pc, #96]	; (122c <UsageFault.isra.4+0x80>)
    11ca:	f001 fd54 	bl	2c76 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    11ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11d0:	02dc      	lsls	r4, r3, #11
    11d2:	d502      	bpl.n	11da <UsageFault.isra.4+0x2e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)\n");
    11d4:	4816      	ldr	r0, [pc, #88]	; (1230 <UsageFault.isra.4+0x84>)
    11d6:	f001 fd4e 	bl	2c76 <printk>
		 */
		reason = _NANO_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    11da:	4c11      	ldr	r4, [pc, #68]	; (1220 <UsageFault.isra.4+0x74>)
    11dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11de:	0318      	lsls	r0, r3, #12
    11e0:	d502      	bpl.n	11e8 <UsageFault.isra.4+0x3c>
		PR_FAULT_INFO("  No coprocessor instructions\n");
    11e2:	4814      	ldr	r0, [pc, #80]	; (1234 <UsageFault.isra.4+0x88>)
    11e4:	f001 fd47 	bl	2c76 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    11e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11ea:	0359      	lsls	r1, r3, #13
    11ec:	d502      	bpl.n	11f4 <UsageFault.isra.4+0x48>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC\n");
    11ee:	4812      	ldr	r0, [pc, #72]	; (1238 <UsageFault.isra.4+0x8c>)
    11f0:	f001 fd41 	bl	2c76 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    11f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    11f6:	039a      	lsls	r2, r3, #14
    11f8:	d502      	bpl.n	1200 <UsageFault.isra.4+0x54>
		PR_FAULT_INFO("  Illegal use of the EPSR\n");
    11fa:	4810      	ldr	r0, [pc, #64]	; (123c <UsageFault.isra.4+0x90>)
    11fc:	f001 fd3b 	bl	2c76 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1200:	4c07      	ldr	r4, [pc, #28]	; (1220 <UsageFault.isra.4+0x74>)
    1202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1204:	03db      	lsls	r3, r3, #15
    1206:	d502      	bpl.n	120e <UsageFault.isra.4+0x62>
		PR_FAULT_INFO("  Attempt to execute undefined instruction\n");
    1208:	480d      	ldr	r0, [pc, #52]	; (1240 <UsageFault.isra.4+0x94>)
    120a:	f001 fd34 	bl	2c76 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    120e:	6aa3      	ldr	r3, [r4, #40]	; 0x28

	return reason;
}
    1210:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1212:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1216:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    121a:	62a3      	str	r3, [r4, #40]	; 0x28
}
    121c:	bd10      	pop	{r4, pc}
    121e:	bf00      	nop
    1220:	e000ed00 	.word	0xe000ed00
    1224:	00003b11 	.word	0x00003b11
    1228:	00003b2a 	.word	0x00003b2a
    122c:	00003b3e 	.word	0x00003b3e
    1230:	00003b59 	.word	0x00003b59
    1234:	00003b84 	.word	0x00003b84
    1238:	00003ba3 	.word	0x00003ba3
    123c:	00003bc9 	.word	0x00003bc9
    1240:	00003be4 	.word	0x00003be4

00001244 <SecureFault.isra.5>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void SecureFault(const NANO_ESF *esf)
    1244:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****\n");

	STORE_xFAR(sfar, SAU->SFAR);
    1246:	4c1a      	ldr	r4, [pc, #104]	; (12b0 <SecureFault.isra.5+0x6c>)
	PR_FAULT_INFO("***** SECURE FAULT *****\n");
    1248:	481a      	ldr	r0, [pc, #104]	; (12b4 <SecureFault.isra.5+0x70>)
    124a:	f001 fd14 	bl	2c76 <printk>
	STORE_xFAR(sfar, SAU->SFAR);
    124e:	69a1      	ldr	r1, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1250:	6963      	ldr	r3, [r4, #20]
    1252:	0658      	lsls	r0, r3, #25
    1254:	d502      	bpl.n	125c <SecureFault.isra.5+0x18>
		PR_EXC("  Address: 0x%x\n", sfar);
    1256:	4818      	ldr	r0, [pc, #96]	; (12b8 <SecureFault.isra.5+0x74>)
    1258:	f001 fd0d 	bl	2c76 <printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    125c:	6963      	ldr	r3, [r4, #20]
    125e:	07d9      	lsls	r1, r3, #31
    1260:	d507      	bpl.n	1272 <SecureFault.isra.5+0x2e>
		PR_FAULT_INFO("  Invalid entry point\n");
    1262:	4816      	ldr	r0, [pc, #88]	; (12bc <SecureFault.isra.5+0x78>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition\n");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation\n");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error\n");
    1264:	f001 fd07 	bl	2c76 <printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1268:	6963      	ldr	r3, [r4, #20]
    126a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    126e:	6163      	str	r3, [r4, #20]
}
    1270:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1272:	6963      	ldr	r3, [r4, #20]
    1274:	079a      	lsls	r2, r3, #30
    1276:	d501      	bpl.n	127c <SecureFault.isra.5+0x38>
		PR_FAULT_INFO("  Invalid integrity signature\n");
    1278:	4811      	ldr	r0, [pc, #68]	; (12c0 <SecureFault.isra.5+0x7c>)
    127a:	e7f3      	b.n	1264 <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    127c:	6963      	ldr	r3, [r4, #20]
    127e:	075b      	lsls	r3, r3, #29
    1280:	d501      	bpl.n	1286 <SecureFault.isra.5+0x42>
		PR_FAULT_INFO("  Invalid exception return\n");
    1282:	4810      	ldr	r0, [pc, #64]	; (12c4 <SecureFault.isra.5+0x80>)
    1284:	e7ee      	b.n	1264 <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1286:	6963      	ldr	r3, [r4, #20]
    1288:	0718      	lsls	r0, r3, #28
    128a:	d501      	bpl.n	1290 <SecureFault.isra.5+0x4c>
		PR_FAULT_INFO("  Attribution unit violation\n");
    128c:	480e      	ldr	r0, [pc, #56]	; (12c8 <SecureFault.isra.5+0x84>)
    128e:	e7e9      	b.n	1264 <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    1290:	6963      	ldr	r3, [r4, #20]
    1292:	06d9      	lsls	r1, r3, #27
    1294:	d501      	bpl.n	129a <SecureFault.isra.5+0x56>
		PR_FAULT_INFO("  Invalid transition\n");
    1296:	480d      	ldr	r0, [pc, #52]	; (12cc <SecureFault.isra.5+0x88>)
    1298:	e7e4      	b.n	1264 <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    129a:	6963      	ldr	r3, [r4, #20]
    129c:	069a      	lsls	r2, r3, #26
    129e:	d501      	bpl.n	12a4 <SecureFault.isra.5+0x60>
		PR_FAULT_INFO("  Lazy state preservation\n");
    12a0:	480b      	ldr	r0, [pc, #44]	; (12d0 <SecureFault.isra.5+0x8c>)
    12a2:	e7df      	b.n	1264 <SecureFault.isra.5+0x20>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    12a4:	6963      	ldr	r3, [r4, #20]
    12a6:	061b      	lsls	r3, r3, #24
    12a8:	d5de      	bpl.n	1268 <SecureFault.isra.5+0x24>
		PR_FAULT_INFO("  Lazy state error\n");
    12aa:	480a      	ldr	r0, [pc, #40]	; (12d4 <SecureFault.isra.5+0x90>)
    12ac:	e7da      	b.n	1264 <SecureFault.isra.5+0x20>
    12ae:	bf00      	nop
    12b0:	e000edd0 	.word	0xe000edd0
    12b4:	00003a31 	.word	0x00003a31
    12b8:	00003a4b 	.word	0x00003a4b
    12bc:	00003a5c 	.word	0x00003a5c
    12c0:	00003a73 	.word	0x00003a73
    12c4:	00003a92 	.word	0x00003a92
    12c8:	00003aae 	.word	0x00003aae
    12cc:	00003acc 	.word	0x00003acc
    12d0:	00003ae2 	.word	0x00003ae2
    12d4:	00003afd 	.word	0x00003afd

000012d8 <_Fault>:
 * running a Secure Firmware.
 */
void _Fault(NANO_ESF *esf, u32_t exc_return)
{
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    12d8:	4b3d      	ldr	r3, [pc, #244]	; (13d0 <_Fault+0xf8>)
{
    12da:	b570      	push	{r4, r5, r6, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    12dc:	685e      	ldr	r6, [r3, #4]

	LOG_PANIC();

#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    12de:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
    12e2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
{
    12e6:	4605      	mov	r5, r0
    12e8:	460c      	mov	r4, r1
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    12ea:	d15d      	bne.n	13a8 <_Fault+0xd0>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    12ec:	f011 0001 	ands.w	r0, r1, #1
    12f0:	d041      	beq.n	1376 <_Fault+0x9e>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    12f2:	0648      	lsls	r0, r1, #25
    12f4:	d41b      	bmi.n	132e <_Fault+0x56>
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    12f6:	6829      	ldr	r1, [r5, #0]
    12f8:	4b36      	ldr	r3, [pc, #216]	; (13d4 <_Fault+0xfc>)
	PR_FAULT_INFO("  S instruction address:  0x%x\n", sec_ret_addr);
    12fa:	4837      	ldr	r0, [pc, #220]	; (13d8 <_Fault+0x100>)
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    12fc:	440b      	add	r3, r1
    12fe:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->pc;
    1300:	bf98      	it	ls
    1302:	6c29      	ldrls	r1, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x\n", sec_ret_addr);
    1304:	f001 fcb7 	bl	2c76 <printk>

		/* Handle the actual fault.
		 * Extract the correct stack frame from the Non-Secure state
		 * and supply it to the fault handing function.
		 */
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1308:	f014 0408 	ands.w	r4, r4, #8
    130c:	4b30      	ldr	r3, [pc, #192]	; (13d0 <_Fault+0xf8>)
    130e:	d009      	beq.n	1324 <_Fault+0x4c>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    1310:	f3ef 8589 	mrs	r5, PSP_NS
			esf = (NANO_ESF *)__TZ_get_PSP_NS();
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) == 0) {
    1314:	685c      	ldr	r4, [r3, #4]
    1316:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    131a:	d108      	bne.n	132e <_Fault+0x56>
				goto _exit_fatal;
			}
		} else {
			esf = (NANO_ESF *)__TZ_get_MSP_NS();
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
				PR_EXC("RETTOBASE does not match EXC_RETURN\n");
    131c:	482f      	ldr	r0, [pc, #188]	; (13dc <_Fault+0x104>)
	PR_FAULT_INFO(
    131e:	f001 fcaa 	bl	2c76 <printk>
    1322:	e041      	b.n	13a8 <_Fault+0xd0>
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    1324:	f3ef 8588 	mrs	r5, MSP_NS
			if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
    1328:	685b      	ldr	r3, [r3, #4]
    132a:	0519      	lsls	r1, r3, #20
    132c:	d4f6      	bmi.n	131c <_Fault+0x44>
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    132e:	f3c6 0608 	ubfx	r6, r6, #0, #9
	switch (fault) {
    1332:	1ef2      	subs	r2, r6, #3
    1334:	2a09      	cmp	r2, #9
    1336:	d83f      	bhi.n	13b8 <_Fault+0xe0>
    1338:	e8df f002 	tbb	[pc, r2]
    133c:	2d3a3805 	.word	0x2d3a3805
    1340:	3e3e3e34 	.word	0x3e3e3e34
    1344:	3c3e      	.short	0x3c3e
	PR_FAULT_INFO("***** HARD FAULT *****\n");
    1346:	4826      	ldr	r0, [pc, #152]	; (13e0 <_Fault+0x108>)
    1348:	f001 fc95 	bl	2c76 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    134c:	4b20      	ldr	r3, [pc, #128]	; (13d0 <_Fault+0xf8>)
    134e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1350:	0792      	lsls	r2, r2, #30
    1352:	d501      	bpl.n	1358 <_Fault+0x80>
		PR_EXC("  Bus fault on vector table read\n");
    1354:	4823      	ldr	r0, [pc, #140]	; (13e4 <_Fault+0x10c>)
    1356:	e7e2      	b.n	131e <_Fault+0x46>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1358:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    135a:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    135e:	d00a      	beq.n	1376 <_Fault+0x9e>
		PR_EXC("  Fault escalation (see below)\n");
    1360:	4821      	ldr	r0, [pc, #132]	; (13e8 <_Fault+0x110>)
    1362:	f001 fc88 	bl	2c76 <printk>
		if (SCB_MMFSR != 0) {
    1366:	4b21      	ldr	r3, [pc, #132]	; (13ec <_Fault+0x114>)
    1368:	781b      	ldrb	r3, [r3, #0]
    136a:	b14b      	cbz	r3, 1380 <_Fault+0xa8>
			reason = MpuFault(esf, 1);
    136c:	2001      	movs	r0, #1
		reason = MpuFault(esf, 0);
    136e:	f7ff fe85 	bl	107c <MpuFault.isra.2>
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = FaultHandle(esf, fault);

	if (reason == _NANO_ERR_RECOVERABLE) {
    1372:	2806      	cmp	r0, #6
    1374:	d02b      	beq.n	13ce <_Fault+0xf6>

#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_NanoFatalErrorHandler(reason, esf);
    1376:	4629      	mov	r1, r5
}
    1378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_NanoFatalErrorHandler(reason, esf);
    137c:	f000 b8b4 	b.w	14e8 <z_NanoFatalErrorHandler>
		} else if (SCB_BFSR != 0) {
    1380:	4b1b      	ldr	r3, [pc, #108]	; (13f0 <_Fault+0x118>)
    1382:	781b      	ldrb	r3, [r3, #0]
    1384:	b11b      	cbz	r3, 138e <_Fault+0xb6>
			reason = BusFault(esf, 1);
    1386:	2001      	movs	r0, #1
		reason = BusFault(esf, 0);
    1388:	f7ff fec0 	bl	110c <BusFault.isra.3>
    138c:	e7f1      	b.n	1372 <_Fault+0x9a>
		} else if (SCB_UFSR != 0) {
    138e:	4b19      	ldr	r3, [pc, #100]	; (13f4 <_Fault+0x11c>)
    1390:	8818      	ldrh	r0, [r3, #0]
    1392:	b284      	uxth	r4, r0
    1394:	b114      	cbz	r4, 139c <_Fault+0xc4>
		reason = UsageFault(esf);
    1396:	f7ff ff09 	bl	11ac <UsageFault.isra.4>
    139a:	e7ea      	b.n	1372 <_Fault+0x9a>
		} else if (SAU->SFSR != 0) {
    139c:	4b16      	ldr	r3, [pc, #88]	; (13f8 <_Fault+0x120>)
    139e:	6958      	ldr	r0, [r3, #20]
    13a0:	2800      	cmp	r0, #0
    13a2:	d0e8      	beq.n	1376 <_Fault+0x9e>
		SecureFault(esf);
    13a4:	f7ff ff4e 	bl	1244 <SecureFault.isra.5>
	u32_t reason = _NANO_ERR_HW_EXCEPTION;
    13a8:	2000      	movs	r0, #0
    13aa:	e7e4      	b.n	1376 <_Fault+0x9e>
		reason = MpuFault(esf, 0);
    13ac:	2000      	movs	r0, #0
    13ae:	e7de      	b.n	136e <_Fault+0x96>
		reason = BusFault(esf, 0);
    13b0:	2000      	movs	r0, #0
    13b2:	e7e9      	b.n	1388 <_Fault+0xb0>
	PR_FAULT_INFO(
    13b4:	4811      	ldr	r0, [pc, #68]	; (13fc <_Fault+0x124>)
    13b6:	e7b2      	b.n	131e <_Fault+0x46>
	PR_FAULT_INFO("***** %s %d) *****\n",
    13b8:	4811      	ldr	r0, [pc, #68]	; (1400 <_Fault+0x128>)
    13ba:	4912      	ldr	r1, [pc, #72]	; (1404 <_Fault+0x12c>)
    13bc:	f1a6 0210 	sub.w	r2, r6, #16
    13c0:	2e0f      	cmp	r6, #15
    13c2:	bfd8      	it	le
    13c4:	4601      	movle	r1, r0
    13c6:	4810      	ldr	r0, [pc, #64]	; (1408 <_Fault+0x130>)
    13c8:	f001 fc55 	bl	2c76 <printk>
    13cc:	e7ec      	b.n	13a8 <_Fault+0xd0>
}
    13ce:	bd70      	pop	{r4, r5, r6, pc}
    13d0:	e000ed00 	.word	0xe000ed00
    13d4:	0105eda6 	.word	0x0105eda6
    13d8:	00003c3e 	.word	0x00003c3e
    13dc:	00003c5e 	.word	0x00003c5e
    13e0:	00003c83 	.word	0x00003c83
    13e4:	00003c9b 	.word	0x00003c9b
    13e8:	00003cbd 	.word	0x00003cbd
    13ec:	e000ed28 	.word	0xe000ed28
    13f0:	e000ed29 	.word	0xe000ed29
    13f4:	e000ed2a 	.word	0xe000ed2a
    13f8:	e000edd0 	.word	0xe000edd0
    13fc:	00003cdd 	.word	0x00003cdd
    1400:	00003c10 	.word	0x00003c10
    1404:	00003c25 	.word	0x00003c25
    1408:	00003d14 	.word	0x00003d14

0000140c <z_FaultInit>:
 */
void z_FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    140c:	4a02      	ldr	r2, [pc, #8]	; (1418 <z_FaultInit+0xc>)
    140e:	6953      	ldr	r3, [r2, #20]
    1410:	f043 0310 	orr.w	r3, r3, #16
    1414:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1416:	4770      	bx	lr
    1418:	e000ed00 	.word	0xe000ed00

0000141c <z_arch_irq_enable>:
 *
 * @return N/A
 */
void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    141c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    141e:	2b00      	cmp	r3, #0
    1420:	db08      	blt.n	1434 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1422:	2201      	movs	r2, #1
    1424:	f000 001f 	and.w	r0, r0, #31
    1428:	fa02 f000 	lsl.w	r0, r2, r0
    142c:	4a02      	ldr	r2, [pc, #8]	; (1438 <z_arch_irq_enable+0x1c>)
    142e:	095b      	lsrs	r3, r3, #5
    1430:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1434:	4770      	bx	lr
    1436:	bf00      	nop
    1438:	e000e100 	.word	0xe000e100

0000143c <z_arch_irq_disable>:
 *
 * @return N/A
 */
void z_arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    143c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    143e:	2b00      	cmp	r3, #0
    1440:	db0d      	blt.n	145e <z_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1442:	2201      	movs	r2, #1
    1444:	f000 001f 	and.w	r0, r0, #31
    1448:	fa02 f000 	lsl.w	r0, r2, r0
    144c:	095b      	lsrs	r3, r3, #5
    144e:	4a04      	ldr	r2, [pc, #16]	; (1460 <z_arch_irq_disable+0x24>)
    1450:	3320      	adds	r3, #32
    1452:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1456:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    145a:	f3bf 8f6f 	isb	sy
}
    145e:	4770      	bx	lr
    1460:	e000e100 	.word	0xe000e100

00001464 <z_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1464:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1466:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    1468:	f101 0101 	add.w	r1, r1, #1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    146c:	bfa8      	it	ge
    146e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    1472:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1476:	bfb8      	it	lt
    1478:	4b05      	ldrlt	r3, [pc, #20]	; (1490 <z_irq_priority_set+0x2c>)
    147a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    147c:	bfab      	itete	ge
    147e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1482:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1486:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    148a:	5419      	strblt	r1, [r3, r0]
}
    148c:	4770      	bx	lr
    148e:	bf00      	nop
    1490:	e000ed14 	.word	0xe000ed14

00001494 <z_new_thread>:

void z_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * k_thread_create(). If K_THREAD_STACK_SIZEOF() is used, the
	 * Guard size has already been take out of stackSize.
	 */
	stackSize -= MPU_GUARD_ALIGN_AND_SIZE;
#endif
	stackEnd = pStackMem + stackSize;
    1498:	188c      	adds	r4, r1, r2
{
    149a:	4688      	mov	r8, r1
    149c:	4617      	mov	r7, r2
    149e:	461e      	mov	r6, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    14a0:	2204      	movs	r2, #4
    14a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    14a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    14a6:	4605      	mov	r5, r0
    14a8:	f001 fe5c 	bl	3164 <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    14ac:	2200      	movs	r2, #0
#else
	pInitCtx->pc = (u32_t)z_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    14ae:	490d      	ldr	r1, [pc, #52]	; (14e4 <z_new_thread+0x50>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    14b0:	f1a4 0320 	sub.w	r3, r4, #32
    14b4:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->pc &= 0xfffffffe;
    14b8:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
    14bc:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
    14c0:	e9c5 8716 	strd	r8, r7, [r5, #88]	; 0x58
    14c4:	6199      	str	r1, [r3, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    14c6:	9906      	ldr	r1, [sp, #24]
	pInitCtx->a1 = (u32_t)pEntry;
    14c8:	601e      	str	r6, [r3, #0]
	pInitCtx->a2 = (u32_t)parameter1;
    14ca:	6059      	str	r1, [r3, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    14cc:	9907      	ldr	r1, [sp, #28]
    14ce:	6099      	str	r1, [r3, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    14d0:	9908      	ldr	r1, [sp, #32]
    14d2:	60d9      	str	r1, [r3, #12]
	pInitCtx->xpsr =
    14d4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    14d8:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */
#ifdef CONFIG_FLOAT
	pInitCtx->fpscr = (u32_t)0; /* clears FPU status/control register*/
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
    14da:	64ab      	str	r3, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    14dc:	666a      	str	r2, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    14de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14e2:	bf00      	nop
    14e4:	0000298b 	.word	0x0000298b

000014e8 <z_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
void z_NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    14e8:	b538      	push	{r3, r4, r5, lr}
    14ea:	4604      	mov	r4, r0
    14ec:	460d      	mov	r5, r1
	LOG_PANIC();

	switch (reason) {
    14ee:	2805      	cmp	r0, #5
    14f0:	d81a      	bhi.n	1528 <z_NanoFatalErrorHandler+0x40>
    14f2:	e8df f000 	tbb	[pc, r0]
    14f6:	1903      	.short	0x1903
    14f8:	17151319 	.word	0x17151319
	case _NANO_ERR_HW_EXCEPTION:
		printk("***** Hardware exception *****\n");
    14fc:	480d      	ldr	r0, [pc, #52]	; (1534 <z_NanoFatalErrorHandler+0x4c>)
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    14fe:	f001 fbba 	bl	2c76 <printk>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    1502:	f001 f815 	bl	2530 <z_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1506:	69aa      	ldr	r2, [r5, #24]
    1508:	4601      	mov	r1, r0
    150a:	480b      	ldr	r0, [pc, #44]	; (1538 <z_NanoFatalErrorHandler+0x50>)
    150c:	f001 fbb3 	bl	2c76 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	z_SysFatalErrorHandler(reason, pEsf);
    1510:	4629      	mov	r1, r5
    1512:	4620      	mov	r0, r4
}
    1514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_SysFatalErrorHandler(reason, pEsf);
    1518:	f000 b818 	b.w	154c <z_SysFatalErrorHandler>
		printk("**** Kernel Allocation Failure! ****\n");
    151c:	4807      	ldr	r0, [pc, #28]	; (153c <z_NanoFatalErrorHandler+0x54>)
    151e:	e7ee      	b.n	14fe <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel OOPS! *****\n");
    1520:	4807      	ldr	r0, [pc, #28]	; (1540 <z_NanoFatalErrorHandler+0x58>)
    1522:	e7ec      	b.n	14fe <z_NanoFatalErrorHandler+0x16>
		printk("***** Kernel Panic! *****\n");
    1524:	4807      	ldr	r0, [pc, #28]	; (1544 <z_NanoFatalErrorHandler+0x5c>)
    1526:	e7ea      	b.n	14fe <z_NanoFatalErrorHandler+0x16>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1528:	4601      	mov	r1, r0
    152a:	4807      	ldr	r0, [pc, #28]	; (1548 <z_NanoFatalErrorHandler+0x60>)
    152c:	f001 fba3 	bl	2c76 <printk>
		break;
    1530:	e7e7      	b.n	1502 <z_NanoFatalErrorHandler+0x1a>
    1532:	bf00      	nop
    1534:	00003d28 	.word	0x00003d28
    1538:	00003dc6 	.word	0x00003dc6
    153c:	00003d48 	.word	0x00003d48
    1540:	00003d6e 	.word	0x00003d6e
    1544:	00003d88 	.word	0x00003d88
    1548:	00003da3 	.word	0x00003da3

0000154c <z_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    154c:	2805      	cmp	r0, #5
{
    154e:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1550:	d00c      	beq.n	156c <z_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || z_is_thread_essential()) {
    1552:	f000 fff3 	bl	253c <k_is_in_isr>
    1556:	b160      	cbz	r0, 1572 <z_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1558:	f000 fff0 	bl	253c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    155c:	490c      	ldr	r1, [pc, #48]	; (1590 <z_SysFatalErrorHandler+0x44>)
    155e:	4b0d      	ldr	r3, [pc, #52]	; (1594 <z_SysFatalErrorHandler+0x48>)
    1560:	2800      	cmp	r0, #0
    1562:	bf08      	it	eq
    1564:	4619      	moveq	r1, r3
    1566:	480c      	ldr	r0, [pc, #48]	; (1598 <z_SysFatalErrorHandler+0x4c>)
    1568:	f001 fb85 	bl	2c76 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    156c:	f7ff fd28 	bl	fc0 <k_cpu_idle>
    1570:	e7fc      	b.n	156c <z_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || z_is_thread_essential()) {
    1572:	f000 fff3 	bl	255c <z_is_thread_essential>
    1576:	2800      	cmp	r0, #0
    1578:	d1ee      	bne.n	1558 <z_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    157a:	4c08      	ldr	r4, [pc, #32]	; (159c <z_SysFatalErrorHandler+0x50>)
    157c:	4808      	ldr	r0, [pc, #32]	; (15a0 <z_SysFatalErrorHandler+0x54>)
    157e:	68a1      	ldr	r1, [r4, #8]
    1580:	f001 fb79 	bl	2c76 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    1584:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    158a:	f000 b80b 	b.w	15a4 <z_impl_k_thread_abort>
    158e:	bf00      	nop
    1590:	00003e02 	.word	0x00003e02
    1594:	00003e06 	.word	0x00003e06
    1598:	00003e17 	.word	0x00003e17
    159c:	2000011c 	.word	0x2000011c
    15a0:	00003e37 	.word	0x00003e37

000015a4 <z_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    15a4:	b538      	push	{r3, r4, r5, lr}
    15a6:	4605      	mov	r5, r0
	__asm__ volatile(
    15a8:	f04f 0320 	mov.w	r3, #32
    15ac:	f3ef 8411 	mrs	r4, BASEPRI
    15b0:	f383 8811 	msr	BASEPRI, r3
    15b4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    15b8:	f001 fdb5 	bl	3126 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    15bc:	4b0a      	ldr	r3, [pc, #40]	; (15e8 <z_impl_k_thread_abort+0x44>)
    15be:	689b      	ldr	r3, [r3, #8]
    15c0:	42ab      	cmp	r3, r5
    15c2:	d10b      	bne.n	15dc <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    15c4:	4b09      	ldr	r3, [pc, #36]	; (15ec <z_impl_k_thread_abort+0x48>)
    15c6:	685a      	ldr	r2, [r3, #4]
    15c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
    15cc:	b912      	cbnz	r2, 15d4 <z_impl_k_thread_abort+0x30>
#ifndef CONFIG_ARM
#ifdef CONFIG_TRACING
	sys_trace_thread_switched_out();
#endif
#endif
	ret = __swap(key);
    15ce:	4620      	mov	r0, r4
    15d0:	f7ff fd3a 	bl	1048 <__swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    15d4:	685a      	ldr	r2, [r3, #4]
    15d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    15da:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    15dc:	4620      	mov	r0, r4
}
    15de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    15e2:	f001 bd47 	b.w	3074 <z_reschedule_irqlock>
    15e6:	bf00      	nop
    15e8:	2000011c 	.word	0x2000011c
    15ec:	e000ed00 	.word	0xe000ed00

000015f0 <__reset>:
#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl _PlatformInit
#endif

    /* lock interrupts: will get unlocked when switch to main task */
    bl	lock_interrupts
    15f0:	f001 fbc2 	bl	2d78 <lock_interrupts>
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to _PrepC
     * (even though we do not intend to return).
     */
    bl _PrepC
    15f4:	f000 f804 	bl	1600 <_PrepC>

000015f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    15f8:	bf30      	wfi
    b z_SysNmiOnReset
    15fa:	f7ff bffd 	b.w	15f8 <z_SysNmiOnReset>
    15fe:	bf00      	nop

00001600 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1600:	b508      	push	{r3, lr}
	process_sp = (u32_t)&_interrupt_stack + CONFIG_ISR_STACK_SIZE;
    1602:	4b0e      	ldr	r3, [pc, #56]	; (163c <_PrepC+0x3c>)
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1604:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1608:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() | CONTROL_SPSEL_Msk);
    160c:	f043 0302 	orr.w	r3, r3, #2
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1610:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    1614:	f3bf 8f6f 	isb	sy
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1618:	4b09      	ldr	r3, [pc, #36]	; (1640 <_PrepC+0x40>)
    161a:	4a0a      	ldr	r2, [pc, #40]	; (1644 <_PrepC+0x44>)
    161c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1620:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1622:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1626:	f3bf 8f6f 	isb	sy
	 * gets set to _interrupt_stack during initialization.
	 */
	set_and_switch_to_psp();
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    162a:	f000 fd13 	bl	2054 <z_bss_zero>
	z_data_copy();
    162e:	f000 fd1b 	bl	2068 <z_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0U;
#endif
	z_IntLibInit();
    1632:	f7ff fcfd 	bl	1030 <z_IntLibInit>
	z_cstart();
    1636:	f000 fd49 	bl	20cc <z_cstart>
    163a:	bf00      	nop
    163c:	20000ea8 	.word	0x20000ea8
    1640:	00000000 	.word	0x00000000
    1644:	e000ed00 	.word	0xe000ed00

00001648 <z_arch_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_static_mpu_regions(void)
{
    1648:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    164a:	4b0e      	ldr	r3, [pc, #56]	; (1684 <z_arch_configure_static_mpu_regions+0x3c>)
{
    164c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    164e:	9302      	str	r3, [sp, #8]
    1650:	4b0d      	ldr	r3, [pc, #52]	; (1688 <z_arch_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1652:	4c0e      	ldr	r4, [pc, #56]	; (168c <z_arch_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    1654:	9303      	str	r3, [sp, #12]
    1656:	4b0e      	ldr	r3, [pc, #56]	; (1690 <z_arch_configure_static_mpu_regions+0x48>)
	const struct k_mem_partition *static_regions[] = {
    1658:	a808      	add	r0, sp, #32
		const struct k_mem_partition ramfunc_region =
    165a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    165c:	ab02      	add	r3, sp, #8
    165e:	f840 3d1c 	str.w	r3, [r0, #-28]!
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1662:	4a0c      	ldr	r2, [pc, #48]	; (1694 <z_arch_configure_static_mpu_regions+0x4c>)
    1664:	4623      	mov	r3, r4
    1666:	2101      	movs	r1, #1
    1668:	f000 f944 	bl	18f4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    166c:	2300      	movs	r3, #0
    166e:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1670:	4b09      	ldr	r3, [pc, #36]	; (1698 <z_arch_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1672:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1674:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1676:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    1678:	9305      	str	r3, [sp, #20]
    167a:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    167c:	f000 f944 	bl	1908 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1680:	b008      	add	sp, #32
    1682:	bd10      	pop	{r4, pc}
    1684:	20000000 	.word	0x20000000
    1688:	00000000 	.word	0x00000000
    168c:	20010000 	.word	0x20010000
    1690:	00010006 	.word	0x00010006
    1694:	20000000 	.word	0x20000000
    1698:	20000000 	.word	0x20000000

0000169c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    169c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    169e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    16a0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    16a2:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    16a6:	f004 021f 	and.w	r2, r4, #31
    16aa:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    16ac:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    16ae:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    16b0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    16b4:	4904      	ldr	r1, [pc, #16]	; (16c8 <region_init+0x2c>)
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    16b6:	f043 0301 	orr.w	r3, r3, #1
    16ba:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    16be:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    16c0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    16c2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    16c4:	bd10      	pop	{r4, pc}
    16c6:	bf00      	nop
    16c8:	e000ed90 	.word	0xe000ed90

000016cc <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
    16cc:	b530      	push	{r4, r5, lr}
    16ce:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_k_mem_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, u32_t base, u32_t size)
{
	p_attr->rbar = attr->rbar &
    16d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    16d4:	890d      	ldrh	r5, [r1, #8]
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    16d6:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    16d8:	684c      	ldr	r4, [r1, #4]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
    16da:	8949      	ldrh	r1, [r1, #10]
	p_attr->rbar = attr->rbar &
    16dc:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    16e0:	f361 1247 	bfi	r2, r1, #5, #3
	region_conf.base = new_region->start;
    16e4:	9300      	str	r3, [sp, #0]
    16e6:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    16ea:	f023 031f 	bic.w	r3, r3, #31
    16ee:	1e62      	subs	r2, r4, #1
    16f0:	4413      	add	r3, r2
    16f2:	f023 031f 	bic.w	r3, r3, #31
    16f6:	9303      	str	r3, [sp, #12]
	u32_t type = MPU->TYPE;
    16f8:	4b08      	ldr	r3, [pc, #32]	; (171c <mpu_configure_region+0x50>)
	if (index > (get_num_regions() - 1)) {
    16fa:	4604      	mov	r4, r0
	u32_t type = MPU->TYPE;
    16fc:	681b      	ldr	r3, [r3, #0]
	if (index > (get_num_regions() - 1)) {
    16fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1702:	3b01      	subs	r3, #1
    1704:	4298      	cmp	r0, r3
    1706:	dc05      	bgt.n	1714 <mpu_configure_region+0x48>
	region_init(index, region_conf);
    1708:	4669      	mov	r1, sp
    170a:	f7ff ffc7 	bl	169c <region_init>
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    170e:	4620      	mov	r0, r4
    1710:	b005      	add	sp, #20
    1712:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    1714:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    1718:	e7f9      	b.n	170e <mpu_configure_region+0x42>
    171a:	bf00      	nop
    171c:	e000ed90 	.word	0xe000ed90

00001720 <mpu_configure_regions.constprop.1>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
    1720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1724:	4606      	mov	r6, r0
    1726:	460f      	mov	r7, r1
    1728:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    172a:	2500      	movs	r5, #0
	MPU->RNR = index;
    172c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 1878 <mpu_configure_regions.constprop.1+0x158>
static int mpu_configure_regions(const struct k_mem_partition
    1730:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1732:	42bd      	cmp	r5, r7
    1734:	da0b      	bge.n	174e <mpu_configure_regions.constprop.1+0x2e>
		if (regions[i]->size == 0U) {
    1736:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    173a:	f8d3 9004 	ldr.w	r9, [r3, #4]
    173e:	f1b9 0f00 	cmp.w	r9, #0
    1742:	d03c      	beq.n	17be <mpu_configure_regions.constprop.1+0x9e>
		&&
    1744:	f1b9 0f1f 	cmp.w	r9, #31
    1748:	d805      	bhi.n	1756 <mpu_configure_regions.constprop.1+0x36>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    174a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    174e:	4620      	mov	r0, r4
    1750:	b005      	add	sp, #20
    1752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1756:	f019 0f1f 	tst.w	r9, #31
    175a:	d1f6      	bne.n	174a <mpu_configure_regions.constprop.1+0x2a>
		((part->start &
    175c:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    1760:	f01a 0f1f 	tst.w	sl, #31
    1764:	d1f1      	bne.n	174a <mpu_configure_regions.constprop.1+0x2a>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1766:	4650      	mov	r0, sl
    1768:	f001 f897 	bl	289a <arm_cmse_mpu_region_get>
    176c:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    176e:	eb09 000a 	add.w	r0, r9, sl
    1772:	3801      	subs	r0, #1
    1774:	f001 f891 	bl	289a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1778:	4583      	cmp	fp, r0
    177a:	d1e6      	bne.n	174a <mpu_configure_regions.constprop.1+0x2a>
		if ((u_reg_index == -EINVAL) ||
    177c:	f11b 0f16 	cmn.w	fp, #22
    1780:	d0e3      	beq.n	174a <mpu_configure_regions.constprop.1+0x2a>
			(u_reg_index > (reg_index - 1))) {
    1782:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    1784:	455b      	cmp	r3, fp
    1786:	dbe0      	blt.n	174a <mpu_configure_regions.constprop.1+0x2a>
	MPU->RNR = index;
    1788:	f8c8 b008 	str.w	fp, [r8, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    178c:	f8d8 000c 	ldr.w	r0, [r8, #12]
	MPU->RNR = index;
    1790:	f8c8 b008 	str.w	fp, [r8, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1794:	f8d8 3010 	ldr.w	r3, [r8, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1798:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    179c:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    17a0:	f043 091f 	orr.w	r9, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    17a4:	e9d1 3200 	ldrd	r3, r2, [r1]
    17a8:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    17aa:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    17ac:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    17b0:	d11a      	bne.n	17e8 <mpu_configure_regions.constprop.1+0xc8>
    17b2:	45d1      	cmp	r9, sl
    17b4:	d105      	bne.n	17c2 <mpu_configure_regions.constprop.1+0xa2>
			mpu_configure_region(u_reg_index, regions[i]);
    17b6:	fa5f f08b 	uxtb.w	r0, fp
    17ba:	f7ff ff87 	bl	16cc <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    17be:	3501      	adds	r5, #1
    17c0:	e7b7      	b.n	1732 <mpu_configure_regions.constprop.1+0x12>
	MPU->RNR = index;
    17c2:	f8c8 b008 	str.w	fp, [r8, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    17c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
		| (base & MPU_RBAR_BASE_Msk);
    17ca:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    17ce:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    17d2:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    17d4:	f8c8 200c 	str.w	r2, [r8, #12]
			reg_index =
    17d8:	b2e0      	uxtb	r0, r4
			reg_index =
    17da:	f7ff ff77 	bl	16cc <mpu_configure_region>
			if (reg_index == -EINVAL) {
    17de:	f110 0f16 	cmn.w	r0, #22
    17e2:	d0b2      	beq.n	174a <mpu_configure_regions.constprop.1+0x2a>
			reg_index++;
    17e4:	1c44      	adds	r4, r0, #1
    17e6:	e7ea      	b.n	17be <mpu_configure_regions.constprop.1+0x9e>
	MPU->RNR = index;
    17e8:	f8c8 b008 	str.w	fp, [r8, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    17ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
    17f0:	3b01      	subs	r3, #1
    17f2:	f023 031f 	bic.w	r3, r3, #31
    17f6:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    17fa:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    17fc:	45d1      	cmp	r9, sl
    17fe:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1800:	f8c8 3010 	str.w	r3, [r8, #16]
		} else if (reg_last == u_reg_last) {
    1804:	d0e9      	beq.n	17da <mpu_configure_regions.constprop.1+0xba>
			reg_index =
    1806:	f7ff ff61 	bl	16cc <mpu_configure_region>
			if (reg_index == -EINVAL) {
    180a:	f110 0f16 	cmn.w	r0, #22
    180e:	d09c      	beq.n	174a <mpu_configure_regions.constprop.1+0x2a>
	MPU->RNR = index;
    1810:	f8c8 b008 	str.w	fp, [r8, #8]
	attr->rbar = MPU->RBAR &
    1814:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1818:	f89d 3008 	ldrb.w	r3, [sp, #8]
			reg_index++;
    181c:	1c44      	adds	r4, r0, #1
	attr->rbar = MPU->RBAR &
    181e:	f362 0304 	bfi	r3, r2, #0, #5
    1822:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1826:	f8d8 3010 	ldr.w	r3, [r8, #16]
    182a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    182e:	085b      	lsrs	r3, r3, #1
    1830:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    1834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1838:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    183c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1840:	441a      	add	r2, r3
    1842:	9200      	str	r2, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    1844:	f109 33ff 	add.w	r3, r9, #4294967295
    1848:	f022 021f 	bic.w	r2, r2, #31
    184c:	4413      	add	r3, r2
    184e:	eba3 030a 	sub.w	r3, r3, sl
    1852:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1856:	9303      	str	r3, [sp, #12]
	u32_t type = MPU->TYPE;
    1858:	f8d8 3000 	ldr.w	r3, [r8]
    185c:	b2e4      	uxtb	r4, r4
	if (index > (get_num_regions() - 1)) {
    185e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1862:	3b01      	subs	r3, #1
    1864:	42a3      	cmp	r3, r4
    1866:	f6ff af70 	blt.w	174a <mpu_configure_regions.constprop.1+0x2a>
	region_init(index, region_conf);
    186a:	4620      	mov	r0, r4
    186c:	4669      	mov	r1, sp
    186e:	f7ff ff15 	bl	169c <region_init>
			reg_index++;
    1872:	3401      	adds	r4, #1
    1874:	e7a3      	b.n	17be <mpu_configure_regions.constprop.1+0x9e>
    1876:	bf00      	nop
    1878:	e000ed90 	.word	0xe000ed90

0000187c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    187c:	2205      	movs	r2, #5
    187e:	4b03      	ldr	r3, [pc, #12]	; (188c <arm_core_mpu_enable+0x10>)
    1880:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1882:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1886:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    188a:	4770      	bx	lr
    188c:	e000ed90 	.word	0xe000ed90

00001890 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1890:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1894:	2200      	movs	r2, #0
    1896:	4b01      	ldr	r3, [pc, #4]	; (189c <arm_core_mpu_disable+0xc>)
    1898:	605a      	str	r2, [r3, #4]
}
    189a:	4770      	bx	lr
    189c:	e000ed90 	.word	0xe000ed90

000018a0 <arm_mpu_init>:
	u32_t type = MPU->TYPE;
    18a0:	4910      	ldr	r1, [pc, #64]	; (18e4 <arm_mpu_init+0x44>)
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    18a2:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    18a4:	4d10      	ldr	r5, [pc, #64]	; (18e8 <arm_mpu_init+0x48>)
	u32_t type = MPU->TYPE;
    18a6:	680a      	ldr	r2, [r1, #0]
	if (mpu_config.num_regions > get_num_regions()) {
    18a8:	682e      	ldr	r6, [r5, #0]
    18aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
    18ae:	4296      	cmp	r6, r2
    18b0:	d814      	bhi.n	18dc <arm_mpu_init+0x3c>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    18b2:	f7ff ffed 	bl	1890 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    18b6:	2400      	movs	r4, #0
	MPU->MAIR0 =
    18b8:	4b0c      	ldr	r3, [pc, #48]	; (18ec <arm_mpu_init+0x4c>)
    18ba:	630b      	str	r3, [r1, #48]	; 0x30
    18bc:	42a6      	cmp	r6, r4
    18be:	d105      	bne.n	18cc <arm_mpu_init+0x2c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    18c0:	4b0b      	ldr	r3, [pc, #44]	; (18f0 <arm_mpu_init+0x50>)
    18c2:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    18c4:	f7ff ffda 	bl	187c <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#endif
	return 0;
    18c8:	2000      	movs	r0, #0
}
    18ca:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    18cc:	6869      	ldr	r1, [r5, #4]
    18ce:	4620      	mov	r0, r4
    18d0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    18d4:	f7ff fee2 	bl	169c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    18d8:	3401      	adds	r4, #1
    18da:	e7ef      	b.n	18bc <arm_mpu_init+0x1c>
		return -1;
    18dc:	f04f 30ff 	mov.w	r0, #4294967295
    18e0:	e7f3      	b.n	18ca <arm_mpu_init+0x2a>
    18e2:	bf00      	nop
    18e4:	e000ed90 	.word	0xe000ed90
    18e8:	00003474 	.word	0x00003474
    18ec:	0044ffaa 	.word	0x0044ffaa
    18f0:	2000015f 	.word	0x2000015f

000018f4 <arm_core_mpu_configure_static_mpu_regions>:
{
    18f4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    18f6:	4c03      	ldr	r4, [pc, #12]	; (1904 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    18f8:	7822      	ldrb	r2, [r4, #0]
    18fa:	f7ff ff11 	bl	1720 <mpu_configure_regions.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    18fe:	7020      	strb	r0, [r4, #0]
}
    1900:	bd10      	pop	{r4, pc}
    1902:	bf00      	nop
    1904:	2000015f 	.word	0x2000015f

00001908 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    190c:	4689      	mov	r9, r1
    190e:	4607      	mov	r7, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1910:	2600      	movs	r6, #0
    1912:	f8df 8090 	ldr.w	r8, [pc, #144]	; 19a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>
		if (dyn_reg_info[i].index == -EINVAL) {

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1916:	f8df a090 	ldr.w	sl, [pc, #144]	; 19a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
	MPU->RNR = index;
    191a:	4c21      	ldr	r4, [pc, #132]	; (19a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x98>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    191c:	454e      	cmp	r6, r9
    191e:	da19      	bge.n	1954 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_region_areas[i].size == 0U) {
    1920:	f8d7 b004 	ldr.w	fp, [r7, #4]
    1924:	f1bb 0f00 	cmp.w	fp, #0
    1928:	d036      	beq.n	1998 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
			get_region_index(dyn_region_areas[i].start,
    192a:	683b      	ldr	r3, [r7, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    192c:	4618      	mov	r0, r3
    192e:	9301      	str	r3, [sp, #4]
    1930:	f000 ffb3 	bl	289a <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1934:	9b01      	ldr	r3, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1936:	4605      	mov	r5, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1938:	eb0b 0003 	add.w	r0, fp, r3
    193c:	3801      	subs	r0, #1
    193e:	f000 ffac 	bl	289a <arm_cmse_mpu_region_get>
    1942:	2314      	movs	r3, #20
	if (region_start_addr == region_end_addr) {
    1944:	4285      	cmp	r5, r0
    1946:	fb03 f306 	mul.w	r3, r3, r6
    194a:	d006      	beq.n	195a <arm_core_mpu_mark_areas_for_dynamic_regions+0x52>
		dyn_reg_info[i].index =
    194c:	f06f 0215 	mvn.w	r2, #21
    1950:	f848 2003 	str.w	r2, [r8, r3]
}
    1954:	b003      	add	sp, #12
    1956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_reg_info[i].index == -EINVAL) {
    195a:	f115 0f16 	cmn.w	r5, #22
		dyn_reg_info[i].index =
    195e:	f848 5003 	str.w	r5, [r8, r3]
		if (dyn_reg_info[i].index == -EINVAL) {
    1962:	d0f7      	beq.n	1954 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
		if (dyn_reg_info[i].index >= static_regions_num) {
    1964:	f89a 2000 	ldrb.w	r2, [sl]
    1968:	42aa      	cmp	r2, r5
    196a:	ddf3      	ble.n	1954 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>
	MPU->RNR = index;
    196c:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    196e:	4443      	add	r3, r8
	MPU->RNR = index;
    1970:	60a5      	str	r5, [r4, #8]
	attr->rbar = MPU->RBAR &
    1972:	68e0      	ldr	r0, [r4, #12]
    1974:	7b19      	ldrb	r1, [r3, #12]
    1976:	f360 0104 	bfi	r1, r0, #0, #5
    197a:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    197c:	6921      	ldr	r1, [r4, #16]
    197e:	7b18      	ldrb	r0, [r3, #12]
    1980:	0849      	lsrs	r1, r1, #1
    1982:	f361 1047 	bfi	r0, r1, #5, #3
    1986:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1988:	68e2      	ldr	r2, [r4, #12]
    198a:	f022 021f 	bic.w	r2, r2, #31
    198e:	605a      	str	r2, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1990:	6922      	ldr	r2, [r4, #16]
    1992:	f022 021f 	bic.w	r2, r2, #31
    1996:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1998:	3601      	adds	r6, #1
    199a:	370c      	adds	r7, #12
    199c:	e7be      	b.n	191c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    199e:	bf00      	nop
    19a0:	e000ed90 	.word	0xe000ed90
    19a4:	20000010 	.word	0x20000010
    19a8:	2000015f 	.word	0x2000015f

000019ac <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    19ac:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
    19ae:	4b0e      	ldr	r3, [pc, #56]	; (19e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    19b0:	460e      	mov	r6, r1
    19b2:	781c      	ldrb	r4, [r3, #0]
  mpu->RLAR = 0U;
    19b4:	2200      	movs	r2, #0
    19b6:	4623      	mov	r3, r4
    19b8:	4605      	mov	r5, r0
	u32_t type = MPU->TYPE;
    19ba:	480c      	ldr	r0, [pc, #48]	; (19ec <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    19bc:	6801      	ldr	r1, [r0, #0]

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    19be:	f3c1 2107 	ubfx	r1, r1, #8, #8
    19c2:	428b      	cmp	r3, r1
    19c4:	db0b      	blt.n	19de <arm_core_mpu_configure_dynamic_mpu_regions+0x32>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
    19c6:	4b0a      	ldr	r3, [pc, #40]	; (19f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
    19c8:	1d19      	adds	r1, r3, #4
    19ca:	6818      	ldr	r0, [r3, #0]
    19cc:	f7ff fe66 	bl	169c <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    19d0:	4622      	mov	r2, r4
    19d2:	4631      	mov	r1, r6
    19d4:	4628      	mov	r0, r5
}
    19d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    19da:	f7ff bea1 	b.w	1720 <mpu_configure_regions.constprop.1>
  mpu->RNR = rnr;
    19de:	6083      	str	r3, [r0, #8]
  mpu->RLAR = 0U;
    19e0:	6102      	str	r2, [r0, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    19e2:	3301      	adds	r3, #1
    19e4:	e7ea      	b.n	19bc <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
    19e6:	bf00      	nop
    19e8:	2000015f 	.word	0x2000015f
    19ec:	e000ed90 	.word	0xe000ed90
    19f0:	20000010 	.word	0x20000010

000019f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    19f4:	4b01      	ldr	r3, [pc, #4]	; (19fc <__stdout_hook_install+0x8>)
    19f6:	6018      	str	r0, [r3, #0]
}
    19f8:	4770      	bx	lr
    19fa:	bf00      	nop
    19fc:	20000eb0 	.word	0x20000eb0

00001a00 <nrf_gpio_cfg_sense_set>:
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
    1a00:	4b07      	ldr	r3, [pc, #28]	; (1a20 <nrf_gpio_cfg_sense_set+0x20>)
    1a02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
    1a06:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1a0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    1a0e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1a12:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1a16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    1a1a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    1a1e:	4770      	bx	lr
    1a20:	50842500 	.word	0x50842500

00001a24 <gpiote_pin_int_cfg>:
	}
	return NRF_GPIO_PIN_SENSE_LOW;
}

static int gpiote_pin_int_cfg(struct device *port, u32_t pin)
{
    1a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->config->config_info;
    1a26:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1a28:	f001 041f 	and.w	r4, r1, #31
    1a2c:	689b      	ldr	r3, [r3, #8]
{
    1a2e:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1a30:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
    1a32:	4949      	ldr	r1, [pc, #292]	; (1b58 <gpiote_pin_int_cfg+0x134>)
    1a34:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1a38:	2300      	movs	r3, #0
    1a3a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
    1a3e:	6886      	ldr	r6, [r0, #8]
    1a40:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1a42:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    1a46:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    1a4a:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
    1a4e:	4284      	cmp	r4, r0
    1a50:	d167      	bne.n	1b22 <gpiote_pin_int_cfg+0xfe>
		    && (intenset & BIT(i))) {
    1a52:	fa22 f003 	lsr.w	r0, r2, r3
    1a56:	07c0      	lsls	r0, r0, #31
    1a58:	d563      	bpl.n	1b22 <gpiote_pin_int_cfg+0xfe>
    1a5a:	009a      	lsls	r2, r3, #2
    1a5c:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    1a60:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1a64:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    1a68:	f020 0001 	bic.w	r0, r0, #1
    1a6c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
    1a70:	2201      	movs	r2, #1
    1a72:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
    1a76:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
	int res = 0;

	gpiote_channel_free(abs_pin);
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1a7a:	4620      	mov	r0, r4
    1a7c:	2100      	movs	r1, #0
    1a7e:	f7ff ffbf 	bl	1a00 <nrf_gpio_cfg_sense_set>

	/* Pins trigger interrupts only if pin has been configured to do so
	 * and callback has been enabled for that pin.
	 */
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    1a82:	68b0      	ldr	r0, [r6, #8]
    1a84:	40e8      	lsrs	r0, r5
    1a86:	f010 0001 	ands.w	r0, r0, #1
    1a8a:	d049      	beq.n	1b20 <gpiote_pin_int_cfg+0xfc>
    1a8c:	68f0      	ldr	r0, [r6, #12]
    1a8e:	40e8      	lsrs	r0, r5
    1a90:	f010 0001 	ands.w	r0, r0, #1
    1a94:	d044      	beq.n	1b20 <gpiote_pin_int_cfg+0xfc>
		if (data->trig_edge & BIT(pin)) {
    1a96:	6970      	ldr	r0, [r6, #20]
    1a98:	40e8      	lsrs	r0, r5
    1a9a:	f010 0201 	ands.w	r2, r0, #1
    1a9e:	d04c      	beq.n	1b3a <gpiote_pin_int_cfg+0x116>
		/* For edge triggering we use GPIOTE channels. */
			nrf_gpiote_polarity_t pol;

			if (data->double_edge & BIT(pin)) {
    1aa0:	69b3      	ldr	r3, [r6, #24]
    1aa2:	40eb      	lsrs	r3, r5
    1aa4:	07db      	lsls	r3, r3, #31
    1aa6:	d440      	bmi.n	1b2a <gpiote_pin_int_cfg+0x106>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
			} else if (((data->active_level & BIT(pin)) != 0U)
    1aa8:	6933      	ldr	r3, [r6, #16]
    1aaa:	fa23 f205 	lsr.w	r2, r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    1aae:	69f3      	ldr	r3, [r6, #28]
    1ab0:	fa23 f505 	lsr.w	r5, r3, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
    1ab4:	f005 0501 	and.w	r5, r5, #1
    1ab8:	f002 0301 	and.w	r3, r2, #1
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    1abc:	42ab      	cmp	r3, r5
    1abe:	bf0c      	ite	eq
    1ac0:	2502      	moveq	r5, #2
    1ac2:	2501      	movne	r5, #1
			} else {
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    1ac4:	2100      	movs	r1, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    1ac6:	4e24      	ldr	r6, [pc, #144]	; (1b58 <gpiote_pin_int_cfg+0x134>)
    1ac8:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    1acc:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
    1ad0:	f010 0003 	ands.w	r0, r0, #3
    1ad4:	d12b      	bne.n	1b2e <gpiote_pin_int_cfg+0x10a>
			nrf_gpiote_events_t evt =
    1ad6:	008b      	lsls	r3, r1, #2
    1ad8:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1adc:	f503 4750 	add.w	r7, r3, #53248	; 0xd000
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1ae0:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1ae4:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1ae6:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    1aea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    1aee:	f8c7 2510 	str.w	r2, [r7, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1af2:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
    1af6:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    1afa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1afe:	f503 4351 	add.w	r3, r3, #53504	; 0xd100
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1b02:	4315      	orrs	r5, r2
    1b04:	f8c7 5510 	str.w	r5, [r7, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1b08:	6018      	str	r0, [r3, #0]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    1b0a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    1b0e:	f043 0301 	orr.w	r3, r3, #1
    1b12:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
    1b16:	2301      	movs	r3, #1
    1b18:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
    1b1c:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304

			nrf_gpio_cfg_sense_set(abs_pin, sense);
		}
	}
	return res;
}
    1b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1b22:	3301      	adds	r3, #1
    1b24:	2b08      	cmp	r3, #8
    1b26:	d18c      	bne.n	1a42 <gpiote_pin_int_cfg+0x1e>
    1b28:	e7a7      	b.n	1a7a <gpiote_pin_int_cfg+0x56>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1b2a:	2503      	movs	r5, #3
    1b2c:	e7ca      	b.n	1ac4 <gpiote_pin_int_cfg+0xa0>
    1b2e:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    1b30:	2908      	cmp	r1, #8
    1b32:	d1c9      	bne.n	1ac8 <gpiote_pin_int_cfg+0xa4>
	return -ENODEV;
    1b34:	f06f 0012 	mvn.w	r0, #18
    1b38:	e7f2      	b.n	1b20 <gpiote_pin_int_cfg+0xfc>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1b3a:	69f1      	ldr	r1, [r6, #28]
    1b3c:	6933      	ldr	r3, [r6, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1b3e:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1b40:	404b      	eors	r3, r1
    1b42:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    1b46:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1b4a:	bf0c      	ite	eq
    1b4c:	2103      	moveq	r1, #3
    1b4e:	2102      	movne	r1, #2
    1b50:	f7ff ff56 	bl	1a00 <nrf_gpio_cfg_sense_set>
	int res = 0;
    1b54:	4610      	mov	r0, r2
    1b56:	e7e3      	b.n	1b20 <gpiote_pin_int_cfg+0xfc>
    1b58:	5000d000 	.word	0x5000d000

00001b5c <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    1b5c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1b5e:	4b09      	ldr	r3, [pc, #36]	; (1b84 <gpio_nrfx_init+0x28>)
    1b60:	781a      	ldrb	r2, [r3, #0]
    1b62:	b96a      	cbnz	r2, 1b80 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1b64:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
    1b66:	200d      	movs	r0, #13
		gpio_initialized = true;
    1b68:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ,
    1b6a:	2105      	movs	r1, #5
    1b6c:	f7ff fc7a 	bl	1464 <z_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ);
    1b70:	200d      	movs	r0, #13
    1b72:	f7ff fc53 	bl	141c <z_arch_irq_enable>
    1b76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1b7a:	4b03      	ldr	r3, [pc, #12]	; (1b88 <gpio_nrfx_init+0x2c>)
    1b7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1b80:	2000      	movs	r0, #0
    1b82:	bd08      	pop	{r3, pc}
    1b84:	20000160 	.word	0x20000160
    1b88:	5000d000 	.word	0x5000d000

00001b8c <gpio_nrfx_config>:
{
    1b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b90:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    1b92:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1b94:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    1b98:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    1b9c:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1b9e:	d049      	beq.n	1c34 <gpio_nrfx_config+0xa8>
    1ba0:	dc2c      	bgt.n	1bfc <gpio_nrfx_config+0x70>
    1ba2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    1ba6:	d03d      	beq.n	1c24 <gpio_nrfx_config+0x98>
    1ba8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    1bac:	d03e      	beq.n	1c2c <gpio_nrfx_config+0xa0>
    1bae:	bb60      	cbnz	r0, 1c0a <gpio_nrfx_config+0x7e>
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1bb0:	f406 7740 	and.w	r7, r6, #768	; 0x300
    1bb4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    1bb8:	d03e      	beq.n	1c38 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_PULLUP;
    1bba:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    1bbe:	4263      	negs	r3, r4
    1bc0:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    1bc2:	2901      	cmp	r1, #1
		from_pin = pin;
    1bc4:	bf19      	ittee	ne
    1bc6:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
    1bc8:	46a1      	movne	r9, r4
		to_pin   = 31U;
    1bca:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    1bce:	2400      	moveq	r4, #0
    1bd0:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    1bd4:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    1bd8:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1bdc:	ea47 070c 	orr.w	r7, r7, ip
    1be0:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1be4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1cb0 <gpio_nrfx_config+0x124>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1be8:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    1bec:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    1bf0:	45a1      	cmp	r9, r4
    1bf2:	d223      	bcs.n	1c3c <gpio_nrfx_config+0xb0>
	return 0;
    1bf4:	2000      	movs	r0, #0
}
    1bf6:	b003      	add	sp, #12
    1bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1bfc:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    1c00:	d016      	beq.n	1c30 <gpio_nrfx_config+0xa4>
    1c02:	dc05      	bgt.n	1c10 <gpio_nrfx_config+0x84>
    1c04:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    1c08:	d00e      	beq.n	1c28 <gpio_nrfx_config+0x9c>
		return -EINVAL;
    1c0a:	f06f 0015 	mvn.w	r0, #21
    1c0e:	e7f2      	b.n	1bf6 <gpio_nrfx_config+0x6a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    1c10:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    1c14:	d004      	beq.n	1c20 <gpio_nrfx_config+0x94>
    1c16:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    1c1a:	d1f6      	bne.n	1c0a <gpio_nrfx_config+0x7e>
		drive = NRF_GPIO_PIN_H0D1;
    1c1c:	2007      	movs	r0, #7
		break;
    1c1e:	e7c7      	b.n	1bb0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0D1;
    1c20:	2006      	movs	r0, #6
		break;
    1c22:	e7c5      	b.n	1bb0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0S1;
    1c24:	2001      	movs	r0, #1
		break;
    1c26:	e7c3      	b.n	1bb0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    1c28:	2003      	movs	r0, #3
		break;
    1c2a:	e7c1      	b.n	1bb0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0S1;
    1c2c:	2004      	movs	r0, #4
		break;
    1c2e:	e7bf      	b.n	1bb0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_D0H1;
    1c30:	2005      	movs	r0, #5
		break;
    1c32:	e7bd      	b.n	1bb0 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_S0H1;
    1c34:	2002      	movs	r0, #2
    1c36:	e7bb      	b.n	1bb0 <gpio_nrfx_config+0x24>
		pull = NRF_GPIO_PIN_PULLUP;
    1c38:	2303      	movs	r3, #3
    1c3a:	e7c2      	b.n	1bc2 <gpio_nrfx_config+0x36>
	return port->config->config_info;
    1c3c:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    1c40:	6892      	ldr	r2, [r2, #8]
    1c42:	7911      	ldrb	r1, [r2, #4]
    1c44:	f004 021f 	and.w	r2, r4, #31
    1c48:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1c4c:	3280      	adds	r2, #128	; 0x80
    1c4e:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
    1c52:	68a9      	ldr	r1, [r5, #8]
    1c54:	fa0b f204 	lsl.w	r2, fp, r4
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d025      	beq.n	1ca8 <gpio_nrfx_config+0x11c>
    1c5c:	4311      	orrs	r1, r2
    1c5e:	60a9      	str	r1, [r5, #8]
    1c60:	6969      	ldr	r1, [r5, #20]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    1c62:	06b0      	lsls	r0, r6, #26
    1c64:	bf4c      	ite	mi
    1c66:	4311      	orrmi	r1, r2
    1c68:	4391      	bicpl	r1, r2
    1c6a:	6169      	str	r1, [r5, #20]
    1c6c:	69a9      	ldr	r1, [r5, #24]
		WRITE_BIT(data->double_edge, curr_pin,
    1c6e:	0670      	lsls	r0, r6, #25
    1c70:	bf4c      	ite	mi
    1c72:	4311      	orrmi	r1, r2
    1c74:	4391      	bicpl	r1, r2
    1c76:	61a9      	str	r1, [r5, #24]
    1c78:	6929      	ldr	r1, [r5, #16]
		WRITE_BIT(data->active_level, curr_pin,
    1c7a:	0770      	lsls	r0, r6, #29
    1c7c:	bf4c      	ite	mi
    1c7e:	4311      	orrmi	r1, r2
    1c80:	4391      	bicpl	r1, r2
    1c82:	6129      	str	r1, [r5, #16]
    1c84:	69e9      	ldr	r1, [r5, #28]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    1c86:	0630      	lsls	r0, r6, #24
    1c88:	bf4c      	ite	mi
    1c8a:	430a      	orrmi	r2, r1
    1c8c:	ea21 0202 	bicpl.w	r2, r1, r2
    1c90:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    1c92:	4621      	mov	r1, r4
    1c94:	4640      	mov	r0, r8
    1c96:	9301      	str	r3, [sp, #4]
    1c98:	f7ff fec4 	bl	1a24 <gpiote_pin_int_cfg>
		if (res != 0) {
    1c9c:	2800      	cmp	r0, #0
    1c9e:	d1aa      	bne.n	1bf6 <gpio_nrfx_config+0x6a>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    1ca0:	3401      	adds	r4, #1
    1ca2:	b2e4      	uxtb	r4, r4
    1ca4:	9b01      	ldr	r3, [sp, #4]
    1ca6:	e7a3      	b.n	1bf0 <gpio_nrfx_config+0x64>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    1ca8:	ea21 0102 	bic.w	r1, r1, r2
    1cac:	e7d7      	b.n	1c5e <gpio_nrfx_config+0xd2>
    1cae:	bf00      	nop
    1cb0:	50842500 	.word	0x50842500

00001cb4 <gpiote_event_handler>:
{
    1cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
    1cb8:	4e45      	ldr	r6, [pc, #276]	; (1dd0 <gpiote_event_handler+0x11c>)
    1cba:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    1cbc:	2d01      	cmp	r5, #1
    1cbe:	d15b      	bne.n	1d78 <gpiote_event_handler+0xc4>
	u32_t bit = 1U << pin;
    1cc0:	462f      	mov	r7, r5
	u32_t pin = 0U;
    1cc2:	f04f 0900 	mov.w	r9, #0
	struct gpio_nrfx_data *data = get_port_data(port);
    1cc6:	4a43      	ldr	r2, [pc, #268]	; (1dd4 <gpiote_event_handler+0x120>)
    1cc8:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
    1cca:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    1ccc:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
    1cce:	f8d2 8008 	ldr.w	r8, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
    1cd2:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    1cd6:	400a      	ands	r2, r1
	out &= ~data->trig_edge & ~data->double_edge;
    1cd8:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    1cdc:	4301      	orrs	r1, r0
    1cde:	ea22 0201 	bic.w	r2, r2, r1
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    1ce2:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    1ce6:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    1ce8:	6909      	ldr	r1, [r1, #16]
    1cea:	405c      	eors	r4, r3
    1cec:	404c      	eors	r4, r1
	u32_t out = pin_states & level_pins;
    1cee:	ea22 0404 	bic.w	r4, r2, r4
	while (level_pins) {
    1cf2:	bb82      	cbnz	r2, 1d56 <gpiote_event_handler+0xa2>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1cf4:	6032      	str	r2, [r6, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
    1cf6:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
    1cf8:	2701      	movs	r7, #1
    1cfa:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
    1cfc:	4e36      	ldr	r6, [pc, #216]	; (1dd8 <gpiote_event_handler+0x124>)
    1cfe:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    1d02:	fa07 f103 	lsl.w	r1, r7, r3
    1d06:	4211      	tst	r1, r2
    1d08:	d011      	beq.n	1d2e <gpiote_event_handler+0x7a>
    1d0a:	f103 52a0 	add.w	r2, r3, #335544320	; 0x14000000
    1d0e:	f502 5251 	add.w	r2, r2, #13376	; 0x3440
    1d12:	0092      	lsls	r2, r2, #2
    1d14:	6811      	ldr	r1, [r2, #0]
    1d16:	2901      	cmp	r1, #1
    1d18:	d109      	bne.n	1d2e <gpiote_event_handler+0x7a>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1d1a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    1d1e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
    1d22:	f8c2 c000 	str.w	ip, [r2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1d26:	f3c0 2004 	ubfx	r0, r0, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1d2a:	4081      	lsls	r1, r0
    1d2c:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1d2e:	3301      	adds	r3, #1
    1d30:	2b08      	cmp	r3, #8
    1d32:	d1e4      	bne.n	1cfe <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    1d34:	b314      	cbz	r4, 1d7c <gpiote_event_handler+0xc8>
	gpio_fire_callbacks(&get_port_data(port)->callbacks, port, pins);
    1d36:	4f27      	ldr	r7, [pc, #156]	; (1dd4 <gpiote_event_handler+0x120>)
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d38:	68bb      	ldr	r3, [r7, #8]
    1d3a:	6819      	ldr	r1, [r3, #0]
    1d3c:	b1f1      	cbz	r1, 1d7c <gpiote_event_handler+0xc8>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1d3e:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
    1d40:	688b      	ldr	r3, [r1, #8]
    1d42:	421c      	tst	r4, r3
    1d44:	d003      	beq.n	1d4e <gpiote_event_handler+0x9a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1d46:	684b      	ldr	r3, [r1, #4]
    1d48:	4622      	mov	r2, r4
    1d4a:	4638      	mov	r0, r7
    1d4c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d4e:	b1ae      	cbz	r6, 1d7c <gpiote_event_handler+0xc8>
    1d50:	4631      	mov	r1, r6
    1d52:	6836      	ldr	r6, [r6, #0]
    1d54:	e7f4      	b.n	1d40 <gpiote_event_handler+0x8c>
		if (level_pins & bit) {
    1d56:	423a      	tst	r2, r7
    1d58:	d00a      	beq.n	1d70 <gpiote_event_handler+0xbc>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1d5a:	f898 3004 	ldrb.w	r3, [r8, #4]
    1d5e:	f009 001f 	and.w	r0, r9, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1d62:	2100      	movs	r1, #0
    1d64:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    1d68:	f7ff fe4a 	bl	1a00 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    1d6c:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    1d70:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    1d74:	007f      	lsls	r7, r7, #1
    1d76:	e7bc      	b.n	1cf2 <gpiote_event_handler+0x3e>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    1d78:	2400      	movs	r4, #0
    1d7a:	e7bc      	b.n	1cf6 <gpiote_event_handler+0x42>
	if (port_event) {
    1d7c:	2d01      	cmp	r5, #1
    1d7e:	d10d      	bne.n	1d9c <gpiote_event_handler+0xe8>
	u32_t pin = 0U;
    1d80:	2600      	movs	r6, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
    1d82:	4b14      	ldr	r3, [pc, #80]	; (1dd4 <gpiote_event_handler+0x120>)
    1d84:	689c      	ldr	r4, [r3, #8]
	return port->config->config_info;
    1d86:	681b      	ldr	r3, [r3, #0]
    1d88:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    1d8a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    1d8e:	401a      	ands	r2, r3
	out &= ~data->trig_edge & ~data->double_edge;
    1d90:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
    1d94:	430b      	orrs	r3, r1
    1d96:	ea22 0203 	bic.w	r2, r2, r3
	while (level_pins) {
    1d9a:	b90a      	cbnz	r2, 1da0 <gpiote_event_handler+0xec>
}
    1d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    1da0:	4215      	tst	r5, r2
    1da2:	d012      	beq.n	1dca <gpiote_event_handler+0x116>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1da4:	69e1      	ldr	r1, [r4, #28]
    1da6:	6923      	ldr	r3, [r4, #16]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1da8:	f897 c004 	ldrb.w	ip, [r7, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    1dac:	404b      	eors	r3, r1
    1dae:	40f3      	lsrs	r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
    1db0:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1db4:	f006 001f 	and.w	r0, r6, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1db8:	bf0c      	ite	eq
    1dba:	2103      	moveq	r1, #3
    1dbc:	2102      	movne	r1, #2
    1dbe:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
    1dc2:	f7ff fe1d 	bl	1a00 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    1dc6:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    1dca:	3601      	adds	r6, #1
		bit <<= 1;
    1dcc:	006d      	lsls	r5, r5, #1
    1dce:	e7e4      	b.n	1d9a <gpiote_event_handler+0xe6>
    1dd0:	5000d17c 	.word	0x5000d17c
    1dd4:	20000f28 	.word	0x20000f28
    1dd8:	5000d000 	.word	0x5000d000

00001ddc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1ddc:	b570      	push	{r4, r5, r6, lr}
	nrf_uarte_parity_t parity;
	nrf_uarte_hwfc_t hwfc;

	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    1dde:	794b      	ldrb	r3, [r1, #5]
    1de0:	2b01      	cmp	r3, #1
    1de2:	d123      	bne.n	1e2c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1de4:	798b      	ldrb	r3, [r1, #6]
    1de6:	2b03      	cmp	r3, #3
    1de8:	d120      	bne.n	1e2c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1dea:	79cc      	ldrb	r4, [r1, #7]
    1dec:	b12c      	cbz	r4, 1dfa <uarte_nrfx_configure+0x1e>
    1dee:	2c01      	cmp	r4, #1
    1df0:	d11c      	bne.n	1e2c <uarte_nrfx_configure+0x50>
	return dev->config->config_info;
    1df2:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1df4:	689b      	ldr	r3, [r3, #8]
    1df6:	791b      	ldrb	r3, [r3, #4]
    1df8:	b1c3      	cbz	r3, 1e2c <uarte_nrfx_configure+0x50>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
    1dfa:	790a      	ldrb	r2, [r1, #4]
    1dfc:	b112      	cbz	r2, 1e04 <uarte_nrfx_configure+0x28>
    1dfe:	2a02      	cmp	r2, #2
    1e00:	d114      	bne.n	1e2c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
    1e02:	220e      	movs	r2, #14
	switch (baudrate) {
    1e04:	f647 2612 	movw	r6, #31250	; 0x7a12
	return dev->config->config_info;
    1e08:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    1e0a:	689b      	ldr	r3, [r3, #8]
    1e0c:	681d      	ldr	r5, [r3, #0]
	switch (baudrate) {
    1e0e:	680b      	ldr	r3, [r1, #0]
    1e10:	42b3      	cmp	r3, r6
    1e12:	d06b      	beq.n	1eec <uarte_nrfx_configure+0x110>
    1e14:	d827      	bhi.n	1e66 <uarte_nrfx_configure+0x8a>
    1e16:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1e1a:	d061      	beq.n	1ee0 <uarte_nrfx_configure+0x104>
    1e1c:	d812      	bhi.n	1e44 <uarte_nrfx_configure+0x68>
    1e1e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1e22:	d04d      	beq.n	1ec0 <uarte_nrfx_configure+0xe4>
    1e24:	d805      	bhi.n	1e32 <uarte_nrfx_configure+0x56>
    1e26:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1e2a:	d074      	beq.n	1f16 <uarte_nrfx_configure+0x13a>
		return -ENOTSUP;
    1e2c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1e30:	e052      	b.n	1ed8 <uarte_nrfx_configure+0xfc>
	switch (baudrate) {
    1e32:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1e36:	d050      	beq.n	1eda <uarte_nrfx_configure+0xfe>
    1e38:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1e3c:	d1f6      	bne.n	1e2c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1e3e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1e42:	e03f      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1e44:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1e48:	d04c      	beq.n	1ee4 <uarte_nrfx_configure+0x108>
    1e4a:	d804      	bhi.n	1e56 <uarte_nrfx_configure+0x7a>
    1e4c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1e50:	d1ec      	bne.n	1e2c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1e52:	4b32      	ldr	r3, [pc, #200]	; (1f1c <uarte_nrfx_configure+0x140>)
    1e54:	e036      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1e56:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1e5a:	d045      	beq.n	1ee8 <uarte_nrfx_configure+0x10c>
    1e5c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1e60:	d1e4      	bne.n	1e2c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1e62:	4b2f      	ldr	r3, [pc, #188]	; (1f20 <uarte_nrfx_configure+0x144>)
    1e64:	e02e      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1e66:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1e6a:	d048      	beq.n	1efe <uarte_nrfx_configure+0x122>
    1e6c:	d812      	bhi.n	1e94 <uarte_nrfx_configure+0xb8>
    1e6e:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    1e72:	42b3      	cmp	r3, r6
    1e74:	d03d      	beq.n	1ef2 <uarte_nrfx_configure+0x116>
    1e76:	d805      	bhi.n	1e84 <uarte_nrfx_configure+0xa8>
    1e78:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    1e7c:	d1d6      	bne.n	1e2c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1e7e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1e82:	e01f      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1e84:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1e88:	d036      	beq.n	1ef8 <uarte_nrfx_configure+0x11c>
    1e8a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1e8e:	d1cd      	bne.n	1e2c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1e90:	4b24      	ldr	r3, [pc, #144]	; (1f24 <uarte_nrfx_configure+0x148>)
    1e92:	e017      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1e94:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1e98:	d037      	beq.n	1f0a <uarte_nrfx_configure+0x12e>
    1e9a:	d808      	bhi.n	1eae <uarte_nrfx_configure+0xd2>
    1e9c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1ea0:	d030      	beq.n	1f04 <uarte_nrfx_configure+0x128>
    1ea2:	4e21      	ldr	r6, [pc, #132]	; (1f28 <uarte_nrfx_configure+0x14c>)
    1ea4:	42b3      	cmp	r3, r6
    1ea6:	d1c1      	bne.n	1e2c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1ea8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1eac:	e00a      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    1eae:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1eb2:	d02d      	beq.n	1f10 <uarte_nrfx_configure+0x134>
    1eb4:	4e1d      	ldr	r6, [pc, #116]	; (1f2c <uarte_nrfx_configure+0x150>)
    1eb6:	42b3      	cmp	r3, r6
    1eb8:	d1b8      	bne.n	1e2c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1eba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1ebe:	e001      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
    1ec0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1ec4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

	get_dev_data(dev)->uart_config = *cfg;
    1ec8:	6883      	ldr	r3, [r0, #8]
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
    1eca:	4322      	orrs	r2, r4
    1ecc:	c903      	ldmia	r1, {r0, r1}
    1ece:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1ed2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1ed6:	2000      	movs	r0, #0
}
    1ed8:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1eda:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1ede:	e7f1      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1ee0:	4b13      	ldr	r3, [pc, #76]	; (1f30 <uarte_nrfx_configure+0x154>)
    1ee2:	e7ef      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1ee4:	4b13      	ldr	r3, [pc, #76]	; (1f34 <uarte_nrfx_configure+0x158>)
    1ee6:	e7ed      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1ee8:	4b13      	ldr	r3, [pc, #76]	; (1f38 <uarte_nrfx_configure+0x15c>)
    1eea:	e7eb      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1eec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1ef0:	e7e8      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1ef2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1ef6:	e7e5      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1ef8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1efc:	e7e2      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1efe:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1f02:	e7df      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1f04:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1f08:	e7dc      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1f0a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1f0e:	e7d9      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1f10:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1f14:	e7d6      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
    1f16:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1f1a:	e7d3      	b.n	1ec4 <uarte_nrfx_configure+0xe8>
    1f1c:	00275000 	.word	0x00275000
    1f20:	0075c000 	.word	0x0075c000
    1f24:	013a9000 	.word	0x013a9000
    1f28:	0003d090 	.word	0x0003d090
    1f2c:	000f4240 	.word	0x000f4240
    1f30:	0013b000 	.word	0x0013b000
    1f34:	003af000 	.word	0x003af000
    1f38:	004ea000 	.word	0x004ea000

00001f3c <uarte_0_init>:
	return dev->config->config_info;
    1f3c:	6802      	ldr	r2, [r0, #0]
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
    1f3e:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    1f40:	6892      	ldr	r2, [r2, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1f42:	4b18      	ldr	r3, [pc, #96]	; (1fa4 <uarte_0_init+0x68>)
    1f44:	6814      	ldr	r4, [r2, #0]
    1f46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1f4a:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1f4c:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
    1f4e:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
    1f50:	261d      	movs	r6, #29
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1f52:	2200      	movs	r2, #0
    1f54:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
    1f58:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    1f5c:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    1f60:	261c      	movs	r6, #28
    1f62:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
    1f66:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    1f6a:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1f6c:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
    1f70:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
    1f74:	231b      	movs	r3, #27
    1f76:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1f7a:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1f7c:	4629      	mov	r1, r5
    1f7e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    1f82:	f7ff ff2b 	bl	1ddc <uarte_nrfx_configure>
	if (err) {
    1f86:	b958      	cbnz	r0, 1fa0 <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1f88:	2308      	movs	r3, #8
    1f8a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1f8e:	441d      	add	r5, r3
__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1f90:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f92:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1f96:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1f9a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1f9e:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
    1fa0:	bd70      	pop	{r4, r5, r6, pc}
    1fa2:	bf00      	nop
    1fa4:	50842500 	.word	0x50842500

00001fa8 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
    1fa8:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    1faa:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    1fac:	4b08      	ldr	r3, [pc, #32]	; (1fd0 <z_sys_device_do_config_level+0x28>)
    1fae:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1fb2:	3001      	adds	r0, #1
    1fb4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    1fb8:	42a5      	cmp	r5, r4
    1fba:	d800      	bhi.n	1fbe <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
    1fbc:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    1fbe:	6823      	ldr	r3, [r4, #0]
    1fc0:	4620      	mov	r0, r4
    1fc2:	685b      	ldr	r3, [r3, #4]
    1fc4:	4798      	blx	r3
		if (retval != 0) {
    1fc6:	b100      	cbz	r0, 1fca <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
    1fc8:	6066      	str	r6, [r4, #4]
								info++) {
    1fca:	340c      	adds	r4, #12
    1fcc:	e7f4      	b.n	1fb8 <z_sys_device_do_config_level+0x10>
    1fce:	bf00      	nop
    1fd0:	00003684 	.word	0x00003684

00001fd4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    1fd4:	4b10      	ldr	r3, [pc, #64]	; (2018 <z_impl_device_get_binding+0x44>)
{
    1fd6:	b570      	push	{r4, r5, r6, lr}
    1fd8:	4605      	mov	r5, r0
    1fda:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    1fdc:	4c0f      	ldr	r4, [pc, #60]	; (201c <z_impl_device_get_binding+0x48>)
    1fde:	429c      	cmp	r4, r3
    1fe0:	d104      	bne.n	1fec <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    1fe2:	4c0e      	ldr	r4, [pc, #56]	; (201c <z_impl_device_get_binding+0x48>)
    1fe4:	42b4      	cmp	r4, r6
    1fe6:	d109      	bne.n	1ffc <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    1fe8:	2400      	movs	r4, #0
    1fea:	e012      	b.n	2012 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    1fec:	6862      	ldr	r2, [r4, #4]
    1fee:	b11a      	cbz	r2, 1ff8 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    1ff0:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    1ff2:	6812      	ldr	r2, [r2, #0]
    1ff4:	42aa      	cmp	r2, r5
    1ff6:	d00c      	beq.n	2012 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    1ff8:	340c      	adds	r4, #12
    1ffa:	e7f0      	b.n	1fde <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    1ffc:	6863      	ldr	r3, [r4, #4]
    1ffe:	b90b      	cbnz	r3, 2004 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    2000:	340c      	adds	r4, #12
    2002:	e7ef      	b.n	1fe4 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    2004:	6823      	ldr	r3, [r4, #0]
    2006:	4628      	mov	r0, r5
    2008:	6819      	ldr	r1, [r3, #0]
    200a:	f000 fec8 	bl	2d9e <strcmp>
    200e:	2800      	cmp	r0, #0
    2010:	d1f6      	bne.n	2000 <z_impl_device_get_binding+0x2c>
}
    2012:	4620      	mov	r0, r4
    2014:	bd70      	pop	{r4, r5, r6, pc}
    2016:	bf00      	nop
    2018:	20000f34 	.word	0x20000f34
    201c:	20000ec8 	.word	0x20000ec8

00002020 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    2020:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    2022:	4d0b      	ldr	r5, [pc, #44]	; (2050 <idle+0x30>)
    2024:	f04f 0220 	mov.w	r2, #32
    2028:	f3ef 8311 	mrs	r3, BASEPRI
    202c:	f382 8811 	msr	BASEPRI, r2
    2030:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    2034:	f001 f8b4 	bl	31a0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2038:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    203a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    203c:	2802      	cmp	r0, #2
    203e:	bfd8      	it	le
    2040:	4608      	movle	r0, r1
    2042:	f001 f8bd 	bl	31c0 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    2046:	622c      	str	r4, [r5, #32]
	k_cpu_idle();
    2048:	f7fe ffba 	bl	fc0 <k_cpu_idle>
    204c:	e7ea      	b.n	2024 <idle+0x4>
    204e:	bf00      	nop
    2050:	2000011c 	.word	0x2000011c

00002054 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(&__bss_start, 0,
    2054:	4802      	ldr	r0, [pc, #8]	; (2060 <z_bss_zero+0xc>)
    2056:	4a03      	ldr	r2, [pc, #12]	; (2064 <z_bss_zero+0x10>)
    2058:	2100      	movs	r1, #0
    205a:	1a12      	subs	r2, r2, r0
    205c:	f000 bed9 	b.w	2e12 <memset>
    2060:	20000000 	.word	0x20000000
    2064:	20000164 	.word	0x20000164

00002068 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    2068:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    206a:	4806      	ldr	r0, [pc, #24]	; (2084 <z_data_copy+0x1c>)
    206c:	4a06      	ldr	r2, [pc, #24]	; (2088 <z_data_copy+0x20>)
    206e:	4907      	ldr	r1, [pc, #28]	; (208c <z_data_copy+0x24>)
    2070:	1a12      	subs	r2, r2, r0
    2072:	f000 fea1 	bl	2db8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 ((u32_t) &_app_smem_end - (u32_t) &_app_smem_start));
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    2076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    207a:	4a05      	ldr	r2, [pc, #20]	; (2090 <z_data_copy+0x28>)
    207c:	4905      	ldr	r1, [pc, #20]	; (2094 <z_data_copy+0x2c>)
    207e:	4806      	ldr	r0, [pc, #24]	; (2098 <z_data_copy+0x30>)
    2080:	f000 be9a 	b.w	2db8 <memcpy>
    2084:	20000ea8 	.word	0x20000ea8
    2088:	20000f48 	.word	0x20000f48
    208c:	00003e9c 	.word	0x00003e9c
    2090:	00000000 	.word	0x00000000
    2094:	00003e9c 	.word	0x00003e9c
    2098:	20000000 	.word	0x20000000

0000209c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    209c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    209e:	2002      	movs	r0, #2
    20a0:	f7ff ff82 	bl	1fa8 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    20a4:	4807      	ldr	r0, [pc, #28]	; (20c4 <bg_thread_main+0x28>)
    20a6:	f000 fde6 	bl	2c76 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    20aa:	2003      	movs	r0, #3
    20ac:	f7ff ff7c 	bl	1fa8 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    20b0:	f000 fa9a 	bl	25e8 <z_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    20b4:	f000 fbea 	bl	288c <main>

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    20b8:	4a03      	ldr	r2, [pc, #12]	; (20c8 <bg_thread_main+0x2c>)
    20ba:	7b13      	ldrb	r3, [r2, #12]
    20bc:	f023 0301 	bic.w	r3, r3, #1
    20c0:	7313      	strb	r3, [r2, #12]
}
    20c2:	bd08      	pop	{r3, pc}
    20c4:	00003e63 	.word	0x00003e63
    20c8:	200000b0 	.word	0x200000b0

000020cc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    20cc:	b580      	push	{r7, lr}
#if defined(CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT) && \
	defined(CONFIG_USERSPACE)
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack) +
			    CONFIG_ISR_STACK_SIZE - MPU_GUARD_ALIGN_AND_SIZE);
#else
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack) +
    20ce:	4b41      	ldr	r3, [pc, #260]	; (21d4 <z_cstart+0x108>)
    20d0:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    20d2:	f383 8808 	msr	MSP, r3
    20d6:	2400      	movs	r4, #0
    20d8:	22e0      	movs	r2, #224	; 0xe0
    20da:	4b3f      	ldr	r3, [pc, #252]	; (21d8 <z_cstart+0x10c>)

	/* perform any architecture-specific initialization */
	kernel_arch_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    20dc:	2701      	movs	r7, #1
    20de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    20e2:	77dc      	strb	r4, [r3, #31]
    20e4:	761c      	strb	r4, [r3, #24]
    20e6:	765c      	strb	r4, [r3, #25]
    20e8:	769c      	strb	r4, [r3, #26]
    20ea:	76dc      	strb	r4, [r3, #27]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    20ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    20ee:	4e3b      	ldr	r6, [pc, #236]	; (21dc <z_cstart+0x110>)
    20f0:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    20f4:	625a      	str	r2, [r3, #36]	; 0x24
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    20f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	_kernel.ready_q.cache = _main_thread;
    20f8:	4d39      	ldr	r5, [pc, #228]	; (21e0 <z_cstart+0x114>)
    20fa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    20fe:	625a      	str	r2, [r3, #36]	; 0x24
	SCB->BFAR = 0;
    2100:	639c      	str	r4, [r3, #56]	; 0x38
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
    2102:	68da      	ldr	r2, [r3, #12]
    2104:	b292      	uxth	r2, r2
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
    2106:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    210a:	f442 3208 	orr.w	r2, r2, #139264	; 0x22000
	SCB->AIRCR =
    210e:	60da      	str	r2, [r3, #12]

static ALWAYS_INLINE void kernel_arch_init(void)
{
	z_InterruptStackSetup();
	z_ExcSetup();
	z_FaultInit();
    2110:	f7ff f97c 	bl	140c <z_FaultInit>
	z_CpuIdleInit();
    2114:	f7fe ff4e 	bl	fb4 <z_CpuIdleInit>
	struct k_thread dummy_thread = {
    2118:	ab07      	add	r3, sp, #28
    211a:	4621      	mov	r1, r4
    211c:	226c      	movs	r2, #108	; 0x6c
    211e:	4618      	mov	r0, r3
    2120:	f000 fe77 	bl	2e12 <memset>
	_current = &dummy_thread;
    2124:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2126:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
    2128:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    212c:	f7ff ff3c 	bl	1fa8 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2130:	4638      	mov	r0, r7
    2132:	f7ff ff39 	bl	1fa8 <z_sys_device_do_config_level>
	z_sched_init();
    2136:	f000 f9ef 	bl	2518 <z_sched_init>
	z_setup_new_thread(_main_thread, _main_stack,
    213a:	4b2a      	ldr	r3, [pc, #168]	; (21e4 <z_cstart+0x118>)
	_kernel.ready_q.cache = _main_thread;
    213c:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(_main_thread, _main_stack,
    213e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2142:	e9cd 7304 	strd	r7, r3, [sp, #16]
    2146:	e9cd 4402 	strd	r4, r4, [sp, #8]
    214a:	e9cd 4400 	strd	r4, r4, [sp]
    214e:	4b26      	ldr	r3, [pc, #152]	; (21e8 <z_cstart+0x11c>)
    2150:	4926      	ldr	r1, [pc, #152]	; (21ec <z_cstart+0x120>)
    2152:	4628      	mov	r0, r5
    2154:	f000 fa2e 	bl	25b4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2158:	7b6b      	ldrb	r3, [r5, #13]
    215a:	4634      	mov	r4, r6
    215c:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2160:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2164:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2166:	d104      	bne.n	2172 <z_cstart+0xa6>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    2168:	69ab      	ldr	r3, [r5, #24]
    216a:	b913      	cbnz	r3, 2172 <z_cstart+0xa6>
		z_add_thread_to_ready_q(thread);
    216c:	4628      	mov	r0, r5
    216e:	f000 f901 	bl	2374 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    2172:	4b1f      	ldr	r3, [pc, #124]	; (21f0 <z_cstart+0x124>)
    2174:	2201      	movs	r2, #1
    2176:	9305      	str	r3, [sp, #20]
    2178:	230f      	movs	r3, #15
    217a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    217e:	2300      	movs	r3, #0
    2180:	4e1c      	ldr	r6, [pc, #112]	; (21f4 <z_cstart+0x128>)
    2182:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2186:	491c      	ldr	r1, [pc, #112]	; (21f8 <z_cstart+0x12c>)
    2188:	4630      	mov	r0, r6
    218a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    218e:	9300      	str	r3, [sp, #0]
    2190:	4b1a      	ldr	r3, [pc, #104]	; (21fc <z_cstart+0x130>)
    2192:	f000 fa0f 	bl	25b4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2196:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[0].idle_thread = _idle_thread;
    2198:	60e6      	str	r6, [r4, #12]
    219a:	f023 0304 	bic.w	r3, r3, #4
    219e:	7373      	strb	r3, [r6, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    21a0:	4b17      	ldr	r3, [pc, #92]	; (2200 <z_cstart+0x134>)
	list->tail = (sys_dnode_t *)list;
    21a2:	e9c4 3306 	strd	r3, r3, [r4, #24]
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arch_configure_static_mpu_regions();
    21a6:	f7ff fa4f 	bl	1648 <z_arch_configure_static_mpu_regions>
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arch_configure_dynamic_mpu_regions(main_thread);
    21aa:	480d      	ldr	r0, [pc, #52]	; (21e0 <z_cstart+0x114>)
	_current = main_thread;
    21ac:	60a5      	str	r5, [r4, #8]
	z_arch_configure_dynamic_mpu_regions(main_thread);
    21ae:	f000 fdee 	bl	2d8e <z_arch_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    21b2:	4b0d      	ldr	r3, [pc, #52]	; (21e8 <z_cstart+0x11c>)
    21b4:	4a13      	ldr	r2, [pc, #76]	; (2204 <z_cstart+0x138>)
    21b6:	4618      	mov	r0, r3
    21b8:	f382 8809 	msr	PSP, r2
    21bc:	b663      	cpsie	if
    21be:	f04f 0100 	mov.w	r1, #0
    21c2:	f381 8811 	msr	BASEPRI, r1
    21c6:	f3bf 8f6f 	isb	sy
    21ca:	2100      	movs	r1, #0
    21cc:	2200      	movs	r2, #0
    21ce:	2300      	movs	r3, #0
    21d0:	f000 fbdb 	bl	298a <z_thread_entry>
    21d4:	20000ea8 	.word	0x20000ea8
    21d8:	e000ed00 	.word	0xe000ed00
    21dc:	2000011c 	.word	0x2000011c
    21e0:	200000b0 	.word	0x200000b0
    21e4:	00003e90 	.word	0x00003e90
    21e8:	0000209d 	.word	0x0000209d
    21ec:	20000168 	.word	0x20000168
    21f0:	00003e95 	.word	0x00003e95
    21f4:	20000044 	.word	0x20000044
    21f8:	20000568 	.word	0x20000568
    21fc:	00002021 	.word	0x00002021
    2200:	20000134 	.word	0x20000134
    2204:	20000568 	.word	0x20000568

00002208 <resched>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2208:	f3ef 8005 	mrs	r0, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    220c:	280d      	cmp	r0, #13
    220e:	d809      	bhi.n	2224 <resched+0x1c>
    2210:	b128      	cbz	r0, 221e <resched+0x16>
    2212:	4b05      	ldr	r3, [pc, #20]	; (2228 <resched+0x20>)
    2214:	6858      	ldr	r0, [r3, #4]
    2216:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    221a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	}
	_current_cpu->swap_ok = 0;
#endif

	return !z_is_in_isr();
}
    221e:	f080 0001 	eor.w	r0, r0, #1
    2222:	4770      	bx	lr
    2224:	2001      	movs	r0, #1
    2226:	e7fa      	b.n	221e <resched+0x16>
    2228:	e000ed00 	.word	0xe000ed00

0000222c <reset_time_slice>:
{
    222c:	b508      	push	{r3, lr}
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    222e:	f7fe fcd7 	bl	be0 <z_clock_elapsed>
    2232:	4b05      	ldr	r3, [pc, #20]	; (2248 <reset_time_slice+0x1c>)
    2234:	4a05      	ldr	r2, [pc, #20]	; (224c <reset_time_slice+0x20>)
    2236:	681b      	ldr	r3, [r3, #0]
	z_set_timeout_expiry(slice_time, false);
    2238:	2100      	movs	r1, #0
	_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    223a:	4418      	add	r0, r3
    223c:	6110      	str	r0, [r2, #16]
	z_set_timeout_expiry(slice_time, false);
    223e:	4618      	mov	r0, r3
}
    2240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_set_timeout_expiry(slice_time, false);
    2244:	f000 bfbc 	b.w	31c0 <z_set_timeout_expiry>
    2248:	20000154 	.word	0x20000154
    224c:	2000011c 	.word	0x2000011c

00002250 <k_sched_time_slice_set>:
{
    2250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2252:	460d      	mov	r5, r1
    2254:	f04f 0320 	mov.w	r3, #32
    2258:	f3ef 8411 	mrs	r4, BASEPRI
    225c:	f383 8811 	msr	BASEPRI, r3
    2260:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_SYS_CLOCK_EXISTS

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction(
    2264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2268:	2700      	movs	r7, #0
		_current_cpu->slice_ticks = 0;
    226a:	2200      	movs	r2, #0
    226c:	4e0b      	ldr	r6, [pc, #44]	; (229c <k_sched_time_slice_set+0x4c>)
    226e:	4b0c      	ldr	r3, [pc, #48]	; (22a0 <k_sched_time_slice_set+0x50>)
    2270:	fbc1 6700 	smlal	r6, r7, r1, r0
    2274:	611a      	str	r2, [r3, #16]
    2276:	4630      	mov	r0, r6
    2278:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    227c:	2300      	movs	r3, #0
    227e:	4639      	mov	r1, r7
    2280:	f7fd ff60 	bl	144 <__aeabi_ldivmod>
    2284:	4b07      	ldr	r3, [pc, #28]	; (22a4 <k_sched_time_slice_set+0x54>)
    2286:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    2288:	4b07      	ldr	r3, [pc, #28]	; (22a8 <k_sched_time_slice_set+0x58>)
    228a:	601d      	str	r5, [r3, #0]
		reset_time_slice();
    228c:	f7ff ffce 	bl	222c <reset_time_slice>
	__asm__ volatile(
    2290:	f384 8811 	msr	BASEPRI, r4
    2294:	f3bf 8f6f 	isb	sy
}
    2298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    229a:	bf00      	nop
    229c:	0004ffff 	.word	0x0004ffff
    22a0:	2000011c 	.word	0x2000011c
    22a4:	20000154 	.word	0x20000154
    22a8:	20000150 	.word	0x20000150

000022ac <k_sched_lock>:
	__asm__ volatile(
    22ac:	f04f 0320 	mov.w	r3, #32
    22b0:	f3ef 8111 	mrs	r1, BASEPRI
    22b4:	f383 8811 	msr	BASEPRI, r3
    22b8:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    22bc:	4b04      	ldr	r3, [pc, #16]	; (22d0 <CONFIG_NRF_CLOUD_PORT+0x1d>)
    22be:	689a      	ldr	r2, [r3, #8]
    22c0:	7bd3      	ldrb	r3, [r2, #15]
    22c2:	3b01      	subs	r3, #1
    22c4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    22c6:	f381 8811 	msr	BASEPRI, r1
    22ca:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    22ce:	4770      	bx	lr
    22d0:	2000011c 	.word	0x2000011c

000022d4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    22d4:	4b09      	ldr	r3, [pc, #36]	; (22fc <z_priq_dumb_remove+0x28>)
    22d6:	f103 0228 	add.w	r2, r3, #40	; 0x28
    22da:	4282      	cmp	r2, r0
    22dc:	d105      	bne.n	22ea <z_priq_dumb_remove+0x16>
    22de:	689b      	ldr	r3, [r3, #8]
    22e0:	428b      	cmp	r3, r1
    22e2:	d102      	bne.n	22ea <z_priq_dumb_remove+0x16>
    22e4:	7b4b      	ldrb	r3, [r1, #13]
    22e6:	06db      	lsls	r3, r3, #27
    22e8:	d107      	bne.n	22fa <z_priq_dumb_remove+0x26>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    22ea:	e9d1 2300 	ldrd	r2, r3, [r1]
    22ee:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    22f0:	680a      	ldr	r2, [r1, #0]
    22f2:	6053      	str	r3, [r2, #4]
	node->next = NULL;
    22f4:	2300      	movs	r3, #0
	node->prev = NULL;
    22f6:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!is_idle(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    22fa:	4770      	bx	lr
    22fc:	2000011c 	.word	0x2000011c

00002300 <update_cache>:
{
    2300:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    2302:	4c0d      	ldr	r4, [pc, #52]	; (2338 <update_cache+0x38>)
{
    2304:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    2306:	f104 0028 	add.w	r0, r4, #40	; 0x28
    230a:	f000 fecc 	bl	30a6 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    230e:	4605      	mov	r5, r0
    2310:	b900      	cbnz	r0, 2314 <update_cache+0x14>
    2312:	68e5      	ldr	r5, [r4, #12]
    2314:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
    2316:	b94a      	cbnz	r2, 232c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    2318:	7b5a      	ldrb	r2, [r3, #13]
    231a:	06d2      	lsls	r2, r2, #27
    231c:	d106      	bne.n	232c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    231e:	69aa      	ldr	r2, [r5, #24]
    2320:	b922      	cbnz	r2, 232c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    2322:	89da      	ldrh	r2, [r3, #14]
    2324:	2a7f      	cmp	r2, #127	; 0x7f
    2326:	d901      	bls.n	232c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    2328:	6263      	str	r3, [r4, #36]	; 0x24
}
    232a:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    232c:	429d      	cmp	r5, r3
    232e:	d001      	beq.n	2334 <update_cache+0x34>
			reset_time_slice();
    2330:	f7ff ff7c 	bl	222c <reset_time_slice>
		_kernel.ready_q.cache = th;
    2334:	6265      	str	r5, [r4, #36]	; 0x24
}
    2336:	e7f8      	b.n	232a <update_cache+0x2a>
    2338:	2000011c 	.word	0x2000011c

0000233c <k_sched_unlock>:
{
    233c:	b510      	push	{r4, lr}
	__asm__ volatile(
    233e:	f04f 0320 	mov.w	r3, #32
    2342:	f3ef 8411 	mrs	r4, BASEPRI
    2346:	f383 8811 	msr	BASEPRI, r3
    234a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    234e:	4b08      	ldr	r3, [pc, #32]	; (2370 <k_sched_unlock+0x34>)
		update_cache(1);
    2350:	2001      	movs	r0, #1
		++_current->base.sched_locked;
    2352:	689a      	ldr	r2, [r3, #8]
    2354:	7bd3      	ldrb	r3, [r2, #15]
    2356:	3301      	adds	r3, #1
    2358:	73d3      	strb	r3, [r2, #15]
		update_cache(1);
    235a:	f7ff ffd1 	bl	2300 <update_cache>
	__asm__ volatile(
    235e:	f384 8811 	msr	BASEPRI, r4
    2362:	f3bf 8f6f 	isb	sy
}
    2366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    236a:	f000 be92 	b.w	3092 <z_reschedule_unlocked>
    236e:	bf00      	nop
    2370:	2000011c 	.word	0x2000011c

00002374 <z_add_thread_to_ready_q>:
{
    2374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2376:	f04f 0320 	mov.w	r3, #32
    237a:	f3ef 8411 	mrs	r4, BASEPRI
    237e:	f383 8811 	msr	BASEPRI, r3
    2382:	f3bf 8f6f 	isb	sy
	return list->head == list;
    2386:	4a16      	ldr	r2, [pc, #88]	; (23e0 <z_add_thread_to_ready_q+0x6c>)
    2388:	4611      	mov	r1, r2
    238a:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    238e:	428b      	cmp	r3, r1
    2390:	d00c      	beq.n	23ac <z_add_thread_to_ready_q+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2392:	b15b      	cbz	r3, 23ac <z_add_thread_to_ready_q+0x38>
    2394:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    2396:	f990 500e 	ldrsb.w	r5, [r0, #14]
    239a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    239e:	42af      	cmp	r7, r5
    23a0:	dc0b      	bgt.n	23ba <z_add_thread_to_ready_q+0x46>
	return (node == list->tail) ? NULL : node->next;
    23a2:	42b3      	cmp	r3, r6
    23a4:	d002      	beq.n	23ac <z_add_thread_to_ready_q+0x38>
    23a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    23a8:	2b00      	cmp	r3, #0
    23aa:	d1f6      	bne.n	239a <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    23ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    23ae:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    23b0:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    23b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    23b4:	6018      	str	r0, [r3, #0]
	list->tail = node;
    23b6:	62d0      	str	r0, [r2, #44]	; 0x2c
    23b8:	e005      	b.n	23c6 <z_add_thread_to_ready_q+0x52>
	node->prev = successor->prev;
    23ba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    23bc:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    23c0:	685a      	ldr	r2, [r3, #4]
    23c2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    23c4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    23c6:	7b43      	ldrb	r3, [r0, #13]
    23c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    23cc:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    23ce:	2000      	movs	r0, #0
    23d0:	f7ff ff96 	bl	2300 <update_cache>
	__asm__ volatile(
    23d4:	f384 8811 	msr	BASEPRI, r4
    23d8:	f3bf 8f6f 	isb	sy
}
    23dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23de:	bf00      	nop
    23e0:	2000011c 	.word	0x2000011c

000023e4 <z_move_thread_to_end_of_prio_q>:
{
    23e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23e6:	4604      	mov	r4, r0
	__asm__ volatile(
    23e8:	f04f 0320 	mov.w	r3, #32
    23ec:	f3ef 8611 	mrs	r6, BASEPRI
    23f0:	f383 8811 	msr	BASEPRI, r3
    23f4:	f3bf 8f6f 	isb	sy
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    23f8:	4f19      	ldr	r7, [pc, #100]	; (2460 <z_move_thread_to_end_of_prio_q+0x7c>)
    23fa:	4601      	mov	r1, r0
    23fc:	f107 0528 	add.w	r5, r7, #40	; 0x28
    2400:	4628      	mov	r0, r5
    2402:	f7ff ff67 	bl	22d4 <z_priq_dumb_remove>
	return list->head == list;
    2406:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2408:	463a      	mov	r2, r7
	return sys_dlist_is_empty(list) ? NULL : list->head;
    240a:	42ab      	cmp	r3, r5
    240c:	d00c      	beq.n	2428 <z_move_thread_to_end_of_prio_q+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    240e:	b15b      	cbz	r3, 2428 <z_move_thread_to_end_of_prio_q+0x44>
    2410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    2412:	f994 100e 	ldrsb.w	r1, [r4, #14]
    2416:	f993 700e 	ldrsb.w	r7, [r3, #14]
    241a:	428f      	cmp	r7, r1
    241c:	dc0b      	bgt.n	2436 <z_move_thread_to_end_of_prio_q+0x52>
	return (node == list->tail) ? NULL : node->next;
    241e:	4283      	cmp	r3, r0
    2420:	d002      	beq.n	2428 <z_move_thread_to_end_of_prio_q+0x44>
    2422:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2424:	2b00      	cmp	r3, #0
    2426:	d1f6      	bne.n	2416 <z_move_thread_to_end_of_prio_q+0x32>
	node->prev = list->tail;
    2428:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    242a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    242c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    242e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2430:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2432:	62d4      	str	r4, [r2, #44]	; 0x2c
    2434:	e005      	b.n	2442 <z_move_thread_to_end_of_prio_q+0x5e>
	node->prev = successor->prev;
    2436:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2438:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    243c:	6859      	ldr	r1, [r3, #4]
    243e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2440:	605c      	str	r4, [r3, #4]
    2442:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    2444:	6890      	ldr	r0, [r2, #8]
    2446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    244a:	7363      	strb	r3, [r4, #13]
    244c:	1b03      	subs	r3, r0, r4
    244e:	4258      	negs	r0, r3
    2450:	4158      	adcs	r0, r3
    2452:	f7ff ff55 	bl	2300 <update_cache>
	__asm__ volatile(
    2456:	f386 8811 	msr	BASEPRI, r6
    245a:	f3bf 8f6f 	isb	sy
}
    245e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2460:	2000011c 	.word	0x2000011c

00002464 <z_time_slice>:
	if (pending_current == _current) {
    2464:	4914      	ldr	r1, [pc, #80]	; (24b8 <z_time_slice+0x54>)
    2466:	4a15      	ldr	r2, [pc, #84]	; (24bc <z_time_slice+0x58>)
{
    2468:	b510      	push	{r4, lr}
	if (pending_current == _current) {
    246a:	688b      	ldr	r3, [r1, #8]
    246c:	6814      	ldr	r4, [r2, #0]
    246e:	42a3      	cmp	r3, r4
    2470:	d103      	bne.n	247a <z_time_slice+0x16>
}
    2472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			reset_time_slice();
    2476:	f7ff bed9 	b.w	222c <reset_time_slice>
	pending_current = NULL;
    247a:	2400      	movs	r4, #0
    247c:	6014      	str	r4, [r2, #0]
	if (slice_time && sliceable(_current)) {
    247e:	4a10      	ldr	r2, [pc, #64]	; (24c0 <z_time_slice+0x5c>)
    2480:	6812      	ldr	r2, [r2, #0]
    2482:	b1ba      	cbz	r2, 24b4 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
    2484:	89da      	ldrh	r2, [r3, #14]
    2486:	2a7f      	cmp	r2, #127	; 0x7f
    2488:	d814      	bhi.n	24b4 <z_time_slice+0x50>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    248a:	4a0e      	ldr	r2, [pc, #56]	; (24c4 <z_time_slice+0x60>)
    248c:	f993 400e 	ldrsb.w	r4, [r3, #14]
    2490:	6812      	ldr	r2, [r2, #0]
    2492:	4294      	cmp	r4, r2
    2494:	db0e      	blt.n	24b4 <z_time_slice+0x50>
	return thread == _idle_thread;
    2496:	4a0c      	ldr	r2, [pc, #48]	; (24c8 <z_time_slice+0x64>)
		&& !is_idle(t)
    2498:	6812      	ldr	r2, [r2, #0]
    249a:	4293      	cmp	r3, r2
    249c:	d00a      	beq.n	24b4 <z_time_slice+0x50>
		&& !z_is_thread_timeout_active(t);
    249e:	699a      	ldr	r2, [r3, #24]
    24a0:	b942      	cbnz	r2, 24b4 <z_time_slice+0x50>
		if (ticks >= _current_cpu->slice_ticks) {
    24a2:	690a      	ldr	r2, [r1, #16]
    24a4:	4282      	cmp	r2, r0
    24a6:	dc03      	bgt.n	24b0 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    24a8:	4618      	mov	r0, r3
    24aa:	f7ff ff9b 	bl	23e4 <z_move_thread_to_end_of_prio_q>
    24ae:	e7e0      	b.n	2472 <z_time_slice+0xe>
			_current_cpu->slice_ticks -= ticks;
    24b0:	1a12      	subs	r2, r2, r0
    24b2:	610a      	str	r2, [r1, #16]
}
    24b4:	bd10      	pop	{r4, pc}
    24b6:	bf00      	nop
    24b8:	2000011c 	.word	0x2000011c
    24bc:	2000014c 	.word	0x2000014c
    24c0:	20000154 	.word	0x20000154
    24c4:	20000150 	.word	0x20000150
    24c8:	0000369c 	.word	0x0000369c

000024cc <z_remove_thread_from_ready_q>:
{
    24cc:	b538      	push	{r3, r4, r5, lr}
    24ce:	4604      	mov	r4, r0
	__asm__ volatile(
    24d0:	f04f 0320 	mov.w	r3, #32
    24d4:	f3ef 8511 	mrs	r5, BASEPRI
    24d8:	f383 8811 	msr	BASEPRI, r3
    24dc:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    24e0:	7b43      	ldrb	r3, [r0, #13]
    24e2:	065a      	lsls	r2, r3, #25
    24e4:	d507      	bpl.n	24f6 <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    24e6:	4601      	mov	r1, r0
    24e8:	4809      	ldr	r0, [pc, #36]	; (2510 <z_remove_thread_from_ready_q+0x44>)
    24ea:	f7ff fef3 	bl	22d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    24ee:	7b63      	ldrb	r3, [r4, #13]
    24f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    24f4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    24f6:	4b07      	ldr	r3, [pc, #28]	; (2514 <z_remove_thread_from_ready_q+0x48>)
    24f8:	6898      	ldr	r0, [r3, #8]
    24fa:	1b03      	subs	r3, r0, r4
    24fc:	4258      	negs	r0, r3
    24fe:	4158      	adcs	r0, r3
    2500:	f7ff fefe 	bl	2300 <update_cache>
	__asm__ volatile(
    2504:	f385 8811 	msr	BASEPRI, r5
    2508:	f3bf 8f6f 	isb	sy
}
    250c:	bd38      	pop	{r3, r4, r5, pc}
    250e:	bf00      	nop
    2510:	20000144 	.word	0x20000144
    2514:	2000011c 	.word	0x2000011c

00002518 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2518:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    251a:	4b04      	ldr	r3, [pc, #16]	; (252c <z_sched_init+0x14>)
    251c:	4608      	mov	r0, r1
    251e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2522:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2526:	f7ff be93 	b.w	2250 <k_sched_time_slice_set>
    252a:	bf00      	nop
    252c:	2000011c 	.word	0x2000011c

00002530 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    2530:	4b01      	ldr	r3, [pc, #4]	; (2538 <z_impl_k_current_get+0x8>)
    2532:	6898      	ldr	r0, [r3, #8]
    2534:	4770      	bx	lr
    2536:	bf00      	nop
    2538:	2000011c 	.word	0x2000011c

0000253c <k_is_in_isr>:
    253c:	f3ef 8005 	mrs	r0, IPSR
    2540:	280d      	cmp	r0, #13
    2542:	d807      	bhi.n	2554 <k_is_in_isr+0x18>
    2544:	b138      	cbz	r0, 2556 <k_is_in_isr+0x1a>
    2546:	4b04      	ldr	r3, [pc, #16]	; (2558 <k_is_in_isr+0x1c>)
    2548:	6858      	ldr	r0, [r3, #4]
    254a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    254e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    2552:	4770      	bx	lr
    2554:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_is_in_isr();
}
    2556:	4770      	bx	lr
    2558:	e000ed00 	.word	0xe000ed00

0000255c <z_is_thread_essential>:
 *
 * Returns true if current thread is essential, false if it is not.
 */
bool z_is_thread_essential(void)
{
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
    255c:	4b02      	ldr	r3, [pc, #8]	; (2568 <z_is_thread_essential+0xc>)
    255e:	689b      	ldr	r3, [r3, #8]
    2560:	7b18      	ldrb	r0, [r3, #12]
}
    2562:	f000 0001 	and.w	r0, r0, #1
    2566:	4770      	bx	lr
    2568:	2000011c 	.word	0x2000011c

0000256c <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    256c:	b510      	push	{r4, lr}
    256e:	4602      	mov	r2, r0
	__asm__ volatile(
    2570:	f04f 0320 	mov.w	r3, #32
    2574:	f3ef 8411 	mrs	r4, BASEPRI
    2578:	f383 8811 	msr	BASEPRI, r3
    257c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    2580:	7b43      	ldrb	r3, [r0, #13]
    2582:	0759      	lsls	r1, r3, #29
    2584:	d404      	bmi.n	2590 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    2586:	f384 8811 	msr	BASEPRI, r4
    258a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    258e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2590:	f023 0304 	bic.w	r3, r3, #4
    2594:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    2596:	f000 fdbd 	bl	3114 <z_is_thread_ready>
    259a:	b110      	cbz	r0, 25a2 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    259c:	4610      	mov	r0, r2
    259e:	f7ff fee9 	bl	2374 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    25a2:	4621      	mov	r1, r4
}
    25a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    25a8:	4801      	ldr	r0, [pc, #4]	; (25b0 <z_impl_k_thread_start+0x44>)
    25aa:	f000 bd55 	b.w	3058 <z_reschedule>
    25ae:	bf00      	nop
    25b0:	20000161 	.word	0x20000161

000025b4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    25b4:	b530      	push	{r4, r5, lr}
    25b6:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    25b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    25ba:	4604      	mov	r4, r0
	z_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    25bc:	9504      	str	r5, [sp, #16]
    25be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    25c0:	9503      	str	r5, [sp, #12]
    25c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    25c4:	9502      	str	r5, [sp, #8]
    25c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    25c8:	9501      	str	r5, [sp, #4]
    25ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    25cc:	9500      	str	r5, [sp, #0]
    25ce:	f7fe ff61 	bl	1494 <z_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    25d2:	4b04      	ldr	r3, [pc, #16]	; (25e4 <z_setup_new_thread+0x30>)
    25d4:	689b      	ldr	r3, [r3, #8]
    25d6:	b913      	cbnz	r3, 25de <z_setup_new_thread+0x2a>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    25d8:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    25da:	b007      	add	sp, #28
    25dc:	bd30      	pop	{r4, r5, pc}
	new_thread->resource_pool = _current->resource_pool;
    25de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    25e0:	e7fa      	b.n	25d8 <z_setup_new_thread+0x24>
    25e2:	bf00      	nop
    25e4:	2000011c 	.word	0x2000011c

000025e8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    25e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    25ec:	4e28      	ldr	r6, [pc, #160]	; (2690 <z_init_static_threads+0xa8>)
    25ee:	4d29      	ldr	r5, [pc, #164]	; (2694 <z_init_static_threads+0xac>)
    25f0:	46b0      	mov	r8, r6
{
    25f2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    25f4:	42b5      	cmp	r5, r6
    25f6:	f105 0430 	add.w	r4, r5, #48	; 0x30
    25fa:	d30f      	bcc.n	261c <z_init_static_threads+0x34>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    25fc:	f7ff fe56 	bl	22ac <k_sched_lock>
    2600:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2604:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    2606:	4c23      	ldr	r4, [pc, #140]	; (2694 <z_init_static_threads+0xac>)
    2608:	4e23      	ldr	r6, [pc, #140]	; (2698 <z_init_static_threads+0xb0>)

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    260a:	f8df a090 	ldr.w	sl, [pc, #144]	; 269c <z_init_static_threads+0xb4>
    260e:	4544      	cmp	r4, r8
    2610:	d321      	bcc.n	2656 <z_init_static_threads+0x6e>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    2612:	b007      	add	sp, #28
    2614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2618:	f7ff be90 	b.w	233c <k_sched_unlock>
		z_setup_new_thread(
    261c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2620:	9305      	str	r3, [sp, #20]
    2622:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2626:	9304      	str	r3, [sp, #16]
    2628:	f854 3c14 	ldr.w	r3, [r4, #-20]
    262c:	9303      	str	r3, [sp, #12]
    262e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2632:	9302      	str	r3, [sp, #8]
    2634:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2638:	9301      	str	r3, [sp, #4]
    263a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    263e:	9300      	str	r3, [sp, #0]
    2640:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2644:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2648:	f7ff ffb4 	bl	25b4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    264c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2650:	64dd      	str	r5, [r3, #76]	; 0x4c
    2652:	4625      	mov	r5, r4
    2654:	e7ce      	b.n	25f4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    2656:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2658:	1c4b      	adds	r3, r1, #1
    265a:	d004      	beq.n	2666 <z_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
    265c:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    265e:	b921      	cbnz	r1, 266a <z_init_static_threads+0x82>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread)
    2660:	4628      	mov	r0, r5
    2662:	f7ff ff83 	bl	256c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2666:	3430      	adds	r4, #48	; 0x30
    2668:	e7d1      	b.n	260e <z_init_static_threads+0x26>
    266a:	46b3      	mov	fp, r6
    266c:	46bc      	mov	ip, r7
    266e:	fbc9 bc01 	smlal	fp, ip, r9, r1
    2672:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    2676:	2300      	movs	r3, #0
    2678:	4658      	mov	r0, fp
    267a:	4661      	mov	r1, ip
    267c:	f7fd fd62 	bl	144 <__aeabi_ldivmod>
    2680:	4651      	mov	r1, sl
    2682:	1c42      	adds	r2, r0, #1
    2684:	f105 0018 	add.w	r0, r5, #24
    2688:	f000 f852 	bl	2730 <z_add_timeout>
    268c:	e7eb      	b.n	2666 <z_init_static_threads+0x7e>
    268e:	bf00      	nop
    2690:	20000f34 	.word	0x20000f34
    2694:	20000f34 	.word	0x20000f34
    2698:	0004ffff 	.word	0x0004ffff
    269c:	000030b3 	.word	0x000030b3

000026a0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    26a0:	4b03      	ldr	r3, [pc, #12]	; (26b0 <elapsed+0x10>)
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	b90b      	cbnz	r3, 26aa <elapsed+0xa>
    26a6:	f7fe ba9b 	b.w	be0 <z_clock_elapsed>
}
    26aa:	2000      	movs	r0, #0
    26ac:	4770      	bx	lr
    26ae:	bf00      	nop
    26b0:	20000158 	.word	0x20000158

000026b4 <remove_timeout>:
{
    26b4:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    26b6:	b140      	cbz	r0, 26ca <remove_timeout+0x16>
    26b8:	4a08      	ldr	r2, [pc, #32]	; (26dc <remove_timeout+0x28>)
	return (node == list->tail) ? NULL : node->next;
    26ba:	6852      	ldr	r2, [r2, #4]
    26bc:	4290      	cmp	r0, r2
    26be:	d004      	beq.n	26ca <remove_timeout+0x16>
	if (next(t) != NULL) {
    26c0:	b11b      	cbz	r3, 26ca <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    26c2:	689a      	ldr	r2, [r3, #8]
    26c4:	6881      	ldr	r1, [r0, #8]
    26c6:	440a      	add	r2, r1
    26c8:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    26ca:	6842      	ldr	r2, [r0, #4]
    26cc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    26ce:	6803      	ldr	r3, [r0, #0]
    26d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    26d2:	2300      	movs	r3, #0
	node->prev = NULL;
    26d4:	e9c0 3300 	strd	r3, r3, [r0]
}
    26d8:	4770      	bx	lr
    26da:	bf00      	nop
    26dc:	20000ec0 	.word	0x20000ec0

000026e0 <next_timeout>:

static s32_t next_timeout(void)
{
    26e0:	b538      	push	{r3, r4, r5, lr}
	int maxw = can_wait_forever ? K_FOREVER : INT_MAX;
    26e2:	4b10      	ldr	r3, [pc, #64]	; (2724 <next_timeout+0x44>)
    26e4:	781b      	ldrb	r3, [r3, #0]
    26e6:	2b00      	cmp	r3, #0
	return list->head == list;
    26e8:	4b0f      	ldr	r3, [pc, #60]	; (2728 <next_timeout+0x48>)
    26ea:	bf18      	it	ne
    26ec:	f04f 30ff 	movne.w	r0, #4294967295
    26f0:	681c      	ldr	r4, [r3, #0]
    26f2:	bf08      	it	eq
    26f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26f8:	429c      	cmp	r4, r3
    26fa:	d00a      	beq.n	2712 <next_timeout+0x32>
	struct _timeout *to = first();
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    26fc:	b14c      	cbz	r4, 2712 <next_timeout+0x32>
    26fe:	68a5      	ldr	r5, [r4, #8]
    2700:	f7ff ffce 	bl	26a0 <elapsed>
    2704:	1a28      	subs	r0, r5, r0
    2706:	2800      	cmp	r0, #0
    2708:	db0a      	blt.n	2720 <next_timeout+0x40>
    270a:	68a4      	ldr	r4, [r4, #8]
    270c:	f7ff ffc8 	bl	26a0 <elapsed>
    2710:	1a20      	subs	r0, r4, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2712:	4b06      	ldr	r3, [pc, #24]	; (272c <next_timeout+0x4c>)
    2714:	691b      	ldr	r3, [r3, #16]
    2716:	b113      	cbz	r3, 271e <next_timeout+0x3e>
    2718:	4298      	cmp	r0, r3
    271a:	bfa8      	it	ge
    271c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    271e:	bd38      	pop	{r3, r4, r5, pc}
	s32_t ret = to == NULL ? maxw : MAX(0, to->dticks - elapsed());
    2720:	2000      	movs	r0, #0
    2722:	e7f6      	b.n	2712 <next_timeout+0x32>
    2724:	20000161 	.word	0x20000161
    2728:	20000ec0 	.word	0x20000ec0
    272c:	2000011c 	.word	0x2000011c

00002730 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    2730:	b570      	push	{r4, r5, r6, lr}
    2732:	4604      	mov	r4, r0
    2734:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2736:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    2738:	f04f 0320 	mov.w	r3, #32
    273c:	f3ef 8511 	mrs	r5, BASEPRI
    2740:	f383 8811 	msr	BASEPRI, r3
    2744:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2748:	f7ff ffaa 	bl	26a0 <elapsed>
    274c:	2e01      	cmp	r6, #1
    274e:	bfac      	ite	ge
    2750:	1980      	addge	r0, r0, r6
    2752:	3001      	addlt	r0, #1
	return list->head == list;
    2754:	4b17      	ldr	r3, [pc, #92]	; (27b4 <z_add_timeout+0x84>)
    2756:	60a0      	str	r0, [r4, #8]
    2758:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    275a:	429a      	cmp	r2, r3
    275c:	d001      	beq.n	2762 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    275e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2760:	b932      	cbnz	r2, 2770 <z_add_timeout+0x40>
	node->prev = list->tail;
    2762:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2764:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
    2766:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    2768:	685a      	ldr	r2, [r3, #4]
    276a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    276c:	605c      	str	r4, [r3, #4]
    276e:	e00b      	b.n	2788 <z_add_timeout+0x58>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2770:	6890      	ldr	r0, [r2, #8]
    2772:	68a1      	ldr	r1, [r4, #8]
    2774:	4288      	cmp	r0, r1
    2776:	dd16      	ble.n	27a6 <z_add_timeout+0x76>
				t->dticks -= to->dticks;
    2778:	1a41      	subs	r1, r0, r1
    277a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    277c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    277e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    2782:	6851      	ldr	r1, [r2, #4]
    2784:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    2786:	6054      	str	r4, [r2, #4]
	return list->head == list;
    2788:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    278a:	429a      	cmp	r2, r3
    278c:	d006      	beq.n	279c <z_add_timeout+0x6c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    278e:	4294      	cmp	r4, r2
    2790:	d104      	bne.n	279c <z_add_timeout+0x6c>
			z_clock_set_timeout(next_timeout(), false);
    2792:	f7ff ffa5 	bl	26e0 <next_timeout>
    2796:	2100      	movs	r1, #0
    2798:	f7fe f9e8 	bl	b6c <z_clock_set_timeout>
	__asm__ volatile(
    279c:	f385 8811 	msr	BASEPRI, r5
    27a0:	f3bf 8f6f 	isb	sy
		}
	}
}
    27a4:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    27a6:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    27a8:	4296      	cmp	r6, r2
    27aa:	60a1      	str	r1, [r4, #8]
    27ac:	d0d9      	beq.n	2762 <z_add_timeout+0x32>
    27ae:	6812      	ldr	r2, [r2, #0]
    27b0:	e7d6      	b.n	2760 <z_add_timeout+0x30>
    27b2:	bf00      	nop
    27b4:	20000ec0 	.word	0x20000ec0

000027b8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    27b8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    27bc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    27be:	f7ff fe51 	bl	2464 <z_time_slice>
	__asm__ volatile(
    27c2:	f04f 0320 	mov.w	r3, #32
    27c6:	f3ef 8511 	mrs	r5, BASEPRI
    27ca:	f383 8811 	msr	BASEPRI, r3
    27ce:	f3bf 8f6f 	isb	sy
    27d2:	4f21      	ldr	r7, [pc, #132]	; (2858 <z_clock_announce+0xa0>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    27d4:	4e21      	ldr	r6, [pc, #132]	; (285c <z_clock_announce+0xa4>)
    27d6:	46b8      	mov	r8, r7
	return list->head == list;
    27d8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2860 <z_clock_announce+0xa8>
    27dc:	6034      	str	r4, [r6, #0]
    27de:	f8d9 4000 	ldr.w	r4, [r9]
    27e2:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    27e4:	454c      	cmp	r4, r9
    27e6:	e9d7 bc00 	ldrd	fp, ip, [r7]
    27ea:	d005      	beq.n	27f8 <z_clock_announce+0x40>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    27ec:	b124      	cbz	r4, 27f8 <z_clock_announce+0x40>
    27ee:	68a3      	ldr	r3, [r4, #8]
    27f0:	4293      	cmp	r3, r2
    27f2:	dd14      	ble.n	281e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    27f4:	1a9b      	subs	r3, r3, r2
    27f6:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    27f8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    27fa:	eb1b 0002 	adds.w	r0, fp, r2
    27fe:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
    2802:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    2806:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    2808:	f7ff ff6a 	bl	26e0 <next_timeout>
    280c:	4621      	mov	r1, r4
    280e:	f7fe f9ad 	bl	b6c <z_clock_set_timeout>
	__asm__ volatile(
    2812:	f385 8811 	msr	BASEPRI, r5
    2816:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    281a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    281e:	eb1b 0003 	adds.w	r0, fp, r3
    2822:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    2826:	1ad3      	subs	r3, r2, r3
    2828:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    282a:	2300      	movs	r3, #0
		curr_tick += dt;
    282c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    2830:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    2832:	4620      	mov	r0, r4
    2834:	f7ff ff3e 	bl	26b4 <remove_timeout>
    2838:	f385 8811 	msr	BASEPRI, r5
    283c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2840:	68e3      	ldr	r3, [r4, #12]
    2842:	4798      	blx	r3
	__asm__ volatile(
    2844:	f04f 0320 	mov.w	r3, #32
    2848:	f3ef 8511 	mrs	r5, BASEPRI
    284c:	f383 8811 	msr	BASEPRI, r3
    2850:	f3bf 8f6f 	isb	sy
    2854:	e7c3      	b.n	27de <z_clock_announce+0x26>
    2856:	bf00      	nop
    2858:	20000000 	.word	0x20000000
    285c:	20000158 	.word	0x20000158
    2860:	20000ec0 	.word	0x20000ec0

00002864 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    2864:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    2866:	4c07      	ldr	r4, [pc, #28]	; (2884 <init_static_pools+0x20>)
    2868:	4d07      	ldr	r5, [pc, #28]	; (2888 <init_static_pools+0x24>)
    286a:	42ac      	cmp	r4, r5
    286c:	d301      	bcc.n	2872 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    286e:	2000      	movs	r0, #0
    2870:	bd38      	pop	{r3, r4, r5, pc}
    2872:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    2876:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    2878:	e9c4 3305 	strd	r3, r3, [r4, #20]
    287c:	f000 f83a 	bl	28f4 <z_sys_mem_pool_base_init>
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    2880:	341c      	adds	r4, #28
    2882:	e7f2      	b.n	286a <init_static_pools+0x6>
    2884:	20000f34 	.word	0x20000f34
    2888:	20000f34 	.word	0x20000f34

0000288c <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    288c:	b508      	push	{r3, lr}
	spm_config();
    288e:	f7fe fa5f 	bl	d50 <spm_config>
	spm_jump();
}
    2892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    2896:	f7fe b9ef 	b.w	c78 <spm_jump>

0000289a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    289a:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    289e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    28a2:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    28a4:	bf08      	it	eq
    28a6:	f06f 0015 	mvneq.w	r0, #21
    28aa:	4770      	bx	lr

000028ac <get_bit_ptr>:
/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct sys_mem_pool_base *p, int level, int bn,
		       u32_t **word)
{
    28ac:	b570      	push	{r4, r5, r6, lr}
    28ae:	250c      	movs	r5, #12
    28b0:	434d      	muls	r5, r1
    28b2:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
    28b4:	f990 000b 	ldrsb.w	r0, [r0, #11]
    28b8:	1974      	adds	r4, r6, r5
		&p->levels[level].bits : p->levels[level].bits_p;
    28ba:	4288      	cmp	r0, r1
    28bc:	bfa8      	it	ge
    28be:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
    28c0:	f04f 0420 	mov.w	r4, #32
    28c4:	fb92 f4f4 	sdiv	r4, r2, r4
		&p->levels[level].bits : p->levels[level].bits_p;
    28c8:	bfb8      	it	lt
    28ca:	5971      	ldrlt	r1, [r6, r5]

	return bn & 0x1f;
}
    28cc:	f002 001f 	and.w	r0, r2, #31
	*word = &bitarray[bn / 32];
    28d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    28d4:	6019      	str	r1, [r3, #0]
}
    28d6:	bd70      	pop	{r4, r5, r6, pc}

000028d8 <set_free_bit>:

static void set_free_bit(struct sys_mem_pool_base *p, int level, int bn)
{
    28d8:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    28da:	ab01      	add	r3, sp, #4
    28dc:	f7ff ffe6 	bl	28ac <get_bit_ptr>

	*word |= (1<<bit);
    28e0:	2301      	movs	r3, #1
    28e2:	9a01      	ldr	r2, [sp, #4]
    28e4:	fa03 f000 	lsl.w	r0, r3, r0
    28e8:	6813      	ldr	r3, [r2, #0]
    28ea:	4303      	orrs	r3, r0
    28ec:	6013      	str	r3, [r2, #0]
}
    28ee:	b003      	add	sp, #12
    28f0:	f85d fb04 	ldr.w	pc, [sp], #4

000028f4 <z_sys_mem_pool_base_init>:
{
	return ((u8_t *)block + bsz - 1 - (u8_t *)p->buf) < buf_size(p);
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    28f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    28f8:	4604      	mov	r4, r0
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
    28fa:	22ff      	movs	r2, #255	; 0xff

	for (i = 0; i < p->n_levels; i++) {
    28fc:	2100      	movs	r1, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    28fe:	f04f 0e0c 	mov.w	lr, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2902:	6843      	ldr	r3, [r0, #4]
    2904:	8905      	ldrh	r5, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    2906:	6800      	ldr	r0, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    2908:	435d      	muls	r5, r3
	for (i = 0; i < p->n_levels; i++) {
    290a:	f894 c00a 	ldrb.w	ip, [r4, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    290e:	4428      	add	r0, r5
	p->max_inline_level = -1;
    2910:	72e2      	strb	r2, [r4, #11]
	for (i = 0; i < p->n_levels; i++) {
    2912:	458c      	cmp	ip, r1
    2914:	dc05      	bgt.n	2922 <z_sys_mem_pool_base_init+0x2e>
		}

		sz = _ALIGN4(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    2916:	2500      	movs	r5, #0
    2918:	8923      	ldrh	r3, [r4, #8]
    291a:	42ab      	cmp	r3, r5
    291c:	dc22      	bgt.n	2964 <z_sys_mem_pool_base_init+0x70>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
		set_free_bit(p, 0, i);
	}
}
    291e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int nblocks = buflen / sz;
    2922:	fbb5 f2f3 	udiv	r2, r5, r3
		sys_dlist_init(&p->levels[i].free_list);
    2926:	fb0e f701 	mul.w	r7, lr, r1
    292a:	f8d4 800c 	ldr.w	r8, [r4, #12]
		if (nblocks < 32) {
    292e:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    2930:	eb08 0607 	add.w	r6, r8, r7
			bits += (nblocks + 31)/32;
    2934:	bfc8      	it	gt
    2936:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    2938:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    293c:	f106 0904 	add.w	r9, r6, #4
			bits += (nblocks + 31)/32;
    2940:	bfc8      	it	gt
    2942:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
    2944:	f103 0303 	add.w	r3, r3, #3
    2948:	e9c6 9901 	strd	r9, r9, [r6, #4]
    294c:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
    2950:	bfd4      	ite	le
    2952:	72e1      	strble	r1, [r4, #11]
			p->levels[i].bits_p = bits;
    2954:	f848 0007 	strgt.w	r0, [r8, r7]
	for (i = 0; i < p->n_levels; i++) {
    2958:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
    295c:	bfc8      	it	gt
    295e:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
    2962:	e7d6      	b.n	2912 <z_sys_mem_pool_base_init+0x1e>
	return (u8_t *)p->buf + lsz * block;
    2964:	6862      	ldr	r2, [r4, #4]
		sys_dlist_append(&p->levels[0].free_list, block);
    2966:	68e3      	ldr	r3, [r4, #12]
	return (u8_t *)p->buf + lsz * block;
    2968:	436a      	muls	r2, r5
    296a:	6820      	ldr	r0, [r4, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    296c:	1d1e      	adds	r6, r3, #4
	return (u8_t *)p->buf + lsz * block;
    296e:	1881      	adds	r1, r0, r2
	node->next = list;
    2970:	5086      	str	r6, [r0, r2]
	node->prev = list->tail;
    2972:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    2974:	4620      	mov	r0, r4
    2976:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
    2978:	689a      	ldr	r2, [r3, #8]
    297a:	6011      	str	r1, [r2, #0]
	list->tail = node;
    297c:	6099      	str	r1, [r3, #8]
    297e:	462a      	mov	r2, r5
    2980:	2100      	movs	r1, #0
    2982:	f7ff ffa9 	bl	28d8 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    2986:	3501      	adds	r5, #1
    2988:	e7c6      	b.n	2918 <z_sys_mem_pool_base_init+0x24>

0000298a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    298a:	b508      	push	{r3, lr}
    298c:	4604      	mov	r4, r0
    298e:	4608      	mov	r0, r1
    2990:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    2992:	461a      	mov	r2, r3
    2994:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t)
    2996:	f7ff fdcb 	bl	2530 <z_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread)
    299a:	f7fe fe03 	bl	15a4 <z_impl_k_thread_abort>

0000299e <z_arch_printk_char_out>:
}
    299e:	2000      	movs	r0, #0
    29a0:	4770      	bx	lr

000029a2 <print_err>:
{
    29a2:	b570      	push	{r4, r5, r6, lr}
    29a4:	460d      	mov	r5, r1
    29a6:	4604      	mov	r4, r0
	out('E', ctx);
    29a8:	2045      	movs	r0, #69	; 0x45
    29aa:	47a0      	blx	r4
	out('R', ctx);
    29ac:	4629      	mov	r1, r5
    29ae:	2052      	movs	r0, #82	; 0x52
    29b0:	47a0      	blx	r4
	out('R', ctx);
    29b2:	4629      	mov	r1, r5
    29b4:	4623      	mov	r3, r4
}
    29b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    29ba:	2052      	movs	r0, #82	; 0x52
    29bc:	4718      	bx	r3

000029be <z_vprintk>:
{
    29be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int long_ctr = 0;
    29c2:	f04f 0a00 	mov.w	sl, #0
{
    29c6:	4606      	mov	r6, r0
    29c8:	460f      	mov	r7, r1
	int min_width = -1;
    29ca:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    29ce:	46d0      	mov	r8, sl
{
    29d0:	b089      	sub	sp, #36	; 0x24
    29d2:	461c      	mov	r4, r3
    29d4:	1e53      	subs	r3, r2, #1
    29d6:	9303      	str	r3, [sp, #12]
			might_format = 0;
    29d8:	2500      	movs	r5, #0
						break;
    29da:	e005      	b.n	29e8 <z_vprintk+0x2a>
		if (!might_format) {
    29dc:	b96d      	cbnz	r5, 29fa <z_vprintk+0x3c>
			if (*fmt != '%') {
    29de:	2825      	cmp	r0, #37	; 0x25
    29e0:	f000 813d 	beq.w	2c5e <z_vprintk+0x2a0>
				out((int)*fmt, ctx);
    29e4:	4639      	mov	r1, r7
    29e6:	47b0      	blx	r6
	while (*fmt) {
    29e8:	9b03      	ldr	r3, [sp, #12]
    29ea:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    29ee:	9303      	str	r3, [sp, #12]
    29f0:	2800      	cmp	r0, #0
    29f2:	d1f3      	bne.n	29dc <z_vprintk+0x1e>
}
    29f4:	b009      	add	sp, #36	; 0x24
    29f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    29fa:	2864      	cmp	r0, #100	; 0x64
    29fc:	d062      	beq.n	2ac4 <z_vprintk+0x106>
    29fe:	d819      	bhi.n	2a34 <z_vprintk+0x76>
    2a00:	2839      	cmp	r0, #57	; 0x39
    2a02:	d80a      	bhi.n	2a1a <z_vprintk+0x5c>
    2a04:	2831      	cmp	r0, #49	; 0x31
    2a06:	d251      	bcs.n	2aac <z_vprintk+0xee>
    2a08:	282d      	cmp	r0, #45	; 0x2d
    2a0a:	d03d      	beq.n	2a88 <z_vprintk+0xca>
    2a0c:	2830      	cmp	r0, #48	; 0x30
    2a0e:	d03e      	beq.n	2a8e <z_vprintk+0xd0>
    2a10:	2825      	cmp	r0, #37	; 0x25
    2a12:	d108      	bne.n	2a26 <z_vprintk+0x68>
				out((int)'%', ctx);
    2a14:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    2a16:	47b0      	blx	r6
    2a18:	e7de      	b.n	29d8 <z_vprintk+0x1a>
			switch (*fmt) {
    2a1a:	2858      	cmp	r0, #88	; 0x58
    2a1c:	f000 80a8 	beq.w	2b70 <z_vprintk+0x1b2>
    2a20:	2863      	cmp	r0, #99	; 0x63
    2a22:	f000 8116 	beq.w	2c52 <z_vprintk+0x294>
				out((int)'%', ctx);
    2a26:	4639      	mov	r1, r7
    2a28:	2025      	movs	r0, #37	; 0x25
    2a2a:	47b0      	blx	r6
				out((int)*fmt, ctx);
    2a2c:	9b03      	ldr	r3, [sp, #12]
    2a2e:	4639      	mov	r1, r7
    2a30:	7818      	ldrb	r0, [r3, #0]
    2a32:	e7f0      	b.n	2a16 <z_vprintk+0x58>
			switch (*fmt) {
    2a34:	2870      	cmp	r0, #112	; 0x70
    2a36:	f000 8091 	beq.w	2b5c <z_vprintk+0x19e>
    2a3a:	d806      	bhi.n	2a4a <z_vprintk+0x8c>
    2a3c:	2869      	cmp	r0, #105	; 0x69
    2a3e:	d041      	beq.n	2ac4 <z_vprintk+0x106>
    2a40:	286c      	cmp	r0, #108	; 0x6c
    2a42:	d03c      	beq.n	2abe <z_vprintk+0x100>
    2a44:	2868      	cmp	r0, #104	; 0x68
    2a46:	d0cf      	beq.n	29e8 <z_vprintk+0x2a>
    2a48:	e7ed      	b.n	2a26 <z_vprintk+0x68>
    2a4a:	2875      	cmp	r0, #117	; 0x75
    2a4c:	d06d      	beq.n	2b2a <z_vprintk+0x16c>
    2a4e:	d817      	bhi.n	2a80 <z_vprintk+0xc2>
    2a50:	2873      	cmp	r0, #115	; 0x73
    2a52:	d1e8      	bne.n	2a26 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    2a54:	6825      	ldr	r5, [r4, #0]
    2a56:	f104 0b04 	add.w	fp, r4, #4
    2a5a:	462b      	mov	r3, r5
				while (*s)
    2a5c:	461c      	mov	r4, r3
    2a5e:	f814 0b01 	ldrb.w	r0, [r4], #1
    2a62:	2800      	cmp	r0, #0
    2a64:	f040 80ec 	bne.w	2c40 <z_vprintk+0x282>
				if (padding == PAD_SPACE_AFTER) {
    2a68:	f1b8 0f03 	cmp.w	r8, #3
    2a6c:	f040 8100 	bne.w	2c70 <z_vprintk+0x2b2>
					int remaining = min_width - (s - start);
    2a70:	1b5c      	subs	r4, r3, r5
    2a72:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    2a76:	2c00      	cmp	r4, #0
    2a78:	f300 80e6 	bgt.w	2c48 <z_vprintk+0x28a>
				char *s = va_arg(ap, char *);
    2a7c:	465c      	mov	r4, fp
    2a7e:	e7ab      	b.n	29d8 <z_vprintk+0x1a>
			switch (*fmt) {
    2a80:	2878      	cmp	r0, #120	; 0x78
    2a82:	d075      	beq.n	2b70 <z_vprintk+0x1b2>
    2a84:	287a      	cmp	r0, #122	; 0x7a
    2a86:	e7de      	b.n	2a46 <z_vprintk+0x88>
				padding = PAD_SPACE_AFTER;
    2a88:	f04f 0803 	mov.w	r8, #3
    2a8c:	e7ac      	b.n	29e8 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    2a8e:	f1b9 0f00 	cmp.w	r9, #0
    2a92:	da0e      	bge.n	2ab2 <z_vprintk+0xf4>
    2a94:	f1b8 0f00 	cmp.w	r8, #0
    2a98:	f000 80e7 	beq.w	2c6a <z_vprintk+0x2ac>
					min_width = *fmt - '0';
    2a9c:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    2aa0:	f1b8 0f00 	cmp.w	r8, #0
    2aa4:	bf08      	it	eq
    2aa6:	f04f 0802 	moveq.w	r8, #2
    2aaa:	e79d      	b.n	29e8 <z_vprintk+0x2a>
				if (min_width < 0) {
    2aac:	f1b9 0f00 	cmp.w	r9, #0
    2ab0:	dbf4      	blt.n	2a9c <z_vprintk+0xde>
					min_width = 10 * min_width + *fmt - '0';
    2ab2:	230a      	movs	r3, #10
    2ab4:	fb03 0909 	mla	r9, r3, r9, r0
    2ab8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    2abc:	e7f0      	b.n	2aa0 <z_vprintk+0xe2>
				long_ctr++;
    2abe:	f10a 0a01 	add.w	sl, sl, #1
    2ac2:	e791      	b.n	29e8 <z_vprintk+0x2a>
				if (long_ctr == 0) {
    2ac4:	f1ba 0f00 	cmp.w	sl, #0
    2ac8:	d112      	bne.n	2af0 <z_vprintk+0x132>
					long ld = va_arg(ap, long);
    2aca:	6825      	ldr	r5, [r4, #0]
    2acc:	3404      	adds	r4, #4
				if (d < 0) {
    2ace:	2d00      	cmp	r5, #0
    2ad0:	da05      	bge.n	2ade <z_vprintk+0x120>
					out((int)'-', ctx);
    2ad2:	4639      	mov	r1, r7
    2ad4:	202d      	movs	r0, #45	; 0x2d
    2ad6:	47b0      	blx	r6
					d = -d;
    2ad8:	426d      	negs	r5, r5
					min_width--;
    2ada:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    2ade:	4643      	mov	r3, r8
    2ae0:	462a      	mov	r2, r5
    2ae2:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
    2ae6:	4639      	mov	r1, r7
    2ae8:	4630      	mov	r0, r6
    2aea:	f7fd fd99 	bl	620 <_printk_dec_ulong>
    2aee:	e773      	b.n	29d8 <z_vprintk+0x1a>
				} else if (long_ctr == 1) {
    2af0:	f1ba 0f01 	cmp.w	sl, #1
    2af4:	d0e9      	beq.n	2aca <z_vprintk+0x10c>
					if (lld > INT32_MAX ||
    2af6:	f04f 0c00 	mov.w	ip, #0
    2afa:	f04f 3bff 	mov.w	fp, #4294967295
					long long lld = va_arg(ap, long long);
    2afe:	3407      	adds	r4, #7
    2b00:	f024 0307 	bic.w	r3, r4, #7
    2b04:	f103 0408 	add.w	r4, r3, #8
    2b08:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (lld > INT32_MAX ||
    2b0c:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
    2b10:	f143 0100 	adc.w	r1, r3, #0
    2b14:	458c      	cmp	ip, r1
    2b16:	bf08      	it	eq
    2b18:	4583      	cmpeq	fp, r0
    2b1a:	d204      	bcs.n	2b26 <z_vprintk+0x168>
						print_err(out, ctx);
    2b1c:	4639      	mov	r1, r7
    2b1e:	4630      	mov	r0, r6
    2b20:	f7ff ff3f 	bl	29a2 <print_err>
    2b24:	e758      	b.n	29d8 <z_vprintk+0x1a>
					d = (s32_t)lld;
    2b26:	4615      	mov	r5, r2
    2b28:	e7d1      	b.n	2ace <z_vprintk+0x110>
				if (long_ctr == 0) {
    2b2a:	f1ba 0f00 	cmp.w	sl, #0
    2b2e:	d105      	bne.n	2b3c <z_vprintk+0x17e>
					long lu = va_arg(ap, unsigned long);
    2b30:	6822      	ldr	r2, [r4, #0]
    2b32:	3404      	adds	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    2b34:	f8cd 9000 	str.w	r9, [sp]
    2b38:	4643      	mov	r3, r8
    2b3a:	e7d4      	b.n	2ae6 <z_vprintk+0x128>
				} else if (long_ctr == 1) {
    2b3c:	f1ba 0f01 	cmp.w	sl, #1
    2b40:	d0f6      	beq.n	2b30 <z_vprintk+0x172>
					unsigned long long llu =
    2b42:	3407      	adds	r4, #7
    2b44:	f024 0307 	bic.w	r3, r4, #7
    2b48:	f103 0408 	add.w	r4, r3, #8
    2b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
					if (llu > INT32_MAX) {
    2b50:	2b00      	cmp	r3, #0
    2b52:	bf08      	it	eq
    2b54:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
    2b58:	d3ec      	bcc.n	2b34 <z_vprintk+0x176>
    2b5a:	e7df      	b.n	2b1c <z_vprintk+0x15e>
				  out('0', ctx);
    2b5c:	4639      	mov	r1, r7
    2b5e:	2030      	movs	r0, #48	; 0x30
    2b60:	47b0      	blx	r6
				  out('x', ctx);
    2b62:	4639      	mov	r1, r7
    2b64:	2078      	movs	r0, #120	; 0x78
    2b66:	47b0      	blx	r6
				  min_width = 8;
    2b68:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    2b6c:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    2b70:	f1ba 0f01 	cmp.w	sl, #1
    2b74:	dc27      	bgt.n	2bc6 <z_vprintk+0x208>
					x = va_arg(ap, unsigned long);
    2b76:	6823      	ldr	r3, [r4, #0]
    2b78:	3404      	adds	r4, #4
    2b7a:	9307      	str	r3, [sp, #28]
    2b7c:	2300      	movs	r3, #0
    2b7e:	9304      	str	r3, [sp, #16]
	int remaining = 16; /* 16 digits max */
    2b80:	2210      	movs	r2, #16
	int digits = 0;
    2b82:	2300      	movs	r3, #0
	int size = sizeof(num) * 2;
    2b84:	4693      	mov	fp, r2
	int digits = 0;
    2b86:	9302      	str	r3, [sp, #8]
	int found_largest_digit = 0;
    2b88:	9306      	str	r3, [sp, #24]
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2b8a:	9b07      	ldr	r3, [sp, #28]
    2b8c:	f10b 3bff 	add.w	fp, fp, #4294967295
    2b90:	ea4f 008b 	mov.w	r0, fp, lsl #2
    2b94:	f1c0 0c20 	rsb	ip, r0, #32
    2b98:	f1a0 0120 	sub.w	r1, r0, #32
    2b9c:	fa23 f000 	lsr.w	r0, r3, r0
    2ba0:	9b04      	ldr	r3, [sp, #16]
    2ba2:	fa03 fc0c 	lsl.w	ip, r3, ip
    2ba6:	ea40 000c 	orr.w	r0, r0, ip
    2baa:	fa23 f101 	lsr.w	r1, r3, r1
    2bae:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || size == 1) {
    2bb0:	f010 000f 	ands.w	r0, r0, #15
    2bb4:	d113      	bne.n	2bde <z_vprintk+0x220>
    2bb6:	9b06      	ldr	r3, [sp, #24]
    2bb8:	b913      	cbnz	r3, 2bc0 <z_vprintk+0x202>
    2bba:	f1bb 0f00 	cmp.w	fp, #0
    2bbe:	d12e      	bne.n	2c1e <z_vprintk+0x260>
			nibble += nibble > 9 ? 87 : 48;
    2bc0:	f04f 0c30 	mov.w	ip, #48	; 0x30
    2bc4:	e011      	b.n	2bea <z_vprintk+0x22c>
					x = va_arg(ap, unsigned long long);
    2bc6:	3407      	adds	r4, #7
    2bc8:	f024 0307 	bic.w	r3, r4, #7
    2bcc:	681a      	ldr	r2, [r3, #0]
    2bce:	f103 0408 	add.w	r4, r3, #8
    2bd2:	685b      	ldr	r3, [r3, #4]
    2bd4:	9207      	str	r2, [sp, #28]
    2bd6:	9304      	str	r3, [sp, #16]
    2bd8:	e7d2      	b.n	2b80 <z_vprintk+0x1c2>
	for (; size != 0; size--) {
    2bda:	9a05      	ldr	r2, [sp, #20]
    2bdc:	e7d5      	b.n	2b8a <z_vprintk+0x1cc>
			nibble += nibble > 9 ? 87 : 48;
    2bde:	2809      	cmp	r0, #9
    2be0:	bf8c      	ite	hi
    2be2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    2be6:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    2bea:	4639      	mov	r1, r7
    2bec:	4460      	add	r0, ip
    2bee:	9205      	str	r2, [sp, #20]
    2bf0:	47b0      	blx	r6
			digits++;
    2bf2:	9b02      	ldr	r3, [sp, #8]
			found_largest_digit = 1;
    2bf4:	9506      	str	r5, [sp, #24]
			digits++;
    2bf6:	3301      	adds	r3, #1
    2bf8:	9302      	str	r3, [sp, #8]
	for (; size != 0; size--) {
    2bfa:	f1bb 0f00 	cmp.w	fp, #0
    2bfe:	d1ec      	bne.n	2bda <z_vprintk+0x21c>
	if (padding == PAD_SPACE_AFTER) {
    2c00:	f1b8 0f03 	cmp.w	r8, #3
    2c04:	f47f aee8 	bne.w	29d8 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    2c08:	9b02      	ldr	r3, [sp, #8]
    2c0a:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    2c0e:	2d00      	cmp	r5, #0
    2c10:	f77f aee2 	ble.w	29d8 <z_vprintk+0x1a>
			out(' ', ctx);
    2c14:	4639      	mov	r1, r7
    2c16:	2020      	movs	r0, #32
    2c18:	47b0      	blx	r6
    2c1a:	3d01      	subs	r5, #1
    2c1c:	e7f7      	b.n	2c0e <z_vprintk+0x250>
		if (remaining-- <= min_width) {
    2c1e:	1e53      	subs	r3, r2, #1
    2c20:	4591      	cmp	r9, r2
    2c22:	9305      	str	r3, [sp, #20]
    2c24:	dbe9      	blt.n	2bfa <z_vprintk+0x23c>
			if (padding == PAD_ZERO_BEFORE) {
    2c26:	f1b8 0f01 	cmp.w	r8, #1
    2c2a:	d103      	bne.n	2c34 <z_vprintk+0x276>
				out('0', ctx);
    2c2c:	4639      	mov	r1, r7
    2c2e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    2c30:	47b0      	blx	r6
    2c32:	e7e2      	b.n	2bfa <z_vprintk+0x23c>
			} else if (padding == PAD_SPACE_BEFORE) {
    2c34:	f1b8 0f02 	cmp.w	r8, #2
    2c38:	d1df      	bne.n	2bfa <z_vprintk+0x23c>
				out(' ', ctx);
    2c3a:	4639      	mov	r1, r7
    2c3c:	2020      	movs	r0, #32
    2c3e:	e7f7      	b.n	2c30 <z_vprintk+0x272>
					out((int)(*s++), ctx);
    2c40:	4639      	mov	r1, r7
    2c42:	47b0      	blx	r6
    2c44:	4623      	mov	r3, r4
    2c46:	e709      	b.n	2a5c <z_vprintk+0x9e>
						out(' ', ctx);
    2c48:	4639      	mov	r1, r7
    2c4a:	2020      	movs	r0, #32
    2c4c:	47b0      	blx	r6
    2c4e:	3c01      	subs	r4, #1
    2c50:	e711      	b.n	2a76 <z_vprintk+0xb8>
				out(c, ctx);
    2c52:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    2c54:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    2c56:	4639      	mov	r1, r7
    2c58:	47b0      	blx	r6
				int c = va_arg(ap, int);
    2c5a:	462c      	mov	r4, r5
    2c5c:	e6bc      	b.n	29d8 <z_vprintk+0x1a>
				long_ctr = 0;
    2c5e:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    2c60:	46a8      	mov	r8, r5
				min_width = -1;
    2c62:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    2c66:	2501      	movs	r5, #1
    2c68:	e6be      	b.n	29e8 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    2c6a:	f04f 0801 	mov.w	r8, #1
    2c6e:	e6bb      	b.n	29e8 <z_vprintk+0x2a>
				char *s = va_arg(ap, char *);
    2c70:	465c      	mov	r4, fp
			might_format = 0;
    2c72:	4605      	mov	r5, r0
    2c74:	e6b8      	b.n	29e8 <z_vprintk+0x2a>

00002c76 <printk>:
{
    2c76:	b40f      	push	{r0, r1, r2, r3}
    2c78:	b507      	push	{r0, r1, r2, lr}
    2c7a:	a904      	add	r1, sp, #16
    2c7c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2c80:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    2c82:	f7fd fd21 	bl	6c8 <vprintk>
}
    2c86:	b003      	add	sp, #12
    2c88:	f85d eb04 	ldr.w	lr, [sp], #4
    2c8c:	b004      	add	sp, #16
    2c8e:	4770      	bx	lr

00002c90 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
    2c90:	4770      	bx	lr

00002c92 <nrf_power_clock_isr>:
#endif
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
	bool usb_detected, usb_pwr_rdy, usb_removed;
#endif

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2c92:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
{
    2c96:	b530      	push	{r4, r5, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2c98:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108

	hf_intenset = ((NRF_CLOCK->INTENSET &
    2c9c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		       CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2ca0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
	hf_intenset = ((NRF_CLOCK->INTENSET &
    2ca4:	f002 0201 	and.w	r2, r2, #1

	lf_intenset = ((NRF_CLOCK->INTENSET &
    2ca8:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		       CLOCK_INTENSET_LFCLKSTARTED_Msk) != 0);
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2cac:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
#if defined(CONFIG_USB) && defined(CONFIG_SOC_NRF52840)
			|| usb_detected || usb_pwr_rdy || usb_removed
#endif
	);

	if (pof) {
    2cb0:	b115      	cbz	r5, 2cb8 <nrf_power_clock_isr+0x26>
		NRF_POWER->EVENTS_POFWARN = 0;
    2cb2:	2500      	movs	r5, #0
    2cb4:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
	}

	if (hf) {
    2cb8:	b1b4      	cbz	r4, 2ce8 <nrf_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2cba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cbe:	2400      	movs	r4, #0
    2cc0:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	}

	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    2cc4:	b122      	cbz	r2, 2cd0 <nrf_power_clock_isr+0x3e>
				   (CLOCK_HFCLKSTAT_STATE_Msk |
				    CLOCK_HFCLKSTAT_SRC_Msk)))){
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2cc6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cca:	2201      	movs	r2, #1
    2ccc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
#endif
	}

	if (lf) {
    2cd0:	b148      	cbz	r0, 2ce6 <nrf_power_clock_isr+0x54>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2cd2:	2200      	movs	r2, #0
    2cd4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cd8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

		if (lf_intenset) {
    2cdc:	078a      	lsls	r2, r1, #30
    2cde:	d502      	bpl.n	2ce6 <nrf_power_clock_isr+0x54>
			/* INTENSET is used as state flag to start calibration,
			 * hence clear it here.
			 */
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2ce0:	2202      	movs	r2, #2
    2ce2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	if (usb_removed) {
		nrf_power_event_clear(NRF_POWER_EVENT_USBREMOVED);
		power_event_cb(NRF_POWER_EVENT_USBREMOVED);
	}
#endif
}
    2ce6:	bd30      	pop	{r4, r5, pc}
	if (hf_intenset && (hf || ((NRF_CLOCK->HFCLKSTAT &
    2ce8:	2a00      	cmp	r2, #0
    2cea:	d0f1      	beq.n	2cd0 <nrf_power_clock_isr+0x3e>
    2cec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cf0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2cf4:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    2cf8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    2cfc:	d1e8      	bne.n	2cd0 <nrf_power_clock_isr+0x3e>
    2cfe:	e7e2      	b.n	2cc6 <nrf_power_clock_isr+0x34>

00002d00 <clock_control_init>:

static int clock_control_init(struct device *dev)
{
    2d00:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(DT_NORDIC_NRF_CLOCK_0_IRQ_0,
    2d02:	2200      	movs	r2, #0
    2d04:	2101      	movs	r1, #1
    2d06:	2005      	movs	r0, #5
    2d08:	f7fe fbac 	bl	1464 <z_irq_priority_set>
		    DT_NORDIC_NRF_CLOCK_0_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_NORDIC_NRF_CLOCK_0_IRQ_0);
    2d0c:	2005      	movs	r0, #5
    2d0e:	f7fe fb85 	bl	141c <z_arch_irq_enable>

	return 0;
}
    2d12:	2000      	movs	r0, #0
    2d14:	bd08      	pop	{r3, pc}

00002d16 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    2d16:	4770      	bx	lr

00002d18 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    2d18:	4770      	bx	lr

00002d1a <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    2d1a:	f7fe b957 	b.w	fcc <__bus_fault>

00002d1e <irq_target_state_set>:
 * @param secure_state 1 if target state is Secure, 0 otherwise.
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
    2d1e:	b243      	sxtb	r3, r0
	if (secure_state) {
    2d20:	b1a9      	cbz	r1, 2d4e <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    2d22:	2b00      	cmp	r3, #0
    2d24:	db12      	blt.n	2d4c <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    2d26:	2101      	movs	r1, #1
    2d28:	095b      	lsrs	r3, r3, #5
    2d2a:	009b      	lsls	r3, r3, #2
    2d2c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2d30:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2d34:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    2d38:	f000 001f 	and.w	r0, r0, #31
    2d3c:	fa01 f000 	lsl.w	r0, r1, r0
    2d40:	ea22 0000 	bic.w	r0, r2, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    2d44:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    2d48:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    2d4c:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    2d4e:	2b00      	cmp	r3, #0
    2d50:	dbfc      	blt.n	2d4c <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    2d52:	2201      	movs	r2, #1
    2d54:	095b      	lsrs	r3, r3, #5
    2d56:	009b      	lsls	r3, r3, #2
    2d58:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2d5c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2d60:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    2d64:	f000 001f 	and.w	r0, r0, #31
    2d68:	fa02 f000 	lsl.w	r0, r2, r0
    2d6c:	4308      	orrs	r0, r1
    2d6e:	e7e9      	b.n	2d44 <irq_target_state_set+0x26>

00002d70 <z_do_kernel_oops>:

void z_do_kernel_oops(const NANO_ESF *esf)
{
    2d70:	4601      	mov	r1, r0
	z_NanoFatalErrorHandler(esf->r0, esf);
    2d72:	6800      	ldr	r0, [r0, #0]
    2d74:	f7fe bbb8 	b.w	14e8 <z_NanoFatalErrorHandler>

00002d78 <lock_interrupts>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
    2d78:	2320      	movs	r3, #32
    2d7a:	f383 8811 	msr	BASEPRI, r3
}
    2d7e:	4770      	bx	lr

00002d80 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    2d80:	b508      	push	{r3, lr}
	handler();
    2d82:	f7fe fc39 	bl	15f8 <z_SysNmiOnReset>
	z_ExcExit();
}
    2d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_ExcExit();
    2d8a:	f7fe b8c7 	b.w	f1c <_IntExit>

00002d8e <z_arch_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arch_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2d8e:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    2d90:	2100      	movs	r1, #0
    2d92:	a801      	add	r0, sp, #4
    2d94:	f7fe fe0a 	bl	19ac <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    2d98:	b003      	add	sp, #12
    2d9a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d9e <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    2d9e:	3801      	subs	r0, #1
    2da0:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
    2da2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    2da6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    2daa:	4293      	cmp	r3, r2
    2dac:	d102      	bne.n	2db4 <strcmp+0x16>
    2dae:	2b00      	cmp	r3, #0
    2db0:	d1f7      	bne.n	2da2 <strcmp+0x4>
    2db2:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    2db4:	1a98      	subs	r0, r3, r2
    2db6:	4770      	bx	lr

00002db8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    2db8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0U) {
    2dba:	ea81 0400 	eor.w	r4, r1, r0
    2dbe:	07a5      	lsls	r5, r4, #30
    2dc0:	4603      	mov	r3, r0
    2dc2:	d00b      	beq.n	2ddc <memcpy+0x24>
    2dc4:	3b01      	subs	r3, #1
    2dc6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    2dc8:	4291      	cmp	r1, r2
    2dca:	d11d      	bne.n	2e08 <memcpy+0x50>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    2dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    2dce:	2a00      	cmp	r2, #0
    2dd0:	d0fc      	beq.n	2dcc <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    2dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    2dd6:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    2dd8:	f803 4b01 	strb.w	r4, [r3], #1
		while (((unsigned int)d_byte) & 0x3) {
    2ddc:	079c      	lsls	r4, r3, #30
    2dde:	d1f6      	bne.n	2dce <memcpy+0x16>
    2de0:	460c      	mov	r4, r1
    2de2:	1f1d      	subs	r5, r3, #4
    2de4:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
    2de6:	1b3e      	subs	r6, r7, r4
    2de8:	2e03      	cmp	r6, #3
    2dea:	d808      	bhi.n	2dfe <memcpy+0x46>
    2dec:	f06f 0503 	mvn.w	r5, #3
    2df0:	0894      	lsrs	r4, r2, #2
    2df2:	fb05 2204 	mla	r2, r5, r4, r2
    2df6:	00a4      	lsls	r4, r4, #2
    2df8:	4423      	add	r3, r4
    2dfa:	4421      	add	r1, r4
    2dfc:	e7e2      	b.n	2dc4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    2dfe:	f854 6b04 	ldr.w	r6, [r4], #4
    2e02:	f845 6f04 	str.w	r6, [r5, #4]!
    2e06:	e7ee      	b.n	2de6 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    2e08:	f811 4b01 	ldrb.w	r4, [r1], #1
    2e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
    2e10:	e7da      	b.n	2dc8 <memcpy+0x10>

00002e12 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    2e12:	4603      	mov	r3, r0
{
    2e14:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char c_byte = (unsigned char)c;
    2e16:	b2c9      	uxtb	r1, r1

	while (((unsigned int)d_byte) & 0x3) {
    2e18:	079c      	lsls	r4, r3, #30
    2e1a:	d10f      	bne.n	2e3c <memset+0x2a>
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
	c_word |= c_word << 16;

	while (n >= sizeof(unsigned int)) {
    2e1c:	461d      	mov	r5, r3
	c_word |= c_word << 8;
    2e1e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    2e22:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
    2e26:	189f      	adds	r7, r3, r2
	while (n >= sizeof(unsigned int)) {
    2e28:	1b7e      	subs	r6, r7, r5
    2e2a:	2e03      	cmp	r6, #3
    2e2c:	d80c      	bhi.n	2e48 <memset+0x36>
    2e2e:	0894      	lsrs	r4, r2, #2
    2e30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2e34:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    2e36:	429c      	cmp	r4, r3
    2e38:	d109      	bne.n	2e4e <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    2e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
    2e3c:	2a00      	cmp	r2, #0
    2e3e:	d0fc      	beq.n	2e3a <memset+0x28>
		*(d_byte++) = c_byte;
    2e40:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    2e44:	3a01      	subs	r2, #1
    2e46:	e7e7      	b.n	2e18 <memset+0x6>
		*(d_word++) = c_word;
    2e48:	f845 4b04 	str.w	r4, [r5], #4
    2e4c:	e7ec      	b.n	2e28 <memset+0x16>
		*(d_byte++) = c_byte;
    2e4e:	f804 1b01 	strb.w	r1, [r4], #1
    2e52:	e7f0      	b.n	2e36 <memset+0x24>

00002e54 <_stdout_hook_default>:
}
    2e54:	f04f 30ff 	mov.w	r0, #4294967295
    2e58:	4770      	bx	lr

00002e5a <gpio_nrfx_write>:
{
    2e5a:	b510      	push	{r4, lr}
	return port->config->config_info;
    2e5c:	6804      	ldr	r4, [r0, #0]
    2e5e:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2e60:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2e62:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2e64:	6824      	ldr	r4, [r4, #0]
    2e66:	69c0      	ldr	r0, [r0, #28]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2e68:	d103      	bne.n	2e72 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    2e6a:	4058      	eors	r0, r3
    p_reg->OUT = value;
    2e6c:	6060      	str	r0, [r4, #4]
}
    2e6e:	2000      	movs	r0, #0
    2e70:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    2e72:	3300      	adds	r3, #0
    2e74:	f04f 0101 	mov.w	r1, #1
    2e78:	bf18      	it	ne
    2e7a:	2301      	movne	r3, #1
    2e7c:	40d0      	lsrs	r0, r2
    2e7e:	f000 0001 	and.w	r0, r0, #1
    2e82:	4091      	lsls	r1, r2
    2e84:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    2e86:	bf14      	ite	ne
    2e88:	60a1      	strne	r1, [r4, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    2e8a:	60e1      	streq	r1, [r4, #12]
    2e8c:	e7ef      	b.n	2e6e <gpio_nrfx_write+0x14>

00002e8e <gpio_nrfx_read>:
{
    2e8e:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    2e90:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    2e92:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2e94:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    2e96:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2e98:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2e9a:	2901      	cmp	r1, #1
    return p_reg->DIR;
    2e9c:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
    2e9e:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
    2ea0:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    2ea2:	ea80 0004 	eor.w	r0, r0, r4
    2ea6:	ea84 0405 	eor.w	r4, r4, r5
    2eaa:	ea04 0406 	and.w	r4, r4, r6
    2eae:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
    2eb2:	bf1c      	itt	ne
    2eb4:	40d0      	lsrne	r0, r2
    2eb6:	f000 0001 	andne.w	r0, r0, #1
    2eba:	6018      	str	r0, [r3, #0]
}
    2ebc:	2000      	movs	r0, #0
    2ebe:	bd70      	pop	{r4, r5, r6, pc}

00002ec0 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2ec0:	6883      	ldr	r3, [r0, #8]
{
    2ec2:	b530      	push	{r4, r5, lr}
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    2ec4:	6818      	ldr	r0, [r3, #0]
	if (!sys_slist_is_empty(callbacks)) {
    2ec6:	b158      	cbz	r0, 2ee0 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2ec8:	2400      	movs	r4, #0
    2eca:	4281      	cmp	r1, r0
    2ecc:	d113      	bne.n	2ef6 <gpio_nrfx_manage_callback+0x36>
    2ece:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    2ed0:	b95c      	cbnz	r4, 2eea <gpio_nrfx_manage_callback+0x2a>
    2ed2:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    2ed4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    2ed6:	42a1      	cmp	r1, r4
    2ed8:	d100      	bne.n	2edc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    2eda:	6058      	str	r0, [r3, #4]
	parent->next = child;
    2edc:	2000      	movs	r0, #0
    2ede:	6008      	str	r0, [r1, #0]
	if (set) {
    2ee0:	b972      	cbnz	r2, 2f00 <gpio_nrfx_manage_callback+0x40>
	return 0;
    2ee2:	2000      	movs	r0, #0
}
    2ee4:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2ee6:	4628      	mov	r0, r5
    2ee8:	e7ef      	b.n	2eca <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    2eea:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    2eec:	6858      	ldr	r0, [r3, #4]
    2eee:	4281      	cmp	r1, r0
	list->tail = node;
    2ef0:	bf08      	it	eq
    2ef2:	605c      	streq	r4, [r3, #4]
    2ef4:	e7f2      	b.n	2edc <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    2ef6:	6805      	ldr	r5, [r0, #0]
    2ef8:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2efa:	2d00      	cmp	r5, #0
    2efc:	d1f3      	bne.n	2ee6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    2efe:	b13a      	cbz	r2, 2f10 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    2f00:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    2f02:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    2f04:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    2f06:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    2f08:	2800      	cmp	r0, #0
    2f0a:	d1ea      	bne.n	2ee2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    2f0c:	6059      	str	r1, [r3, #4]
    2f0e:	e7e9      	b.n	2ee4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    2f10:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2f14:	e7e6      	b.n	2ee4 <gpio_nrfx_manage_callback+0x24>

00002f16 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2f16:	2901      	cmp	r1, #1
{
    2f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2f1c:	bf18      	it	ne
    2f1e:	b2d4      	uxtbne	r4, r2
{
    2f20:	4606      	mov	r6, r0
		to_pin   = pin;
    2f22:	bf12      	itee	ne
    2f24:	4625      	movne	r5, r4
		to_pin   = 31U;
    2f26:	251f      	moveq	r5, #31
		from_pin = 0U;
    2f28:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2f2a:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
    2f2e:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2f30:	42ac      	cmp	r4, r5
    2f32:	d902      	bls.n	2f3a <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    2f34:	2000      	movs	r0, #0
}
    2f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	fa08 f204 	lsl.w	r2, r8, r4
    2f40:	ea23 0302 	bic.w	r3, r3, r2
    2f44:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2f46:	4621      	mov	r1, r4
    2f48:	4630      	mov	r0, r6
    2f4a:	f7fe fd6b 	bl	1a24 <gpiote_pin_int_cfg>
		if (res != 0) {
    2f4e:	2800      	cmp	r0, #0
    2f50:	d1f1      	bne.n	2f36 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2f52:	3401      	adds	r4, #1
    2f54:	b2e4      	uxtb	r4, r4
    2f56:	e7eb      	b.n	2f30 <gpio_nrfx_pin_disable_callback+0x1a>

00002f58 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    2f58:	2901      	cmp	r1, #1
{
    2f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    2f5e:	bf18      	it	ne
    2f60:	b2d4      	uxtbne	r4, r2
{
    2f62:	4606      	mov	r6, r0
		to_pin   = pin;
    2f64:	bf12      	itee	ne
    2f66:	4625      	movne	r5, r4
		to_pin   = 31U;
    2f68:	251f      	moveq	r5, #31
		from_pin = 0U;
    2f6a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    2f6c:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
    2f70:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2f72:	42ac      	cmp	r4, r5
    2f74:	d902      	bls.n	2f7c <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    2f76:	2000      	movs	r0, #0
}
    2f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    2f7c:	68fb      	ldr	r3, [r7, #12]
    2f7e:	fa08 f204 	lsl.w	r2, r8, r4
    2f82:	4313      	orrs	r3, r2
    2f84:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    2f86:	4621      	mov	r1, r4
    2f88:	4630      	mov	r0, r6
    2f8a:	f7fe fd4b 	bl	1a24 <gpiote_pin_int_cfg>
		if (res != 0) {
    2f8e:	2800      	cmp	r0, #0
    2f90:	d1f2      	bne.n	2f78 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    2f92:	3401      	adds	r4, #1
    2f94:	b2e4      	uxtb	r4, r4
    2f96:	e7ec      	b.n	2f72 <gpio_nrfx_pin_enable_callback+0x1a>

00002f98 <uarte_nrfx_config_get>:
{
    2f98:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    2f9a:	6882      	ldr	r2, [r0, #8]
    2f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2fa0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    2fa4:	2000      	movs	r0, #0
    2fa6:	4770      	bx	lr

00002fa8 <uarte_nrfx_err_check>:
	return dev->config->config_info;
    2fa8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    2faa:	689b      	ldr	r3, [r3, #8]
    2fac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2fae:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    2fb2:	b118      	cbz	r0, 2fbc <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    2fb4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    2fb8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    2fbc:	4770      	bx	lr

00002fbe <uarte_nrfx_poll_in>:
	return dev->config->config_info;
    2fbe:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    2fc0:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
    2fc2:	689b      	ldr	r3, [r3, #8]
    2fc4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2fc6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    2fca:	b138      	cbz	r0, 2fdc <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
    2fcc:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fce:	2000      	movs	r0, #0
    2fd0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fd2:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fd4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fd8:	601a      	str	r2, [r3, #0]
	return 0;
    2fda:	4770      	bx	lr
		return -1;
    2fdc:	f04f 30ff 	mov.w	r0, #4294967295
}
    2fe0:	4770      	bx	lr

00002fe2 <uarte_nrfx_poll_out>:
{
    2fe2:	b082      	sub	sp, #8
    2fe4:	aa02      	add	r2, sp, #8
    2fe6:	f802 1d01 	strb.w	r1, [r2, #-1]!
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fea:	2100      	movs	r1, #0
	return dev->config->config_info;
    2fec:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
    2fee:	689b      	ldr	r3, [r3, #8]
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2ff6:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2ffa:	2201      	movs	r2, #1
    2ffc:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3000:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3002:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    3006:	2900      	cmp	r1, #0
    3008:	d0fb      	beq.n	3002 <uarte_nrfx_poll_out+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    300a:	60da      	str	r2, [r3, #12]
}
    300c:	b002      	add	sp, #8
    300e:	4770      	bx	lr

00003010 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    3010:	f7ff be82 	b.w	2d18 <z_clock_idle_exit>

00003014 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3014:	7b43      	ldrb	r3, [r0, #13]
    3016:	06db      	lsls	r3, r3, #27
    3018:	bf03      	ittte	eq
    301a:	6980      	ldreq	r0, [r0, #24]
    301c:	fab0 f080 	clzeq	r0, r0
    3020:	0940      	lsreq	r0, r0, #5
    3022:	2000      	movne	r0, #0
}
    3024:	4770      	bx	lr

00003026 <z_unpend_thread_no_timeout>:
{
    3026:	b538      	push	{r3, r4, r5, lr}
    3028:	4604      	mov	r4, r0
    302a:	f04f 0320 	mov.w	r3, #32
    302e:	f3ef 8511 	mrs	r5, BASEPRI
    3032:	f383 8811 	msr	BASEPRI, r3
    3036:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    303a:	4601      	mov	r1, r0
    303c:	6880      	ldr	r0, [r0, #8]
    303e:	f7ff f949 	bl	22d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3042:	7b63      	ldrb	r3, [r4, #13]
    3044:	f023 0302 	bic.w	r3, r3, #2
    3048:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    304a:	f385 8811 	msr	BASEPRI, r5
    304e:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    3052:	2300      	movs	r3, #0
    3054:	60a3      	str	r3, [r4, #8]
}
    3056:	bd38      	pop	{r3, r4, r5, pc}

00003058 <z_reschedule>:
{
    3058:	b508      	push	{r3, lr}
	if (resched()) {
    305a:	f7ff f8d5 	bl	2208 <resched>
    305e:	b120      	cbz	r0, 306a <z_reschedule+0x12>
}
    3060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3064:	4608      	mov	r0, r1
    3066:	f7fd bfef 	b.w	1048 <__swap>
    306a:	f381 8811 	msr	BASEPRI, r1
    306e:	f3bf 8f6f 	isb	sy
    3072:	bd08      	pop	{r3, pc}

00003074 <z_reschedule_irqlock>:
{
    3074:	b508      	push	{r3, lr}
    3076:	4602      	mov	r2, r0
	if (resched()) {
    3078:	f7ff f8c6 	bl	2208 <resched>
    307c:	b120      	cbz	r0, 3088 <z_reschedule_irqlock+0x14>
}
    307e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3082:	4610      	mov	r0, r2
    3084:	f7fd bfe0 	b.w	1048 <__swap>
    3088:	f382 8811 	msr	BASEPRI, r2
    308c:	f3bf 8f6f 	isb	sy
    3090:	bd08      	pop	{r3, pc}

00003092 <z_reschedule_unlocked>:
	__asm__ volatile(
    3092:	f04f 0320 	mov.w	r3, #32
    3096:	f3ef 8011 	mrs	r0, BASEPRI
    309a:	f383 8811 	msr	BASEPRI, r3
    309e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
    30a2:	f7ff bfe7 	b.w	3074 <z_reschedule_irqlock>

000030a6 <z_priq_dumb_best>:
	return list->head == list;
    30a6:	6803      	ldr	r3, [r0, #0]
}
    30a8:	4298      	cmp	r0, r3
    30aa:	bf14      	ite	ne
    30ac:	4618      	movne	r0, r3
    30ae:	2000      	moveq	r0, #0
    30b0:	4770      	bx	lr

000030b2 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    30b2:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    30b6:	b570      	push	{r4, r5, r6, lr}
    30b8:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    30ba:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    30be:	b1cb      	cbz	r3, 30f4 <z_thread_timeout+0x42>
    30c0:	f04f 0320 	mov.w	r3, #32
    30c4:	f3ef 8611 	mrs	r6, BASEPRI
    30c8:	f383 8811 	msr	BASEPRI, r3
    30cc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    30d0:	4629      	mov	r1, r5
    30d2:	f850 0c10 	ldr.w	r0, [r0, #-16]
    30d6:	f7ff f8fd 	bl	22d4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    30da:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    30de:	f023 0302 	bic.w	r3, r3, #2
    30e2:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    30e6:	f386 8811 	msr	BASEPRI, r6
    30ea:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    30ee:	2300      	movs	r3, #0
    30f0:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    30f4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    30f8:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    30fa:	f023 0314 	bic.w	r3, r3, #20
    30fe:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    3102:	f7ff ff87 	bl	3014 <z_is_thread_ready>
    3106:	b120      	cbz	r0, 3112 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    3108:	4628      	mov	r0, r5
}
    310a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    310e:	f7ff b931 	b.w	2374 <z_add_thread_to_ready_q>
    3112:	bd70      	pop	{r4, r5, r6, pc}

00003114 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3114:	7b43      	ldrb	r3, [r0, #13]
    3116:	06db      	lsls	r3, r3, #27
    3118:	bf03      	ittte	eq
    311a:	6980      	ldreq	r0, [r0, #24]
    311c:	fab0 f080 	clzeq	r0, r0
    3120:	0940      	lsreq	r0, r0, #5
    3122:	2000      	movne	r0, #0
}
    3124:	4770      	bx	lr

00003126 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    3126:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    3128:	b510      	push	{r4, lr}
    312a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    312c:	b103      	cbz	r3, 3130 <z_thread_single_abort+0xa>
		thread->fn_abort();
    312e:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    3130:	4620      	mov	r0, r4
    3132:	f7ff ffef 	bl	3114 <z_is_thread_ready>
    3136:	b138      	cbz	r0, 3148 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    3138:	4620      	mov	r0, r4
    313a:	f7ff f9c7 	bl	24cc <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    313e:	7b63      	ldrb	r3, [r4, #13]
    3140:	f043 0308 	orr.w	r3, r3, #8
    3144:	7363      	strb	r3, [r4, #13]
}
    3146:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    3148:	7b63      	ldrb	r3, [r4, #13]
    314a:	079b      	lsls	r3, r3, #30
    314c:	d502      	bpl.n	3154 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    314e:	4620      	mov	r0, r4
    3150:	f7ff ff69 	bl	3026 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    3154:	69a3      	ldr	r3, [r4, #24]
    3156:	2b00      	cmp	r3, #0
    3158:	d0f1      	beq.n	313e <z_thread_single_abort+0x18>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    315a:	f104 0018 	add.w	r0, r4, #24
    315e:	f000 f809 	bl	3174 <z_abort_timeout>
    3162:	e7ec      	b.n	313e <z_thread_single_abort+0x18>

00003164 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    3164:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    3166:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    3168:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    316a:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    316c:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    316e:	e9c0 3306 	strd	r3, r3, [r0, #24]

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    3172:	4770      	bx	lr

00003174 <z_abort_timeout>:
{
    3174:	b510      	push	{r4, lr}
	__asm__ volatile(
    3176:	f04f 0220 	mov.w	r2, #32
    317a:	f3ef 8411 	mrs	r4, BASEPRI
    317e:	f382 8811 	msr	BASEPRI, r2
    3182:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3186:	6803      	ldr	r3, [r0, #0]
    3188:	b13b      	cbz	r3, 319a <z_abort_timeout+0x26>
			remove_timeout(to);
    318a:	f7ff fa93 	bl	26b4 <remove_timeout>
			ret = 0;
    318e:	2000      	movs	r0, #0
	__asm__ volatile(
    3190:	f384 8811 	msr	BASEPRI, r4
    3194:	f3bf 8f6f 	isb	sy
}
    3198:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    319a:	f06f 0015 	mvn.w	r0, #21
    319e:	e7f7      	b.n	3190 <z_abort_timeout+0x1c>

000031a0 <z_get_next_timeout_expiry>:
{
    31a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    31a2:	f04f 0320 	mov.w	r3, #32
    31a6:	f3ef 8411 	mrs	r4, BASEPRI
    31aa:	f383 8811 	msr	BASEPRI, r3
    31ae:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    31b2:	f7ff fa95 	bl	26e0 <next_timeout>
	__asm__ volatile(
    31b6:	f384 8811 	msr	BASEPRI, r4
    31ba:	f3bf 8f6f 	isb	sy
}
    31be:	bd10      	pop	{r4, pc}

000031c0 <z_set_timeout_expiry>:
{
    31c0:	b570      	push	{r4, r5, r6, lr}
    31c2:	4604      	mov	r4, r0
    31c4:	460e      	mov	r6, r1
	__asm__ volatile(
    31c6:	f04f 0320 	mov.w	r3, #32
    31ca:	f3ef 8511 	mrs	r5, BASEPRI
    31ce:	f383 8811 	msr	BASEPRI, r3
    31d2:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    31d6:	f7ff fa83 	bl	26e0 <next_timeout>
		if (sooner && !imminent) {
    31da:	42a0      	cmp	r0, r4
    31dc:	dd05      	ble.n	31ea <z_set_timeout_expiry+0x2a>
    31de:	2801      	cmp	r0, #1
    31e0:	dd03      	ble.n	31ea <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    31e2:	4631      	mov	r1, r6
    31e4:	4620      	mov	r0, r4
    31e6:	f7fd fcc1 	bl	b6c <z_clock_set_timeout>
	__asm__ volatile(
    31ea:	f385 8811 	msr	BASEPRI, r5
    31ee:	f3bf 8f6f 	isb	sy
}
    31f2:	bd70      	pop	{r4, r5, r6, pc}

000031f4 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    31f4:	4770      	bx	lr
